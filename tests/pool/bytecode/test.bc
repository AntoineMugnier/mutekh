
        // load custom instruction definitions
	.custom print

        .name test

        // force use of virtual machine
        // .backend bytecode

//	.global %0 buf
	.const %0 buf

test_bytecode_entry:
	.entry %1

        // enable vm debug traces
        // trace	1, 1

        cst8	%3, 143
        cst8	%2, 143
        neq	%3, %2
         die
        neq     %3, %2
         cst32	%2, 0x5678abcd, 0    // skipped
        neq     %3, %2
         cst16	%2, 0x5678, 0    // skipped
        neq     %3, %2
         std	%2, %3          // skipped
        neq     %3, %2
         laddr16	%2, data    // skipped
        neq     %3, %2
         jmp32	data            // skipped
        neq     %3, %2
         call32	%2, data    // skipped
        neq     %3, %2
         ld8e	%2, %3, 1   // skipped
        neq     %3, %2
         ld16e	%2, %3, 2   // skipped
        neq     %3, %2
         ld32e	%2, %3, 4   // skipped
        neq     %3, %2
         st8e	%2, %3, 1   // skipped
        neq     %3, %2
         st16e	%2, %3, 2   // skipped
        neq     %3, %2
         st32e	%2, %3, 4   // skipped
        neq	%3, %2
         die
        eq	%3, %2
         cst32	%3, 0x5678abcd, 0
        neq	%3, %2
         cst32	%2, 0x5678abcd, 0
        neq	%3, %2
         die

#ifndef CONFIG_MUTEK_BYTECODE_CHECKING
    // CST8, CCALL, NEQ
        cst8	%2, 11
        ccall	%1
        cst8	%3, 143
        neq	%3, %2
        die
#endif

    // CST8, NEQ, EQ
        cst8	%1, 0
        cst16	%2, 0, 0
        neq	%1, %2
        die
        neq0	%1
        die
        neq0	%2
        die
        eq	%1, %2
        jmp8	next1
        die
next1:
    // CST8, EQ, ADD
        cst8	%1, 42
        eq	%1, %2
        die
        neq	%1, %2
        jmp8	next2
        die
next2:
        add8	%2, 21
        add8	%2, 21
        neq	%1, %2
        die

    // LT, LTEQ
        lt	%1, %2
        die
        lteq	%1, %2
        jmp8	next3
        die
next3:
        add8	%1, 1
        lt	%1, %2
        die
        lteq	%1, %2
        die
        lt	%2, %1
        jmp8	next4
        die
next4:
        lteq	%2, %1
        jmp8	next5
        die
next5:
    // LOOP backward, ADD8 positiv
        cst8	%1, 0
        cst8	%2, 5
add:
        add8	%1, 2
        loop	%2, add
        cst8	%2, 10
        neq	%1, %2
        die

    // ADD8 negative
        cst8	%1, 15
        cst8	%2, 5
add8:
        add8	%1, -2
        loop	%2, add8
        cst8	%2, 5
        neq	%1, %2
        die

    // LOOP forward, JMP
        cst8	%1, 0
        cst8	%2, 5
re:
        loop	%2, fwd
        add8	%1, 2
        jmp8	re
fwd:
        cst8	%2, 10
        neq	%1, %2
        die

    // TSTC, TSTS
        cst8	%1, 0x55
        tst32c	%1, 2
        die
        tst32s	%1, 2
        jmp8	next6
        die
next6:
        tst32s	%1, 1
        die
        tst32c	%1, 1
        jmp8	next7
        die
next7:
        tst32c	%1, 1
        shi32l	%1, 1
        tst32c	%1, 1
        die
        tst32s	%1, 1
        jmp8	next8
        die
next8:
        tst32s	%1, 2
        die
        tst32c	%1, 2
        jmp8	next9
        die
next9:

	shr32     %1, %2
    // BITC, BITS
        cst8	%1, 0x0f
        bit32s	%1, 5
        tst32c	%1, 5
        die
        bit32c	%1, 2
        tst32s	%1, 2
        die
        cst8	%2, 0x2b
        neq	%1, %2
        die

    // LD8, LD8I
        mov	%1, %buf
        add8	%1, 5
        mov	%4, %1
        ld8	%2, %1
        cst8	%3, 'a'
        neq	%3, %2
        die
        neq	%4, %1
        die
        ld8i	%2, %1
        ld8i	%2, %1
        cst8	%3, 'r'
        neq	%3, %2
        die

    // MUL, CST16, CST32, CST16X
        cst16	%1, 0x1234, 0
        cst32	%2, 0x5678abcd, 0
        mul32	%2, %1
        cst16	%3, 0xffff, 16
        and32	%2, %3
        cst32	%3, 0x0c970000, 0
        neq	%3, %2
        die

    // ST32I, ST32, LD32
        cst32	%2, 0x12345678, 0
        mov	%1, %buf
        st32i	%2, %1
        shi32l	%2, 1
        st32	%2, %1
        ld32	%3, %1
        cst32	%5, 0x2468acf0, 0
        neq	%5, %2
        die
        add8	%1, -4
        neq	%1, %buf
        die
        ld32	%4, %1
        cst32	%2, 0x12345678, 0
        neq	%4, %2
        die

    // STE32, LDE32
        ld32e	%4, %buf, 4
        neq	%5, %4
        die
        add8	%1, 12
        shi32l	%4, 1
        st32e	%4, %1, -8
        ld32e	%5, %buf, 4
        cst32	%2, 0x48d159e0, 0
        neq	%5, %2
        die

        skipodd %1
        die

        skipodd %2
        jmp8 next10
        die
next10:

    // SUB, NEG
        cst8	%1, 0x42
        cst8	%2, 0x12
	sub	%1, %2
	add8    %1, -0x30
	neq0	%1
	die
	add8    %1, -0x30
	neg	%1
	bit32c	%1, 4
	bit32c	%1, 5
	neq0	%1
	die

    // EQ0, NEQ0
	cst8	%1, 42
	eq0	%1
	die
	neq0	%1
	jmp8 next11
	die
next11:
	add8	%1, -42
	neq0	%1
	die
	eq0	%1
	jmp8 next12
	die
next12:
    // EXTZ
	cst8	%1, 0x42
	mov	%2, %1
	extz	%2, 7
	neq	%1, %2
	die
	mov	%2, %1
	extz	%2, 15
	neq	%1, %2
	die
	cst8	%1, 0x82
	mov	%2, %1
	extz	%2, 7
	neq	%1, %2
	die
	mov	%2, %1
	extz	%2, 15
	neq	%1, %2
	die
	cst16	%1, 0xff82, 0
	mov	%2, %1
	extz	%2, 11
	eq	%1, %2
	die
	cst16	%3, 0xf82, 0
	neq	%3, %2
	die
	mov	%2, %1
	extz	%2, 7
	eq	%1, %2
	die
	cst8	%3, 0x82
	neq	%3, %2
	die
	mov	%2, %1
	extz	%2, 15
	neq	%1, %2
	die

    // EXTS
	cst8	%1, 0x42
	mov	%2, %1
	exts	%2, 7
	neq	%1, %2
	die
	mov	%2, %1
	exts	%2, 15
	neq	%1, %2
	die
	cst8	%1, 0x82
	mov	%2, %1
	exts	%2, 7
	eq	%1, %2
	die
	extz	%2, 31
	cst32	%1, 0xffffff82, 0
	neq	%1, %2
	die
	cst16	%2, 0x382, 0
	mov	%3, %2
	exts	%2, 10
	neq	%3, %2
	die
	cst64	%1, 0xffffffffffffff82, 0
	exts	%2, 9
	neq	%1, %2
	die

    // MSBS
	cst8	%1, 0x42
	msbs32	%1
	cst8	%2, 6
	neq	%1, %2
	die
	cst32	%1, 0xffffff82, 0
	msbs32	%1
	cst8	%2, 31
	neq	%1, %2
	die

    // NOT, ANDN
	cst16	%1, 0x55aa, 0
	not32	%1
	cst32	%2, 0xffffaa55, 0
	neq	%1, %2
	die
	cst8    %3, 0xf0
	andn32    %2, %3
	cst32	%1, 0xffffaa05, 0
	neq	%1, %2
	die

    // LADDR
	laddr16 %1, data
	ld8	%2, %1
	cst8	%3, 0xac
	xor32	%2, %3
	cst8	%1, 0xff
	neq	%1, %2
	die

#ifndef CONFIG_MUTEK_BYTECODE_CHECKING
	// GADDR
	gaddr   %1, data
	ld8	%2, %1
	not32	%2
	extz	%2, 7
	neq	%3, %2
	die
#endif

    // SHIL, SHIR
	cst8	%1, 0x3c
	shi32l    %1, 8
	cst16	%2, 0x3c00, 0
	neq	%1, %2
	die
	shi32l    %1, 4
	cst32	%2, 0x3c000, 0
	neq	%1, %2
	die
	shi32r    %1, 1
	cst32	%2, 0x1e000, 0
	neq	%1, %2
	die

    // SHL, SHR
	cst8	%1, 0xc3
	cst8	%5, 8
	shl32     %1, %5
	cst16	%2, 0xc300, 0
	neq	%1, %2
	die
	cst8	%5, 4
	shl32     %1, %5
	cst32	%2, 0xc3000, 0
	neq	%1, %2
	die
	cst8	%5, 1
	shr32     %1, %5
	cst32	%2, 0x61800, 0
	neq	%1, %2
	die

    // UNPACK
	loadstr %2, 4
	unpack8 %2, 4
        cst8	%1, 0
        neq     %1, %2
        die
        cst8	%1, 3
        neq     %1, %5
        die

        loadstr %2, 8
	unpack8 %2, 8
        cst8	%1, 0
        neq     %1, %2
        die
        cst8	%1, 7
        neq     %1, %9
        die

	loadstr %2, 8
	unpack16be %2, 4, 8
        cst8	%1, 1
        neq     %1, %2
        die
        cst16	%1, 0x203, 0
        neq     %1, %3
        die
        cst16	%1, 0x607, 0
        neq     %1, %5
        die

	loadstr %2, 8
	unpack16le %2, 4, 8
        cst16	%1, 0x100, 0
        neq     %1, %2
        die
        cst16	%1, 0x302, 0
        neq     %1, %3
        die
        cst16	%1, 0x706, 0
        neq     %1, %5
        die

	loadstr %2, 16
	unpack16be %2, 8, 16
        cst8	%1, 1
        neq     %1, %2
        die
        cst16	%1, 0x203, 0
        neq     %1, %3
        die
        cst16	%1, 0xe0f, 0
        neq     %1, %9
        die

	loadstr %2, 16
	unpack16le %2, 8, 16
        cst16	%1, 0x100, 0
        neq     %1, %2
        die
        cst16	%1, 0x302, 0
        neq     %1, %3
        die
        cst16	%1, 0xf0e, 0
        neq     %1, %9
        die

	loadstr %2, 8
	unpack32be %2, 2, 8
        cst32	%1, 0x00010203, 0
        neq     %1, %2
        die
        cst32	%1, 0x04050607, 0
        neq     %1, %3
        die

	loadstr %2, 8
	unpack32le %2, 2, 8
        cst32	%1, 0x03020100, 0
        neq     %1, %2
        die
        cst32	%1, 0x07060504, 0
        neq     %1, %3
        die

	loadstr %2, 32
	unpack32be %2, 8, 32
        cst32	%1, 0x00010203, 0
        neq     %1, %2
        die
        cst32	%1, 0x1c1d1e1f, 0
        neq     %1, %9
        die

	loadstr %2, 32
	unpack32le %2, 8, 32
        cst32	%1, 0x03020100, 0
        neq     %1, %2
        die
        cst32	%1, 0x1f1e1d1c, 0
        neq     %1, %9
        die

    // PACK
        cst8    %1, 0
        cst8    %2, 1
        cst8    %3, 2
        cst8    %4, 3
	pack8   %1, 4
        checkstr %1, 4

	cst16   %1, 0x0001, 0
	cst16   %2, 0x0203, 0
	cst16   %3, 0x0405, 0
	cst16   %4, 0x0607, 0
	pack16be %1, 4, 8
        checkstr %1, 8

	cst16   %1, 0x0100, 0
	cst16   %2, 0x0302, 0
	cst16   %3, 0x0504, 0
	cst16   %4, 0x0706, 0
	pack16le %1, 4, 8
        checkstr %1, 8

	cst16   %1, 0x0001, 0
	cst16   %2, 0x0203, 0
	cst16   %3, 0x0405, 0
	cst16   %4, 0x0607, 0
	cst16   %5, 0x0809, 0
	cst16   %6, 0x0a0b, 0
	cst16   %7, 0x0c0d, 0
	cst16   %8, 0x0e0f, 0
	pack16be %1, 8, 16
        checkstr %1, 16

	cst16   %1, 0x0100, 0
	cst16   %2, 0x0302, 0
	cst16   %3, 0x0504, 0
	cst16   %4, 0x0706, 0
	cst16   %5, 0x0908, 0
	cst16   %6, 0x0b0a, 0
	cst16   %7, 0x0d0c, 0
	cst16   %8, 0x0f0e, 0
	pack16le %1, 8, 16
        checkstr %1, 16

	cst32   %1, 0x00010203, 0
	cst32   %2, 0x04050607, 0
	cst32   %3, 0x08090a0b, 0
	cst32   %4, 0x0c0d0e0f, 0
	pack32be %1, 4, 16
        checkstr %1, 16

	cst32   %1, 0x03020100, 0
	cst32   %2, 0x07060504, 0
	cst32   %3, 0x0b0a0908, 0
	cst32   %4, 0x0f0e0d0c, 0
	pack32le %1, 4, 16
        checkstr %1, 16

	cst32   %1, 0x00010203, 0
	cst32   %2, 0x04050607, 0
	cst32   %3, 0x08090a0b, 0
	cst32   %4, 0x0c0d0e0f, 0
	cst32   %5, 0x10111213, 0
	cst32   %6, 0x14151617, 0
	cst32   %7, 0x18191a1b, 0
	cst32   %8, 0x1c1d1e1f, 0
	pack32be %1, 8, 32
        checkstr %1, 32

	cst32   %1, 0x03020100, 0
	cst32   %2, 0x07060504, 0
	cst32   %3, 0x0b0a0908, 0
	cst32   %4, 0x0f0e0d0c, 0
	cst32   %5, 0x13121110, 0
	cst32   %6, 0x17161514, 0
	cst32   %7, 0x1b1a1918, 0
	cst32   %8, 0x1f1e1d1c, 0
	pack32le %1, 8, 32
        checkstr %1, 32

    // SWAP
	cst32   %1, 0x12345678, 0
	cst32   %2, 0x78563412, 0
        swap32  %1
	neq	%1, %2
	die

	cst32   %1, 0x12345678, 0
#if defined (CONFIG_CPU_ENDIAN_BIG)
	cst32   %2, 0x78563412, 0
#elif defined (CONFIG_CPU_ENDIAN_LITTLE)
	cst32   %2, 0x12345678, 0
#else
# error
#endif
        swap32le %1
	neq	%1, %2
	die

	cst32   %1, 0x12345678, 0
#if defined (CONFIG_CPU_ENDIAN_BIG)
	cst32   %2, 0x12345678, 0
#elif defined (CONFIG_CPU_ENDIAN_LITTLE)
	cst32   %2, 0x78563412, 0
#endif
        swap32be %1
	neq	%1, %2
	die

	cst16   %1, 0xcdef, 0
	cst16   %2, 0xefcd, 0
        swap16  %1
	extz    %1, 15
	neq	%1, %2
	die

	cst16   %1, 0xcdef, 0
#if defined (CONFIG_CPU_ENDIAN_BIG)
	cst16   %2, 0xefcd, 0
#elif defined (CONFIG_CPU_ENDIAN_LITTLE)
	cst16   %2, 0xcdef, 0
#endif
        swap16le %1
	extz    %1, 15
	neq	%1, %2
	die

	cst16   %1, 0xcdef, 0
#if defined (CONFIG_CPU_ENDIAN_BIG)
	cst16   %2, 0xcdef, 0
#elif defined (CONFIG_CPU_ENDIAN_LITTLE)
	cst16   %2, 0xefcd, 0
#endif
        swap16be %1
	extz    %1, 15
	neq	%1, %2
	die

    // hello world using the custom prints instruction
        mov	%2, %buf
        mov	%1, %buf
        cst8	%5, 'H'
        st8i	%5, %1
        cst8	%5, 'e'
        st8i	%5, %1
        cst8	%5, 'l'
        st8i	%5, %1
        st8i	%5, %1
        cst8	%5, 'o'
        st8i	%5, %1
        cst8	%5, 0
        st8i	%5, %1

        prints	%2

    // recursive factorial invocation
        mov	%13, %buf
        add8	%13, 120
        cst8	%fact:arg, 5
        call32	%fact:link, wrap
        cst8	%3, 120
        neq	%fact:result, %3
        die
        end

.func wrap
	.input %10, %13
	.input %1
	.output %1
	.clobber %2
        jmp8 fact     // tail call
        nop
.endfunc

	// recursive factorial function
.func fact
	.input %10 link, %13 sp
	.input %1 arg
	.output %1 result
	.clobber %2 tmp
	.preserve %10, %13

        std	%link, %sp
        cst8	%tmp, 1
        eq	%arg, %tmp
         jmp8	fact_end
        std	%result, %sp
        add8	%arg, -1
        call8	%link, fact
        ldi	%tmp, %sp
        mul32	%result, %tmp
fact_end:
        printi	%result
        ldi	%link, %sp
        ret	%link
.endfunc

data:
        .export data
	data16  0x5353

