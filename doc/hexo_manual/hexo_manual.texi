\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename hexo_manual.info
@settitle Hexo manual
@c %**end of header
@syncodeindex fn cp
@syncodeindex tp cp
@syncodeindex fn cp

@copying
This manual is for Hexo an exokernel for heterogeneous multiprocessor
systems, version 1.0.

Copyright @copyright{} 2006 Alexandre Becoulet.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being "A GNU Manual,"
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have freedom to copy and
modify this GNU Manual, like GNU software.  Copies published by the
Free Software Foundation raise funds for GNU development."
@end quotation
@end copying

@titlepage
@title Manual for Hexo
@subtitle exokernel for heterogeneous multiprocessor systems, version 1.0.
@author Alexandre Becoulet - UPMC / LIP6

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents
@paragraphindent none

@ifnottex
@node Top
@top Hexo

@insertcopying
@end ifnottex

@menu
* Copying::			Your rights and freedoms
* Overview::                    Hexo project description
* Hexo API::                    Read detailed API description
* Devices and drivers::         Learn about the way hexo handle devices
* Index::
@end menu

@node Overview
@chapter Overview

Hexo is a processor and platform hardware abstraction layer designed
to operate on heterogeneous system. It has been designed with
processor and platform specific code separation. It provides processor
independent, consistent hardware access behavior.

@section Hexo usage

@cindex POSIX thread

The provided primitives are useful to develop a higher level operating
system interface like POSIX thread library, L4 or Unix kernel
library.

@format
@group
Super mode applications can be developped directly over hexo or above
an additional operating system interface library. @xref{fig1} for
detailed layout of POSIX thread based application.

@float Figure,fig1
@center @image{hexo-libs-pt,10cm}
@end float
@end group
@end format

@format
@group

@cindex L4 micro-kernel

A secured operating system library can be based on Hexo. @xref{fig2}
for layout of L4 micro-kernel based application running over Hexo.

@float Figure,fig2
@center @image{hexo-libs-l4,10cm}
@end float
@end group
@end format

@format
@group
@cindex UNIX operating system
More complex operating systems library can also be based on Hexo. @xref{fig3}
for layout of UNIX operating system library.

@float Figure,fig3
@center @image{hexo-libs-unix,10cm}
@end float
@end group
@end format

@c end float

Architecture dependant code found in other kernel project is often
designed for a specific processor running on a particular
platform. Processor dependant code and platform dependant code
separation in Hexo allows more flexibility and avoid code duplication
in SoC applications where several execution cores family can be chosen
for a specific platform.

@float Figure,fig4
@image{hexo-layout,7cm}
@end float

Hexo provides a set of functions to access processor and platform
related hardware resources. When compiled for different processor on
the same platform, Hexo ensures the behavior of all different
processors in the system is the same toward the memory and
peripherals. This allows Hexo to run on heterogeneous multiprocessor
platforms.

@float Figure,fig5
@image{hexo-hal,10cm}
@end float

@section Main Features

Hexo has been design to provide the following features:

@itemize
@item Hexo is designed for Heterogeneous multi processors platforms.
      SocLib or IBM-PC are examples of supported platforms.
@item Source code is highly configurable.
      Source code configuration is handled by an extra application
which check options dependencies and compatibilities. It allows hexo
to be configured through hundreds of options to best match application
and platform requirements.
@item Hexo supports different processor word widths (8 to 64 bits).
      Proper use of integer types enable code to be compiled on processor
      architectures with different word widths without overhead.
@item Hexo is part of MutekH project and comes with OS and utility
      libraries (pthread, L4, ...) and utility libraries (libc, networking, ...)
@end itemize

@section Main Services

Hexo is an hardware abstraction layer, it provides different
low-levels primitives:

@itemize
@item Processor interrupts, events handling and IPIs.
@item Basic context switching and generic scheduling primitives.
@item Processor IO/memory space access.
@item Processor and context local storage memory.
@item Atomic memory access and spin locks.
@item Paged and protected memory management.
@item Cache flush and prefetch operations.
@end itemize

These primitives are described in details in this document.

@node Hexo API
@chapter Hexo API

@menu
* Integer types::                       Use of integer types for heterogeneity and portability
* Endian and alignment::                General purpose endian swapping and alignment functions
* System startup::                      System intialization related functions
* Atomic memory access::               Atomic access to integer values
* Spinlocks::                           General purpose spin locks feature
* Memory allocation::                   Scalable memory allocator for single or multiple segments
* Processor and context local data::    Use processor local and context local storage
* IO Space access::                     Peripherals address space access
* Processor events::                    Manage hardware interrupts, exceptions and syscall events
* Processor specific features::         Other processor specific features
* Running contexts management::         Save and restore execution context
* Generic contexts scheduler::          Put context in running or user defined wait queues
@end menu

@include c_hexo_api.texi

@c node Devices and drivers
@c chapter Devices and drivers
@c include c_device_drivers.texi

@node Index
@unnumbered Index

@printindex cp

@bye

