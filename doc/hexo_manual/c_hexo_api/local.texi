
It is sometime useful to have a C Global variables which is local to
the current processor or local to the current running context. This mean all
processors or all context on the system will own an instance of such
a variable.

Hexo enables declaration and access to such language global,
processor local and language global, context local
variable with a set of macros.

Processor local variables can be accessed with the following macros:

@itemize
@item The @code{CPU_LOCAL} must be used as a prefix for processor
      local variables declaration.

@item The @code{CPU_LOCAL_SET(var, value)} must be used to set
      the value of a processor local variable.

@item The @code{CPU_LOCAL_GET(var)} returns the value of a processor
      local variable.

@item The @code{CPU_LOCAL_ADDR(var)} returns the address of a processor
      local variable.

@end itemize

The above macros use normal variable access mechanism if
multiprocessor support is disabled in Hexo configuration.

Context local variables can be accessed with the following macros:

@itemize
@item The @code{CONTEXT_LOCAL} must be used as a prefix for context
      local variables declaration.

@item The @code{CONTEXT_LOCAL_SET(var, value)} must be used to set
      the value of a context local variable.

@item The @code{CONTEXT_LOCAL_GET(var)} returns the value of a context
      local variable.

@item The @code{CONTEXT_LOCAL_ADDR(var)} returns the address of a context
      local variable.

@item The @code{CONTEXT_LOCAL_FOREIGN_SET(tls, var, value)} set the
      address of a context local variable which is not in the current context.

@end itemize

@subsubheading Example

@verbatim

#include <hexo/local.h>

CONTEXT_LOCAL int a;    /* context local, C global variable */
CPU_LOCAL int b;     /* cpu local, C global variable */
...

{
  int c, *ptr;

  CONTEXT_LOCAL_SET(a, 123);       /* context local variable store */
  c = CONTEXT_LOCAL_GET(a);        /* context local variable load */
  p = CONTEXT_LOCAL_ADDR(a);       /* context local variable address */
  ...

@end verbatim

