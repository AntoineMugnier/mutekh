
Atomic memory access operations depends on both processor and
platform. Some processors and platform provide instructions
and lockable memory bus able to perform direct atomic operations on
memory. Other systems do not provide these mechanism and relies on
specific locking devices.

Hexo provides a set of functions to perform simple atomic integer
operations on the current platform. Atomic operations are performed
using best available mechanism: direct processor atomic operations or
spin lock protected conventional integer access.

The following type and functions must be used to perform atomic
integer operations:

@itemize
@item @code{atomic_int_t} is the integer type which match the
      word width used for atomic memory accesses.

@item The @code{ATOMIC_INITIALIZER(n)} macro can be used to statically
      initialize an atomic integer object.

@item @code{atomic_t} is the base type used to store an atomic integer
      object which should be accessed atomically.

@item @code{void atomic_set(atomic_t *a, atomic_int_t value)}
      must be used to set the value of an atomic integer object.

@item @code{atomic_int_t atomic_get(atomic_t *a)} must be used to read 
      the value of an atomic integer object.

@item @code{bool_t atomic_inc(atomic_t *a)} and @code{bool_t atomic_dec(atomic_t *a)}
      allow atomic increment and decrement of an atomic integer object.
      These functions return false (@code{0}) if the result is (@code{0}).

@item @code{void atomic_bit_set(atomic_t *a, uint_fast8_t n)}
      and @code{void atomic_bit_clr(atomic_t *a, uint_fast8_t n)}
      can be used to set and clear a single bit in an atomic integer object.

@item @code{bool_t atomic_bit_testset(atomic_t *a, uint_fast8_t n)}
      and @code{bool_t atomic_bit_testclr(atomic_t *a, uint_fast8_t n)}
      can be used to set and clear a single bit in an atomic integer object
      and test the previous bit value. These functions return @code{0} if
      the bit was cleared.

@item @code{bool_t atomic_bit_test(atomic_t *a, uint_fast8_t n)} can be used
      to test the value of a single bit in an atomic integer object. This
      function returns @code{0} if the bit is cleared.

@end itemize

