
@cindex integer types
@cindex C99 types

Hexo provides C99 scalar C types for use in higher level
libraries. These integer types are defined in the
@code{<hexo/types.h>} header file.

Use of standard integer C types is deprecated in the MutekH project
(except for the @code{char} type). Standard integer C types can not be
used to properly write code portable to different processors.

C99 integer types must be used to ensure all integer variables and
fields are properly chosen to handle the right value range:

@itemize @bullet
@item These types enable hexo to be compiled on platform with
different word widths without overhead due to small register
width. Using the standard @code{int} type for a range limited value
could lead to use of too large variables on processors where only 8
bits registers are available.

@item Use of these types allows control of integer types 
width through Hexo configuration. This is required for heterogeneous
code generation where data structures in memory must have the same
layout when compiled separately for different processors.
@end itemize

The following integer types must be used for fixed integer width
values: @code{uint8_t, uint16_t, uint32_t, uint64_t, int8_t, int16_t,
int32_t, int64_t}.

Other integer types must be used for general purpose integer
values. The following types are guaranteed to be at least @emph{n}
bits large while using the processor preferred word width if @emph{n}
is less than word width: @code{uint_fast8_t, uint_fast16_t,
uint_fast32_t, uint_fast64_t, int_fast8_t, int_fast16_t, int_fast32_t,
int_fast64_t}.

@tindex atomic_int_t
@tindex reg_t
Other processor dependant integer types are defined:
@itemize
@item @code{uintptr_t}, @code{intptr_t} and @code{ptrdiff_t} match pointer type width.
@item @code{atomic_int_t} is the integer size width used for processor atomic operations if available.
@item @code{reg_t} is unsigned and match processor register word width.
@end itemize

@tindex bool_t
@tindex cpu_id_t
The following integer types are platform dependant:
@itemize
@item @code{size_t}, @code{ssize_t}, @code{off_t}, @code{uintmax_t}, @code{intmax_t} standard type are provided.
@item @code{bool_t} may be used to store boolean values.
@item @code{cpu_id_t} is used to store the processor integer id on multiprocessor systems.
@end itemize

Compiler native type can still be used with care using these types:
@code{__compiler_sshort_t, __compiler_sint_t, __compiler_slong_t,
__compiler_slonglong_t, __compiler_ushort_t, __compiler_uint_t,
__compiler_ulong_t, __compiler_ulonglong_t}. These types are needed
when using the @code{va_arg} family macros.

@findex __MINOF_TYPE
@findex __MAXOF_TYPE

Maximum and minimum integer value of an integer type can be expressed
with the @code{__MINOF_TYPE(}@emph{type}@code{)} and
@code{__MAXOF_TYPE(}@emph{type}@code{)} macros.

