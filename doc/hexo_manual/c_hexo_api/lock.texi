
Spin locks depend on processor and platform features like atomic
operations does. @xref{Atomic memory access}.

Hexo provides a set of functions to perform spin locking operations
using available mechanisms. All locking functions presented here
do not perfom any operation when hexo is configured for single
processor.

The following types and functions located in the
@code{<hexo/lock.h>} header file must be used to perform spin locking
operations:

@itemize
@tindex lock_t
@item @code{lock_t} type must be used to declare a spin lock object.

@findex lock_init
@item @code{error_t lock_init(lock_t *lock)} initializes a spin lock object.

@findex lock_destroy
@item @code{void lock_destroy(lock_t *lock)} frees resources associated
      with a spin lock object.

@findex lock_try
@item @code{bool_t lock_try(lock_t *lock)} tries to lock a spin lock object.
      This functions returns 1 if lock was busy.

@findex lock_spin
@item @code{void lock_spin(struct arch_lock_s *lock)} enters a wait loop
      and returns when the spin lock object has been locked.

@findex lock_release
@item @code{void lock_release(lock_t *lock)} release the spin lock object
      locked with lock_spin().

@findex lock_state
@item @code{bool_t lock_state(lock_t *lock)} reads current state of spin
      lock object. Returns 1 if lock is busy.

@findex lock_spin_irq
@item @code{lock_spin_irq(lock_t *lock)} save and disable processor interrupts
      state and acts the same way as @code{lock_spin()}. You may consider using
      the @code{LOCK_SPIN_IRQ(lock)} macro instead which produce faster code.

@findex lock_release_irq
@item @code{void lock_release_irq(lock_t *lock)} acts the same way as
      @code{lock_release()} and restore previous processor interruptions state.

@findex LOCK_SPIN_IRQ
@item @code{LOCK_SPIN_IRQ(lock)} macro save and disable processor interrupts
      state and call @code{lock_spin()}. Interrupts state is
      saved in a local variable and may be stored in a register by the compiler.
      This macro starts a new C block and must be balanced with the
      @code{LOCK_RELEASE_IRQ(lock)} macro.

@findex LOCK_RELEASE_IRQ
@item @code{LOCK_RELEASE_IRQ(lock)} calls @code{lock_release()} and restore
      interrupts state. See @code{LOCK_SPIN_IRQ(lock)}.

@end itemize

