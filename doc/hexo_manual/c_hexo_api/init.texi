
The system startup process is split among a few functions defined in
the @code{<hexo/init.h>} and @code{<hexo/cpu.h>} header files. The
Hexo/Mutek startup process is split between processor specific,
platform specific and common code parts. The involved functions are
described here:

@itemize

@findex cpu_boot
@item @code{void cpu_boot()} is the first function executed by a
      running processor. It is located in the processor specific code
      part. This function must setup an unique temporary stack space for the
      running processor and jump to the @code{arch_init()} function.

@findex arch_init
@item @code{void arch_init()} is the first C function executed by a
      running processor. It is located in the platform specific code
      part.  The first processor must call @code{cpu_global_init()},
      initialize itself with the @code{cpu_init()} function and call
      @code{mutek_main()}. All other running processors must processed to
      their own initialization by calling @code{cpu_init()} and enter a wait
      loop. When the first processor later call
      @code{arch_start_other_cpu()} from @code{mutek_main()}, all other
      processors will be unlocked and enter the @code{mutek_main_smp()}
      function.

@findex cpu_start_other_cpu
@item @code{void cpu_start_other_cpu(void)} may be called from the @code{arch_init()}
      function to let other processors boot. This may be needed on
      some system were not all processors start execution on system reset.

@findex cpu_global_init
@item @code{error_t cpu_global_init(void)} must be called only once to initialize
      data specific to a processor architecture when needed.

@findex cpu_init
@item @code{struct cpu_cld_s *cpu_init(void)} must be called once by each
      running processor. This function performs processor specific
      initialization and allocates a processor local storage and descriptor
      for each processor.

@findex mutek_main
@item @code{int_fast8_t mutek_main(int_fast8_t argc, char **argv)} is the
      mutek kernel initialization function. It is located in the mutek common
      code part.  It should contain all peripherals and drivers
      initialization. It is executed by the first processor only.

@findex mutek_main_smp
@item @code{void mutek_main_smp(void)} is the mutek main function. It is executed
      by all processors. This function setup processors exception
      handler and jump into the scheduler execution loop. The application
      @code{main()} function is called by the first processor before entering
      the scheduler loop. This means the application main functions must create
      execution contexts and return to let the first processor execute scheduler
      contexts.

@findex arch_start_other_cpu
@item @code{void arch_start_other_cpu(void)} must be called by the first first
      processor to let other processors enter the @code{mutek_main_smp()} function.

@end itemize

