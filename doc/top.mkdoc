
@include template.mkdoc

@parse{
  doc/gct.mkdoclib
}

@moduledef {Core}
  @hidden
@end moduledef

@moduledef {Libraries}
  @hidden
@end moduledef

@include ../libc/libc.mkdoc
@include ../hexo/hexo.mkdoc
@include ../mutek/mutek.mkdoc
@include ../gct/gct.mkdoc
@include ../libdevice/libdevice.mkdoc
@include ../libm/libm.mkdoc
@include ../libvfs/libvfs.mkdoc
@include ../libpthread/libpthread.mkdoc
@include ../libnetwork/libnetwork.mkdoc
@include ../libinet/libinet.mkdoc
@include ../libble/ble.mkdoc
@include ../libfdt/libfdt.mkdoc
@include ../libtermui/libtermui.mkdoc
@include ../libgomp/libgomp.mkdoc
@include ../liblua/liblua.mkdoc

@include ../arch/arch.mkdoc
@include ../cpu/cpu.mkdoc
@include ../drivers/drivers.mkdoc

@parse{
doc/config.h 
}

@insert title

@section TU {Introduction}

  MutekH is a free, highly portable and flexible operating system kernel
  targetting platforms ranging from micro-controller to multiprocessor
  systems.

  MutekH has a modular
  @url{http://en.wikipedia.org/wiki/Exokernel}{exokernel}
  architecture. It is built on a clean @ref{+Core::Hardware abstraction
  layer}{processor and platform abstraction layer}, a set of
  @ref{+Core::Kernel services}{base kernel services} and a set of additional
  service libraries.

  The exokernel comes with several operating system interface
  libraries and service libraries, including a @xref{devices support
  library}{} with device drivers APIs for
  various classes of devices. This allows development of applications
  which are portable across hardware platforms.

  The kernel was designed to be easily extended with new libraries and
  platform support. It is fully @xref{Build configuration
  files}{configurable} in order to match application needs and
  platform constraints. Moreover it has an easy to use
  @xref{build system}{} and a @xref{testsuite}{}.

  MutekH takes advantage of advanced compilation techniques like C99
  inlining and preprocessor metaprogramming in order to optimize
  binaries while keeping the source code modular. It relies on a
  comprehensive @ref{+Core::Generic C templates}{container template
  library}.

  MutekH is able to run on various @xref{Supported
  processors}{processors} and @xref{Supported platforms}{platforms}.

  @section {Source code}
    The source code can be browsed online:
    @url{https://www.mutekh.org/hg/mutekh/file/}

    See the @xref{Building MutekH} section to get started.
  @end section

  @section {Contact}
    The @url{mailto:users@lists.mutekh.org}{users@lists.mutekh.org}
    mailing list is available for discussing MutekH. You may subscribe
    by sending a message to
    @url{mailto:users-subscribe@lists.mutekh.org}
    {users-subscribe@lists.mutekh.org}.
  @end section

  @section {Copying this document}
   Copyright (c) Alexandre Becoulet 2009-2016. Permission is granted to copy,
   distribute and/or modify this document under the terms of the GNU Free
   Documentation License, Version 1.3 or any later version published by
   the Free Software Foundation; with no Invariant Sections, no
   Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is
   included in the section entitled @xref{GNU Free Documentation License}.
  @end section

@end section

@section HP {Table of contents}
  @insert toc
@end section

@section TP {Building MutekH}

  Building a MutekH kernel require a single invocation of @tt{make}
  with a path to a build configuration file along with some
  target architecture and feature selection tokens.

  The following subsections give detailed descriptions of the build
  system usage:

  @insert localtoc

  @include quickstart.mkdoc
  @include install.mkdoc
  @include build_config.mkdoc
@end section

@section TP {Core modules}
  This section contains documentation for core MutekH modules:
  @insert localtoc
  @insert {+Core} {TP} module_sections
@end section

@section TP {Library modules}
  This section contains documentation for various MutekH libraries:
  @insert localtoc
  @insert {+Libraries} {TP} module_sections
@end section

@section TP {Hardware support}

  MutekH has separate code modules for processor support code,
  platform support code and device drivers. The following subsections
  describe the source tree organization for the hardware related code
  and detail what hardware is actually supported:

  @insert localtoc

  @section TP {Source organization}

    A platform support package is composed of:
    @list
      @item Implementation of some features provided by the
        @ref{+Core::Hardware abstraction layer}{hardware abstraction layer} module, stored in
        header files located in @tt{arch/*/include/hexo/}.
      @item Optionally, some platform specific definitions, stored in
        header files located in @tt{arch/*/include/arch_name/}.
      @item Optionally, some static @xref{Device tree}{device
        declarations} for the platform.
      @item Optionally, some board descriptions specific source files
        with static declarations of relevant devices, located in @tt{arch/*/boards}.
      @item A linker script, usually based on the generic script
        provided in @sourcelink arch/common/ldscript.cpp .
      @item Definition for platform specific @xref{Configuration
        tokens}{configuration tokens} and features.
      @item Optionally, definition for platform specific
        @xref{Initialization tokens declaration}{initialization tokens}
        and associated initialization functions.
      @item Optionally, some @xref{Device drivers}{device drivers}
        specific to a particular platform may be found in
        @tt{arch/*/drivers}.
    @end list

    A processor support package is composed of:
    @list
      @item Implementation of some features provided by the
        @ref{+Core::Hardware abstraction layer}{hardware abstraction layer} module, stored in
        header files located in @tt{cpu/*/include/hexo/}.
      @item Optionally, some processor specific definitions, stored in
        header files located in @tt{cpu/*/include/cpu_name/}.
      @item Plain assembly code for processor boot and initialization.
      @item Plain assembly code for interrupts and exceptions handling.
      @item Plain assembly code for context switching.
      @item Some assembly implementations of some library features like
        the libc @ref setjmp and @ref longjmp functions.
      @item A device driver which implements the
        @ref{@device/class/cpu.h}{processor device class} for that
        processor and optionally some other classes.
      @item Processor dependent compiler options.
      @item Optionally, Definition for processor specific
        @xref{Configuration tokens}{configuration tokens} and features.
      @item Optionally, some @xref{Device drivers}{device drivers}
        specific to a particular processor vendor may be found in
        @tt{cpu/*/drivers}.
      @item Optionally, a native bytecode compiler backend for the generic
        @ref{@mutek/bytecode.h}{mutekh bytecode} in the form of a perl module.
    @end list

    Devices drivers may be processor vendor specific, platform
    specific or cross-platform. They may be found at different
    locations in the source tree:
    @list
      @item @tt cpu/*/drivers/ : @xref {Supported processors} {processor vendor related device drivers}.
      @item @tt arch/*/drivers/ : @xref {Supported platforms} {platform related device drivers}.
      @item @sourcelink drivers/ : @xref {Cross-platform drivers} {cross-platform device drivers}.
    @end list

  @end section

  @section TP {Supported processors}
    The following processors have a support module in MutekH:
    @list
      @foreach id name type {!hidden module} {+Processors} {0}
        @group
          @ref @id@ {@name@}
        @end group
      @end foreach
    @end list
    @insert {+Processors} {tP} module_sections
  @end section

  @section TP {Supported platforms}
    The following platforms have a support module in MutekH:
    @list
      @foreach id name type {!hidden module} {+Platforms} {0}
        @group
          @ref @id@ {@name@}
        @end group
      @end foreach
    @end list
    @insert {+Platforms} {tP} module_sections
  @end section

  @section TP {Cross-platform drivers}
    @invoke {+Cross-platform drivers} _compound_doc
    @insert {1} localtoc
  @end section

@end section

@section TP {Developer reference}

  This section contains material for kernel developers and application
  developers. The following topics are covered:
  @insert localtoc

  @include config_desc.mkdoc
  @include testsuite.mkdoc
  @section TP {List of headers}
    @insert {header} compound_table
    @insert {header} all_compound_sections
  @end section
  @section PTHe {List of declarations}
    @insert global_scope_doc
  @end section
@end section

@section TP {History}
  The MutekH project has originally been developed at the SoC
  department of the @url {http://www.lip6.fr/}{LIP6} Laboratory, UPMC,
  Paris.

  It has originally been designed to support heterogeneous
  multiprocessor platforms with shared memory.
@end section

@section TP {GNU Free Documentation License}
 @include fdl-1.3.mkdoc
@end section

