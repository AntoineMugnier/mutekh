/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1                                         \
     -i /home/cerdan/Work/fxhome/simu/components/transceiver/transceiver.bf    \
     -O /home/cerdan/Work/fxhome/mutekh/rfpacket/vci_rfpacket/rfpacket_regs.h
*/

#ifndef _SOCLIB_TRANSCEIVER_BFGEN_DEFS_
#define _SOCLIB_TRANSCEIVER_BFGEN_DEFS_

#define SOCLIB_TRANSCEIVER_PRINT_ADDR                0x00000000
#define SOCLIB_TRANSCEIVER_PRINT_MASK                0x000000ff
/** Use for simulator log. @multiple */
  #define SOCLIB_TRANSCEIVER_PRINT_CHAR(v)         ((v) << 0)
  #define SOCLIB_TRANSCEIVER_PRINT_CHAR_SET(x, v)  do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define SOCLIB_TRANSCEIVER_PRINT_CHAR_GET(x)     (((x) >> 0) & 0xff)

/** Write this register to put data in fifo. Read this register to get data from
   fifo. @multiple */
#define SOCLIB_TRANSCEIVER_FIFO_ADDR                 0x00000004
#define SOCLIB_TRANSCEIVER_FIFO_MASK                 0x00000000

#define SOCLIB_TRANSCEIVER_CTRL_ADDR                 0x00000008
#define SOCLIB_TRANSCEIVER_CTRL_MASK                 0x0000007e
/** Set this bit to start a TX operation. If the timeout value is not null when
   writing this register, the transceiver will listen to the channel before
   performing the TX operation. If during at the end of the timeout period, the
   TX operation has not be performed due to a channel RSSI value greater than the
   RSSI value register, a TIMEOUT interrupt will be raised. If a packet is
   received during timeout, the transceiver will wait for the RX FIFO to be empty
   before continuing TX with LBT operation. If timeout value is null when writing
   this register, the transceiver will perform the TX operation irrespective of
   the channel RSSI. This bit returns to 0 automatically on next cycle. @multiple
   */
  #define SOCLIB_TRANSCEIVER_CTRL_START_TX         0x00000002
/** Set this bit to start a RX operation. If the timeout value is not null when
   writing this register, the transceiver will perfom RX operation only during
   the timeout period. At the end of the timeout period, a TIMEOUT interrupt will
   be raised. If the timeout value is null when writing this register, the
   transceiver will RX until a cancel operation is done. This bit returns to 0
   automatically on next cycle. @multiple */
  #define SOCLIB_TRANSCEIVER_CTRL_START_RX         0x00000004
/** Set this bit to start a configuration. All RF and PACKET configuration
   registers must be written when setting this bit. These new parameters are only
   taken into account when this bit is set to 1. This bit returns to 0
   automatically on next cycle. @multiple */
  #define SOCLIB_TRANSCEIVER_CTRL_START_CFG        0x00000008
/** Set this bit to cancel a RX operation with no timeout. This bit is not taken
   into account if one of the three start bit is set. After a cancel is done a
   new operation can be started immediately. @multiple */
  #define SOCLIB_TRANSCEIVER_CTRL_CANCEL           0x00000010
/** Writing 1 to this bit will flush RX fifo. This bit returns to 0
   automatically. @multiple */
  #define SOCLIB_TRANSCEIVER_CTRL_FRX              0x00000020
/** Writing 1 to this bit will flush TX fifo. This bit returns to 0
   automatically. @multiple */
  #define SOCLIB_TRANSCEIVER_CTRL_FTX              0x00000040

#define SOCLIB_TRANSCEIVER_LEN_ADDR                  0x0000000c
#define SOCLIB_TRANSCEIVER_LEN_MASK                  0x0000ffff
/** Lengh of packet to receive/transmit in bytes. For TX operation this value
   must be positive. For a RX operation this register contain length of received
   packed. @multiple */
  #define SOCLIB_TRANSCEIVER_LEN_VAL(v)            ((v) << 0)
  #define SOCLIB_TRANSCEIVER_LEN_VAL_SET(x, v)     do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define SOCLIB_TRANSCEIVER_LEN_VAL_GET(x)        (((x) >> 0) & 0xffff)

/** This register contains the MSB of the filter value to use. Packet that does
   not match this filter value will not be received. In TX mode, this value is
   used as a packet ID. @multiple */
#define SOCLIB_TRANSCEIVER_FILTER_MSB_ADDR           0x00000010
#define SOCLIB_TRANSCEIVER_FILTER_MSB_MASK           0x00000000

/** This register contains the LSB of the filter value to use. Used with start
   config bit. @multiple */
#define SOCLIB_TRANSCEIVER_FILTER_LSB_ADDR           0x00000014
#define SOCLIB_TRANSCEIVER_FILTER_LSB_MASK           0x00000000

/** This register contains the data rate used on channel. The value is in b/s.
   Used with start config bit. @multiple */
#define SOCLIB_TRANSCEIVER_DATA_RATE_ADDR            0x00000018
#define SOCLIB_TRANSCEIVER_DATA_RATE_MASK            0x00000000

/** This register contains radio frequency of the transceiver in Hz. Used with
   start config bit @multiple */
#define SOCLIB_TRANSCEIVER_FREQUENCY_ADDR            0x0000001c
#define SOCLIB_TRANSCEIVER_FREQUENCY_MASK            0x00000000

/** This register contains the reception bandwith of the transceiver in Hz. Used
   with start Used with start config bit. @multiple */
#define SOCLIB_TRANSCEIVER_BANDWITH_ADDR             0x00000020
#define SOCLIB_TRANSCEIVER_BANDWITH_MASK             0x00000000

/** This register is modulation specific. Used with start config bit. @multiple
   */
#define SOCLIB_TRANSCEIVER_RF_MOD0_ADDR              0x00000024
#define SOCLIB_TRANSCEIVER_RF_MOD0_MASK              0x00000000

/** This register is modulation specific. Used with start config bit. @multiple
   */
#define SOCLIB_TRANSCEIVER_RF_MOD1_ADDR              0x00000028
#define SOCLIB_TRANSCEIVER_RF_MOD1_MASK              0x00000000

/** This register is modulation specific. Used with start config bit. @multiple
   */
#define SOCLIB_TRANSCEIVER_RF_MOD2_ADDR              0x0000002c
#define SOCLIB_TRANSCEIVER_RF_MOD2_MASK              0x00000000

/** This register is modulation specific. Used with start config bit. @multiple
   */
#define SOCLIB_TRANSCEIVER_RF_MOD3_ADDR              0x00000030
#define SOCLIB_TRANSCEIVER_RF_MOD3_MASK              0x00000000

/** This register contains a signed value in 0.125 dBm unit. On read operation,
   this register contains the last RSSI value sampled. This value is updated
   after CCA and RX operations. On write operation this register defines the RSSI
   threshold. @multiple */
#define SOCLIB_TRANSCEIVER_RSSI_ADDR                 0x00000034
#define SOCLIB_TRANSCEIVER_RSSI_MASK                 0x00000000

/** This register contains a signed value in 0.125 dBm unit. This register
   contains the RSSI value associated to tehe last packet received. @multiple */
#define SOCLIB_TRANSCEIVER_CARRIER_ADDR              0x00000038
#define SOCLIB_TRANSCEIVER_CARRIER_MASK              0x00000000

/** This register contains a signed value in 0.125 dBm unit. This register
   contains the last SNR value sampled. @multiple */
#define SOCLIB_TRANSCEIVER_SNR_ADDR                  0x0000003c
#define SOCLIB_TRANSCEIVER_SNR_MASK                  0x00000000

/** This register contains a signed value in 0.125 dBm unit. The transceiver
   monitor the RSSI on read operation and will raise a RSSI interrupt if RSSI
   level is greater than this value. @multiple */
#define SOCLIB_TRANSCEIVER_RSSI_JAM_ADDR             0x00000040
#define SOCLIB_TRANSCEIVER_RSSI_JAM_MASK             0x00000000

/** This timeout is mandatory for TX/RX operations, this is the timeout for each
   of theses states. @multiple */
#define SOCLIB_TRANSCEIVER_TIMEOUT_ADDR              0x00000044
#define SOCLIB_TRANSCEIVER_TIMEOUT_MASK              0x00000000

/** This deadline is the start date of the next TX/RX operation. @multiple */
#define SOCLIB_TRANSCEIVER_DEADLINE_MSB_ADDR         0x00000048
#define SOCLIB_TRANSCEIVER_DEADLINE_MSB_MASK         0x00000000

/** This deadline is the start date of the next TX/RX operation. @multiple */
#define SOCLIB_TRANSCEIVER_DEADLINE_LSB_ADDR         0x0000004c
#define SOCLIB_TRANSCEIVER_DEADLINE_LSB_MASK         0x00000000

/** This is the timestamp of the receive/sent packet. When reading this register
   the internal 64-bits counter is latched. This register is used to access 32
   msb of the latched value. @multiple */
#define SOCLIB_TRANSCEIVER_TIMESTAMP_MSB_ADDR        0x00000050
#define SOCLIB_TRANSCEIVER_TIMESTAMP_MSB_MASK        0x00000000

/** This register is used to access 32 lsb of the latched value. @multiple */
#define SOCLIB_TRANSCEIVER_TIMESTAMP_LSB_ADDR        0x00000054
#define SOCLIB_TRANSCEIVER_TIMESTAMP_LSB_MASK        0x00000000

/** This register contains clock period in ns of the transceiver. This is used
   for transceiver internal timer. @multiple */
#define SOCLIB_TRANSCEIVER_PERIOD_ADDR               0x00000058
#define SOCLIB_TRANSCEIVER_PERIOD_MASK               0x00000000

/** This register contains a signed value in 0.125 dBm unit. This register
   defines the power used on TX. @multiple */
#define SOCLIB_TRANSCEIVER_PWR_ADDR                  0x0000005c
#define SOCLIB_TRANSCEIVER_PWR_MASK                  0x00000000

#define SOCLIB_TRANSCEIVER_FIFO_STATE_ADDR           0x00000060
#define SOCLIB_TRANSCEIVER_FIFO_STATE_MASK           0xffffffff
/** Number of busy spaces in RX fifo. @multiple */
  #define SOCLIB_TRANSCEIVER_FIFO_STATE_RX(v)      ((v) << 0)
  #define SOCLIB_TRANSCEIVER_FIFO_STATE_RX_SET(x, v) do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define SOCLIB_TRANSCEIVER_FIFO_STATE_RX_GET(x)  (((x) >> 0) & 0xffff)
/** Number of free spaces in TX fifo. @multiple */
  #define SOCLIB_TRANSCEIVER_FIFO_STATE_TX(v)      ((v) << 16)
  #define SOCLIB_TRANSCEIVER_FIFO_STATE_TX_SET(x, v) do { (x) = (((x) & ~0xffff0000) | ((v) << 16)); } while(0)
  #define SOCLIB_TRANSCEIVER_FIFO_STATE_TX_GET(x)  (((x) >> 16) & 0xffff)

#define SOCLIB_TRANSCEIVER_IEN_ADDR                  0x00000064
#define SOCLIB_TRANSCEIVER_IEN_MASK                  0x000007ff
/** TX packet sent. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_TX_DONE           0x00000001
/** RX packet received. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_RX_DONE           0x00000002
/** TX timeout. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_TX_TIMEOUT        0x00000004
/** RX timeout. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_RX_TIMEOUT        0x00000008
/** Cancel done interrupt. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_CANCEL            0x00000010
/** TX CCA fails. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_TX_CCA            0x00000020
/** CRC error on RX packet. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_RX_CRC            0x00000040
/** Jamming detection interrupt. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_JAMMING           0x00000080
/** TX underflow. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_TX_UDF            0x00000100
/** RX overflow. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_RX_OVF            0x00000200
/** Timer deadline has been reached. @multiple */
  #define SOCLIB_TRANSCEIVER_IEN_TIMER             0x00000400

#define SOCLIB_TRANSCEIVER_IRQ_STATUS_ADDR           0x00000068
#define SOCLIB_TRANSCEIVER_IRQ_STATUS_MASK           0x000007ff
/** TX packet sent. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_TX_DONE    0x00000001
/** RX packet received. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_RX_DONE    0x00000002
/** TX timeout. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_TX_TIMEOUT 0x00000004
/** RX timeout. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_RX_TIMEOUT 0x00000008
/** Cancel done interrupt. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_CANCEL     0x00000010
/** TX CCA fails. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_TX_CCA     0x00000020
/** CRC error on RX packet. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_RX_CRC     0x00000040
/** Jamming detection interrupt. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_JAMMING    0x00000080
/** TX underflow. TX FIFO is flushed without any action of software. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_TX_UDF     0x00000100
/** RX overflow. RX FIFO is flushed without any action of software. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_RX_OVF     0x00000200
/** Timer deadline has been reached. @multiple */
  #define SOCLIB_TRANSCEIVER_IRQ_STATUS_TIMER      0x00000400

/** When reading this register the internal 64-bits counter is latched. This
   register is used to access 32 msb of the latched value. @multiple */
#define SOCLIB_TRANSCEIVER_TIMER_CNT_MSB_ADDR        0x0000006c
#define SOCLIB_TRANSCEIVER_TIMER_CNT_MSB_MASK        0x00000000

/** This register is used to access 32 lsb of the latched value. @multiple */
#define SOCLIB_TRANSCEIVER_TIMER_CNT_LSB_ADDR        0x00000070
#define SOCLIB_TRANSCEIVER_TIMER_CNT_LSB_MASK        0x00000000

/** This register is used to set the 32 MSB bits of the timer deadline. Timer
   deadline doc: is taken into account only when 32 LSB bits are written
   @multiple */
#define SOCLIB_TRANSCEIVER_TIMER_DEADLINE_MSB_ADDR   0x00000074
#define SOCLIB_TRANSCEIVER_TIMER_DEADLINE_MSB_MASK   0x00000000

/** This register is used to set the 32 LSB bits of the timer deadline. @multiple
   */
#define SOCLIB_TRANSCEIVER_TIMER_DEADLINE_LSB_ADDR   0x00000078
#define SOCLIB_TRANSCEIVER_TIMER_DEADLINE_LSB_MASK   0x00000000

#define SOCLIB_TRANSCEIVER_NAME_ADDR                 0x0000007c
#define SOCLIB_TRANSCEIVER_NAME_MASK                 0x00000000

#endif

