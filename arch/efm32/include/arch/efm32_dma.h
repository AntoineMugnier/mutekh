/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs                                                              \
     -O /home/cerdan/Work/mutekh/arch/efm32/include/arch/efm32_dma.h           \
     -I /opt/bfgen/defs/efm32/efm32_dma.bf cdefs_use_reg_mask=1                \
     cdefs_use_setter_value_prefix=0
*/

#ifndef _EFM32_DMA_BFGEN_DEFS_
#define _EFM32_DMA_BFGEN_DEFS_

#define EFM32_DMA_IF_ADDR                            0x00001000
#define EFM32_DMA_IF_MASK                            0xffffffff
/** Set when the DMA channel has completed its transfer. If the channel is
   disabled, the flag is set when there is a request for the channel. @multiple
   */
  #define EFM32_DMA_IF_DONE_COUNT                  32
  #define EFM32_DMA_IF_DONE(fidx)                  (0x00000001 << ((fidx)))
/** This flag is set when an error has occurred on the AHB bus. @multiple */
  #define EFM32_DMA_IF_ERR                         0x80000000

#define EFM32_DMA_IFS_ADDR                           0x00001004
#define EFM32_DMA_IFS_MASK                           0xffffffff
/** Write to 1 to set the corresponding DMA channel complete interrupt flag.
   @multiple */
  #define EFM32_DMA_IFS_DONE_COUNT                 32
  #define EFM32_DMA_IFS_DONE(fidx)                 (0x00000001 << ((fidx)))
/** Set to 1 to set DMA error interrupt flag. @multiple */
  #define EFM32_DMA_IFS_ERR                        0x80000000

#define EFM32_DMA_IFC_ADDR                           0x00001008
#define EFM32_DMA_IFC_MASK                           0xffffffff
/** Write to 1 to clear the corresponding DMA channel complete interrupt flag.
   @multiple */
  #define EFM32_DMA_IFC_DONE_COUNT                 32
  #define EFM32_DMA_IFC_DONE(fidx)                 (0x00000001 << ((fidx)))
/** Set to 1 to clear DMA error interrupt flag. Note that if an error happened,
   the Bus Error Clear Register must be used to clear the DMA. @multiple */
  #define EFM32_DMA_IFC_ERR                        0x80000000

#define EFM32_DMA_IEN_ADDR                           0x0000100c
#define EFM32_DMA_IEN_MASK                           0xffffffff
/** Write to 1 to enable complete interrupt on this DMA channel. Clear to disable
   the interrupt. @multiple */
  #define EFM32_DMA_IEN_DONE_COUNT                 32
  #define EFM32_DMA_IEN_DONE(fidx)                 (0x00000001 << ((fidx)))
/** Set this bit to enable interrupt on AHB bus error. @multiple */
  #define EFM32_DMA_IEN_ERR                        0x80000000

#define EFM32_DMA_CTRL_ADDR                          0x00001010
#define EFM32_DMA_CTRL_MASK                          0x00000003
/** Word 4 in dma descriptor specifies WIDTH, HEIGHT and SRCSTRIDE for rectangle
   copies. WIDTH is given by bits 9:0, HEIGHT is given by bits 19:10, and
   SRCSTRIDE is given by bits 30:20 @multiple */
  #define EFM32_DMA_CTRL_DESCRECT                  0x00000001
/** Allows the reuse of a rect descriptor. When active CH0 and no others can have
   RDS set @multiple */
  #define EFM32_DMA_CTRL_PRDU                      0x00000002

#define EFM32_DMA_RDS_ADDR                           0x00001014
#define EFM32_DMA_RDS_MASK                           0xffffffff
/** Speed up execution of consequtive DMA requests from the same channel by not
   reading descriptor at the start of every arbitration cycle if the next channel
   is the same as the previous @multiple */
  #define EFM32_DMA_RDS_RDSCH_COUNT                32
  #define EFM32_DMA_RDS_RDSCH(fidx)                (0x00000001 << ((fidx)))

#define EFM32_DMA_LOOP0_ADDR                         0x00001020
#define EFM32_DMA_LOOP0_MASK                         0x000103ff
/** Reload value for N_MINUS_1 when loop is enabled @multiple */
  #define EFM32_DMA_LOOP0_WIDTH(v)                 ((v) << 0)
  #define EFM32_DMA_LOOP0_WIDTH_SET(x, v)          do { (x) = (((x) & ~0x3ff) | ((v) << 0)); } while(0)
  #define EFM32_DMA_LOOP0_WIDTH_GET(x)             (((x) >> 0) & 0x3ff)
/** Reload value for N_MINUS_1 when loop is enabled @multiple */
  #define EFM32_DMA_LOOP0_EN                       0x00010000

#define EFM32_DMA_LOOP1_ADDR                         0x00001024
#define EFM32_DMA_LOOP1_MASK                         0x000103ff
/** Reload value for N_MINUS_1 when loop is enabled @multiple */
  #define EFM32_DMA_LOOP1_WIDTH(v)                 ((v) << 0)
  #define EFM32_DMA_LOOP1_WIDTH_SET(x, v)          do { (x) = (((x) & ~0x3ff) | ((v) << 0)); } while(0)
  #define EFM32_DMA_LOOP1_WIDTH_GET(x)             (((x) >> 0) & 0x3ff)
/** Reload value for N_MINUS_1 when loop is enabled @multiple */
  #define EFM32_DMA_LOOP1_EN                       0x00010000

#define EFM32_DMA_RECT0_ADDR                         0x00001060
#define EFM32_DMA_RECT0_MASK                         0xffffffff
/** Number of lines when doing rectangle copy. Set to the number of lines - 1.
   @multiple */
  #define EFM32_DMA_RECT0_HEIGHT(v)                ((v) << 0)
  #define EFM32_DMA_RECT0_HEIGHT_SET(x, v)         do { (x) = (((x) & ~0x3ff) | ((v) << 0)); } while(0)
  #define EFM32_DMA_RECT0_HEIGHT_GET(x)            (((x) >> 0) & 0x3ff)
/** Space between start of lines in source rectangle @multiple */
  #define EFM32_DMA_RECT0_SRCSTRIDE(v)             ((v) << 10)
  #define EFM32_DMA_RECT0_SRCSTRIDE_SET(x, v)      do { (x) = (((x) & ~0x1ffc00) | ((v) << 10)); } while(0)
  #define EFM32_DMA_RECT0_SRCSTRIDE_GET(x)         (((x) >> 10) & 0x7ff)
/** Space between start of lines in destination rectangle @multiple */
  #define EFM32_DMA_RECT0_DSTSTRIDE(v)             ((v) << 21)
  #define EFM32_DMA_RECT0_DSTSTRIDE_SET(x, v)      do { (x) = (((x) & ~0xffe00000) | ((v) << 21)); } while(0)
  #define EFM32_DMA_RECT0_DSTSTRIDE_GET(x)         (((x) >> 21) & 0x7ff)

#define EFM32_DMA_CH_CTRL_ADDR(ridx)                 (0x00001100 + (ridx) * 4)
#define EFM32_DMA_CH_CTRL_COUNT                      32
#define EFM32_DMA_CH_CTRL_MASK                       0x003f000f
/** Select input signal to DMA channel. @multiple */
  #define EFM32_DMA_CH_CTRL_SIGSEL(v)              ((v) << 0)
  #define EFM32_DMA_CH_CTRL_SIGSEL_SET(x, v)       do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_DMA_CH_CTRL_SIGSEL_GET(x)          (((x) >> 0) & 0xf)
/** Select input source to DMA channel. @multiple */
  #define EFM32_DMA_CH_CTRL_SOURCESEL(v)           ((v) << 16)
  #define EFM32_DMA_CH_CTRL_SOURCESEL_SET(x, v)    do { (x) = (((x) & ~0x3f0000) | ((v) << 16)); } while(0)
  #define EFM32_DMA_CH_CTRL_SOURCESEL_GET(x)       (((x) >> 16) & 0x3f)

#endif

