/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1                \
     -i timer0.bf                \
     -O timer.h
*/

#ifndef _EFM32_TIMER_BFGEN_DEFS_
#define _EFM32_TIMER_BFGEN_DEFS_

#define EFM32_TIMER_CTRL_ADDR                        0x00000000
#define EFM32_TIMER_CTRL_MASK                        0x3f032ffb
  #define EFM32_TIMER_CTRL_MODE(v)                 ((EFM32_TIMER_CTRL_MODE_##v) << 0)
  #define EFM32_TIMER_CTRL_MODE_SET(x, v)          do { (x) = (((x) & ~0x3) | ((EFM32_TIMER_CTRL_MODE_##v) << 0)); } while(0)
  #define EFM32_TIMER_CTRL_MODE_SETVAL(x, v)       do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_CTRL_MODE_GET(x)             (((x) >> 0) & 0x3)
/**  */
    #define EFM32_TIMER_CTRL_MODE_UP                 0x00000000
/**  */
    #define EFM32_TIMER_CTRL_MODE_DOWN               0x00000001
/**  */
    #define EFM32_TIMER_CTRL_MODE_UPDOWN             0x00000002
/**  */
    #define EFM32_TIMER_CTRL_MODE_QDEC               0x00000003
  #define EFM32_TIMER_CTRL_SYNC                    0x00000008
  #define EFM32_TIMER_CTRL_OSMEN                   0x00000010
  #define EFM32_TIMER_CTRL_QDM                     0x00000020
  #define EFM32_TIMER_CTRL_DEBUGRUN                0x00000040
  #define EFM32_TIMER_CTRL_DMACLRACT               0x00000080
  #define EFM32_TIMER_CTRL_RISEA(v)                ((EFM32_TIMER_CTRL_RISEA_##v) << 8)
  #define EFM32_TIMER_CTRL_RISEA_SET(x, v)         do { (x) = (((x) & ~0x300) | ((EFM32_TIMER_CTRL_RISEA_##v) << 8)); } while(0)
  #define EFM32_TIMER_CTRL_RISEA_SETVAL(x, v)      do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define EFM32_TIMER_CTRL_RISEA_GET(x)            (((x) >> 8) & 0x3)
/**  */
    #define EFM32_TIMER_CTRL_RISEA_NONE              0x00000000
/**  */
    #define EFM32_TIMER_CTRL_RISEA_START             0x00000001
/**  */
    #define EFM32_TIMER_CTRL_RISEA_STOP              0x00000002
/**  */
    #define EFM32_TIMER_CTRL_RISEA_RELOADSTART       0x00000003
  #define EFM32_TIMER_CTRL_FALLA(v)                ((EFM32_TIMER_CTRL_FALLA_##v) << 10)
  #define EFM32_TIMER_CTRL_FALLA_SET(x, v)         do { (x) = (((x) & ~0xc00) | ((EFM32_TIMER_CTRL_FALLA_##v) << 10)); } while(0)
  #define EFM32_TIMER_CTRL_FALLA_SETVAL(x, v)      do { (x) = (((x) & ~0xc00) | ((v) << 10)); } while(0)
  #define EFM32_TIMER_CTRL_FALLA_GET(x)            (((x) >> 10) & 0x3)
/**  */
    #define EFM32_TIMER_CTRL_FALLA_NONE              0x00000000
/**  */
    #define EFM32_TIMER_CTRL_FALLA_START             0x00000001
/**  */
    #define EFM32_TIMER_CTRL_FALLA_STOP              0x00000002
/**  */
    #define EFM32_TIMER_CTRL_FALLA_RELOADSTART       0x00000003
  #define EFM32_TIMER_CTRL_X2CNT                   0x00002000
  #define EFM32_TIMER_CTRL_CLKSEL(v)               ((EFM32_TIMER_CTRL_CLKSEL_##v) << 16)
  #define EFM32_TIMER_CTRL_CLKSEL_SET(x, v)        do { (x) = (((x) & ~0x30000) | ((EFM32_TIMER_CTRL_CLKSEL_##v) << 16)); } while(0)
  #define EFM32_TIMER_CTRL_CLKSEL_SETVAL(x, v)     do { (x) = (((x) & ~0x30000) | ((v) << 16)); } while(0)
  #define EFM32_TIMER_CTRL_CLKSEL_GET(x)           (((x) >> 16) & 0x3)
/**  */
    #define EFM32_TIMER_CTRL_CLKSEL_PRESCHFPERCLK    0x00000000
/**  */
    #define EFM32_TIMER_CTRL_CLKSEL_CC1              0x00000001
/**  */
    #define EFM32_TIMER_CTRL_CLKSEL_TIMEROUF         0x00000002
  #define EFM32_TIMER_CTRL_PRESC(v)                ((EFM32_TIMER_CTRL_PRESC_##v) << 24)
  #define EFM32_TIMER_CTRL_PRESC_SET(x, v)         do { (x) = (((x) & ~0xf000000) | ((EFM32_TIMER_CTRL_PRESC_##v) << 24)); } while(0)
  #define EFM32_TIMER_CTRL_PRESC_SETVAL(x, v)      do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define EFM32_TIMER_CTRL_PRESC_GET(x)            (((x) >> 24) & 0xf)
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV1              0x00000000
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV2              0x00000001
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV4              0x00000002
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV8              0x00000003
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV16             0x00000004
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV32             0x00000005
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV64             0x00000006
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV128            0x00000007
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV256            0x00000008
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV512            0x00000009
/**  */
    #define EFM32_TIMER_CTRL_PRESC_DIV1024           0x0000000a
  #define EFM32_TIMER_CTRL_ATI                     0x10000000
  #define EFM32_TIMER_CTRL_RSSCOIST                0x20000000

#define EFM32_TIMER_CMD_ADDR                         0x00000004
#define EFM32_TIMER_CMD_MASK                         0x00000003
  #define EFM32_TIMER_CMD_START                    0x00000001
  #define EFM32_TIMER_CMD_STOP                     0x00000002

#define EFM32_TIMER_STATUS_ADDR                      0x00000008
#define EFM32_TIMER_STATUS_MASK                      0x0f0f0f07
  #define EFM32_TIMER_STATUS_RUNNING               0x00000001
  #define EFM32_TIMER_STATUS_DIR                   0x00000002
  #define EFM32_TIMER_STATUS_TOPBV                 0x00000004
/** This field indicates that the TIMERn_CCn_CCVB registers contain data which
   have not been written to TIMERn_CCn_CCV. These bits are only used in output
   compare/pwm mode and are cleared when CCMODE is written to 0b00 (Off).
   @multiple */
  #define EFM32_TIMER_STATUS_CCVBV_COUNT           4
  #define EFM32_TIMER_STATUS_CCVBV(fidx, v)        ((EFM32_TIMER_STATUS_CCVBV_##v) << ((fidx) + 8))
  #define EFM32_TIMER_STATUS_CCVBV_SET(fidx, x, v) do { (x) = (((x) & ~(0x100 << ((fidx)))) | ((EFM32_TIMER_STATUS_CCVBV_##v) << ((fidx) + 8))); } while(0)
  #define EFM32_TIMER_STATUS_CCVBV_SETVAL(fidx, x, v) do { (x) = (((x) & ~(0x100 << ((fidx)))) | ((v) << ((fidx) + 8))); } while(0)
  #define EFM32_TIMER_STATUS_CCVBV_GET(fidx, x)    (((x) >> ((fidx) + 8)) & 0x1)
  #define EFM32_TIMER_STATUS_CCVBV_INVALID         0x00000000
  #define EFM32_TIMER_STATUS_CCVBV_VALID           0x00000001
/** This bit indicates that TIMERn_CCn_CCV contains a valid capture value. These
   bits are only used in input capture mode and are cleared when CCMODE is
   written to 0b00 (Off). @multiple */
  #define EFM32_TIMER_STATUS_ICV_COUNT             4
  #define EFM32_TIMER_STATUS_ICV(fidx, v)          ((EFM32_TIMER_STATUS_ICV_##v) << ((fidx) + 16))
  #define EFM32_TIMER_STATUS_ICV_SET(fidx, x, v)   do { (x) = (((x) & ~(0x10000 << ((fidx)))) | ((EFM32_TIMER_STATUS_ICV_##v) << ((fidx) + 16))); } while(0)
  #define EFM32_TIMER_STATUS_ICV_SETVAL(fidx, x, v) do { (x) = (((x) & ~(0x10000 << ((fidx)))) | ((v) << ((fidx) + 16))); } while(0)
  #define EFM32_TIMER_STATUS_ICV_GET(fidx, x)      (((x) >> ((fidx) + 16)) & 0x1)
  #define EFM32_TIMER_STATUS_ICV_INVALID           0x00000000
  #define EFM32_TIMER_STATUS_ICV_VALID             0x00000001
/** In Input Capture mode, this bit indicates the polarity of the edge that
   triggered capture in TIMERn_CCn_CCV. In Compare/PWM mode, this bit indicates
   the polarity of the selected input to CC channel n. These bits are cleared
   when CCMODE is written to 0b00 (Off). @multiple */
  #define EFM32_TIMER_STATUS_CCPOL_COUNT           4
  #define EFM32_TIMER_STATUS_CCPOL(fidx, v)        ((EFM32_TIMER_STATUS_CCPOL_##v) << ((fidx) + 24))
  #define EFM32_TIMER_STATUS_CCPOL_SET(fidx, x, v) do { (x) = (((x) & ~(0x1000000 << ((fidx)))) | ((EFM32_TIMER_STATUS_CCPOL_##v) << ((fidx) + 24))); } while(0)
  #define EFM32_TIMER_STATUS_CCPOL_SETVAL(fidx, x, v) do { (x) = (((x) & ~(0x1000000 << ((fidx)))) | ((v) << ((fidx) + 24))); } while(0)
  #define EFM32_TIMER_STATUS_CCPOL_GET(fidx, x)    (((x) >> ((fidx) + 24)) & 0x1)
  #define EFM32_TIMER_STATUS_CCPOL_INVALID         0x00000000
  #define EFM32_TIMER_STATUS_CCPOL_VALID           0x00000001

#define EFM32_TIMER_IF_ADDR                          0x0000000c
#define EFM32_TIMER_IF_MASK                          0x00000ff7
  #define EFM32_TIMER_IF_OF                        0x00000001
  #define EFM32_TIMER_IF_UF                        0x00000002
  #define EFM32_TIMER_IF_DIRCHG                    0x00000004
/** Enable/disable Compare/Capture ch n interrupt. @multiple */
  #define EFM32_TIMER_IF_CC_COUNT                  4
  #define EFM32_TIMER_IF_CC(fidx)                  (0x00000010 << ((fidx)))
/** Enable/disable Compare/Capture ch n input capture buffer overflow interrupt.
   @multiple */
  #define EFM32_TIMER_IF_ICBOF_COUNT               4
  #define EFM32_TIMER_IF_ICBOF(fidx)               (0x00000100 << ((fidx)))

#define EFM32_TIMER_IFS_ADDR                         0x00000010
#define EFM32_TIMER_IFS_MASK                         0x00000ff7
  #define EFM32_TIMER_IFS_OF                       0x00000001
  #define EFM32_TIMER_IFS_UF                       0x00000002
  #define EFM32_TIMER_IFS_DIRCHG                   0x00000004
/** Writing a 1 to this bit will set Compare/Capture channel n interrupt flag.
   @multiple */
  #define EFM32_TIMER_IFS_CC_COUNT                 4
  #define EFM32_TIMER_IFS_CC(fidx)                 (0x00000010 << ((fidx)))
/** Writing a 1 to this bit will set Compare/Capture channel n input capture
   buffer overflow interrupt flag. @multiple */
  #define EFM32_TIMER_IFS_ICBOF_COUNT              4
  #define EFM32_TIMER_IFS_ICBOF(fidx)              (0x00000100 << ((fidx)))

#define EFM32_TIMER_IFC_ADDR                         0x00000014
#define EFM32_TIMER_IFC_MASK                         0x00000ff7
  #define EFM32_TIMER_IFC_OF                       0x00000001
  #define EFM32_TIMER_IFC_UF                       0x00000002
  #define EFM32_TIMER_IFC_DIRCHG                   0x00000004
/** Writing a 1 to this bit will clear Compare/Capture channel n interrupt flag.
   @multiple */
  #define EFM32_TIMER_IFC_CC_COUNT                 4
  #define EFM32_TIMER_IFC_CC(fidx)                 (0x00000010 << ((fidx)))
/** Writing a 1 to this bit will clear Compare/Capture channel n input capture
   buffer overflow interrupt flag. @multiple */
  #define EFM32_TIMER_IFC_ICBOF_COUNT              4
  #define EFM32_TIMER_IFC_ICBOF(fidx)              (0x00000100 << ((fidx)))

#define EFM32_TIMER_IEN_ADDR                         0x00000018
#define EFM32_TIMER_IEN_MASK                         0x00000ff7
  #define EFM32_TIMER_IEN_OF                       0x00000001
  #define EFM32_TIMER_IEN_UF                       0x00000002
  #define EFM32_TIMER_IEN_DIRCHG                   0x00000004
/** Enable/disable Compare/Capture ch n interrupt. @multiple */
  #define EFM32_TIMER_IEN_CC_COUNT                 4
  #define EFM32_TIMER_IEN_CC(fidx)                 (0x00000010 << ((fidx)))
/** Enable/disable Compare/Capture ch n input capture buffer overflow interrupt.
   @multiple */
  #define EFM32_TIMER_IEN_ICBOF_COUNT              4
  #define EFM32_TIMER_IEN_ICBOF(fidx)              (0x00000100 << ((fidx)))

#define EFM32_TIMER_TOP_ADDR                         0x0000001c
#define EFM32_TIMER_TOP_MASK                         0x0000ffff
  #define EFM32_TIMER_TOP_TOP(v)                   ((v) << 0)
  #define EFM32_TIMER_TOP_TOP_SET(x, v)            do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_TOP_TOP_GET(x)               (((x) >> 0) & 0xffff)

#define EFM32_TIMER_TOPB_ADDR                        0x00000020
#define EFM32_TIMER_TOPB_MASK                        0x0000ffff
  #define EFM32_TIMER_TOPB_TOPB(v)                 ((v) << 0)
  #define EFM32_TIMER_TOPB_TOPB_SET(x, v)          do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_TOPB_TOPB_GET(x)             (((x) >> 0) & 0xffff)

#define EFM32_TIMER_CNT_ADDR                         0x00000024
#define EFM32_TIMER_CNT_MASK                         0x0000ffff
  #define EFM32_TIMER_CNT_CNT(v)                   ((v) << 0)
  #define EFM32_TIMER_CNT_CNT_SET(x, v)            do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_CNT_CNT_GET(x)               (((x) >> 0) & 0xffff)

#define EFM32_TIMER_LOCK_ADDR                        0x0000002c
#define EFM32_TIMER_LOCK_MASK                        0x0000ffff
  #define EFM32_TIMER_LOCK_TIMERLOCKKEY(v)         ((EFM32_TIMER_LOCK_TIMERLOCKKEY_##v) << 0)
  #define EFM32_TIMER_LOCK_TIMERLOCKKEY_SET(x, v)  do { (x) = (((x) & ~0xffff) | ((EFM32_TIMER_LOCK_TIMERLOCKKEY_##v) << 0)); } while(0)
  #define EFM32_TIMER_LOCK_TIMERLOCKKEY_SETVAL(x, v) do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_LOCK_TIMERLOCKKEY_GET(x)     (((x) >> 0) & 0xffff)
/**  */
    #define EFM32_TIMER_LOCK_TIMERLOCKKEY_UNLOCKED   0x00000000
/**  */
    #define EFM32_TIMER_LOCK_TIMERLOCKKEY_LOCKED     0x00000001

#define EFM32_TIMER_ROUTEPEN_ADDR                    0x00000030
#define EFM32_TIMER_ROUTEPEN_MASK                    0x0000070f
/** Enable/disable CC Channel n output/input connection to pin. @multiple */
  #define EFM32_TIMER_ROUTEPEN_CCPEN_COUNT         4
  #define EFM32_TIMER_ROUTEPEN_CCPEN(fidx)         (0x00000001 << ((fidx)))
  #define EFM32_TIMER_ROUTEPEN_CDTIPEN_COUNT       3
  #define EFM32_TIMER_ROUTEPEN_CDTIPEN(fidx)       (0x00000100 << ((fidx)))

#define EFM32_TIMER_ROUTELOC0_ADDR                   0x00000034
#define EFM32_TIMER_ROUTELOC0_MASK                   0x3f3f3f3f
  #define EFM32_TIMER_ROUTELOC0_CCLOC_COUNT        4
  #define EFM32_TIMER_ROUTELOC0_CCLOC(fidx, v)     ((v) << ((fidx) * 8 + 0))
  #define EFM32_TIMER_ROUTELOC0_CCLOC_SET(fidx, x, v) do { (x) = (((x) & ~(0x3f << ((fidx) * 8))) | ((v) << ((fidx) * 8 + 0))); } while(0)
  #define EFM32_TIMER_ROUTELOC0_CCLOC_GET(fidx, x) (((x) >> ((fidx) * 8 + 0)) & 0x3f)

#define EFM32_TIMER_ROUTELOC2_ADDR                   0x0000003c
#define EFM32_TIMER_ROUTELOC2_MASK                   0x003f3f3f
  #define EFM32_TIMER_ROUTELOC2_CDTILOC_COUNT      3
  #define EFM32_TIMER_ROUTELOC2_CDTILOC(fidx, v)   ((v) << ((fidx) * 8 + 0))
  #define EFM32_TIMER_ROUTELOC2_CDTILOC_SET(fidx, x, v) do { (x) = (((x) & ~(0x3f << ((fidx) * 8))) | ((v) << ((fidx) * 8 + 0))); } while(0)
  #define EFM32_TIMER_ROUTELOC2_CDTILOC_GET(fidx, x) (((x) >> ((fidx) * 8 + 0)) & 0x3f)

#define EFM32_TIMER_CC_CTRL_ADDR(ridx)               (0x00000060 + (ridx) * 16)
#define EFM32_TIMER_CC_CTRL_COUNT                    4
#define EFM32_TIMER_CC_CTRL_MASK                     0x7f0f3f17
  #define EFM32_TIMER_CC_CTRL_MODE(v)              ((EFM32_TIMER_CC_CTRL_MODE_##v) << 0)
  #define EFM32_TIMER_CC_CTRL_MODE_SET(x, v)       do { (x) = (((x) & ~0x3) | ((EFM32_TIMER_CC_CTRL_MODE_##v) << 0)); } while(0)
  #define EFM32_TIMER_CC_CTRL_MODE_SETVAL(x, v)    do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_CC_CTRL_MODE_GET(x)          (((x) >> 0) & 0x3)
/**  */
    #define EFM32_TIMER_CC_CTRL_MODE_OFF             0x00000000
/**  */
    #define EFM32_TIMER_CC_CTRL_MODE_INPUTCAPTURE    0x00000001
/**  */
    #define EFM32_TIMER_CC_CTRL_MODE_OUTPUTCOMPARE   0x00000002
/**  */
    #define EFM32_TIMER_CC_CTRL_MODE_PWM             0x00000003
  #define EFM32_TIMER_CC_CTRL_OUTINV               0x00000004
  #define EFM32_TIMER_CC_CTRL_COIST                0x00000010
  #define EFM32_TIMER_CC_CTRL_CMOA(v)              ((EFM32_TIMER_CC_CTRL_CMOA_##v) << 8)
  #define EFM32_TIMER_CC_CTRL_CMOA_SET(x, v)       do { (x) = (((x) & ~0x300) | ((EFM32_TIMER_CC_CTRL_CMOA_##v) << 8)); } while(0)
  #define EFM32_TIMER_CC_CTRL_CMOA_SETVAL(x, v)    do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define EFM32_TIMER_CC_CTRL_CMOA_GET(x)          (((x) >> 8) & 0x3)
/**  */
    #define EFM32_TIMER_CC_CTRL_CMOA_NONE            0x00000000
/**  */
    #define EFM32_TIMER_CC_CTRL_CMOA_TOGGLE          0x00000001
/**  */
    #define EFM32_TIMER_CC_CTRL_CMOA_CLEAR           0x00000002
/**  */
    #define EFM32_TIMER_CC_CTRL_CMOA_UP              0x00000003
  #define EFM32_TIMER_CC_CTRL_COFOA(v)             ((EFM32_TIMER_CC_CTRL_COFOA_##v) << 10)
  #define EFM32_TIMER_CC_CTRL_COFOA_SET(x, v)      do { (x) = (((x) & ~0xc00) | ((EFM32_TIMER_CC_CTRL_COFOA_##v) << 10)); } while(0)
  #define EFM32_TIMER_CC_CTRL_COFOA_SETVAL(x, v)   do { (x) = (((x) & ~0xc00) | ((v) << 10)); } while(0)
  #define EFM32_TIMER_CC_CTRL_COFOA_GET(x)         (((x) >> 10) & 0x3)
/**  */
    #define EFM32_TIMER_CC_CTRL_COFOA_NONE           0x00000000
/**  */
    #define EFM32_TIMER_CC_CTRL_COFOA_TOGGLE         0x00000001
/**  */
    #define EFM32_TIMER_CC_CTRL_COFOA_CLEAR          0x00000002
/**  */
    #define EFM32_TIMER_CC_CTRL_COFOA_UP             0x00000003
  #define EFM32_TIMER_CC_CTRL_CUFOA(v)             ((EFM32_TIMER_CC_CTRL_CUFOA_##v) << 12)
  #define EFM32_TIMER_CC_CTRL_CUFOA_SET(x, v)      do { (x) = (((x) & ~0x3000) | ((EFM32_TIMER_CC_CTRL_CUFOA_##v) << 12)); } while(0)
  #define EFM32_TIMER_CC_CTRL_CUFOA_SETVAL(x, v)   do { (x) = (((x) & ~0x3000) | ((v) << 12)); } while(0)
  #define EFM32_TIMER_CC_CTRL_CUFOA_GET(x)         (((x) >> 12) & 0x3)
/**  */
    #define EFM32_TIMER_CC_CTRL_CUFOA_NONE           0x00000000
/**  */
    #define EFM32_TIMER_CC_CTRL_CUFOA_TOGGLE         0x00000001
/**  */
    #define EFM32_TIMER_CC_CTRL_CUFOA_CLEAR          0x00000002
/**  */
    #define EFM32_TIMER_CC_CTRL_CUFOA_UP             0x00000003
  #define EFM32_TIMER_CC_CTRL_PRSSEL(v)            ((EFM32_TIMER_CC_CTRL_PRSSEL_##v) << 16)
  #define EFM32_TIMER_CC_CTRL_PRSSEL_SET(x, v)     do { (x) = (((x) & ~0xf0000) | ((EFM32_TIMER_CC_CTRL_PRSSEL_##v) << 16)); } while(0)
  #define EFM32_TIMER_CC_CTRL_PRSSEL_SETVAL(x, v)  do { (x) = (((x) & ~0xf0000) | ((v) << 16)); } while(0)
  #define EFM32_TIMER_CC_CTRL_PRSSEL_GET(x)        (((x) >> 16) & 0xf)
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH0        0x00000000
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH1        0x00000001
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH2        0x00000002
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH3        0x00000003
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH4        0x00000004
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH5        0x00000005
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH6        0x00000006
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH7        0x00000007
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH8        0x00000008
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH9        0x00000009
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH10       0x0000000a
/**  */
    #define EFM32_TIMER_CC_CTRL_PRSSEL_PRSCH11       0x0000000b
  #define EFM32_TIMER_CC_CTRL_ICEDGE(v)            ((EFM32_TIMER_CC_CTRL_ICEDGE_##v) << 24)
  #define EFM32_TIMER_CC_CTRL_ICEDGE_SET(x, v)     do { (x) = (((x) & ~0x3000000) | ((EFM32_TIMER_CC_CTRL_ICEDGE_##v) << 24)); } while(0)
  #define EFM32_TIMER_CC_CTRL_ICEDGE_SETVAL(x, v)  do { (x) = (((x) & ~0x3000000) | ((v) << 24)); } while(0)
  #define EFM32_TIMER_CC_CTRL_ICEDGE_GET(x)        (((x) >> 24) & 0x3)
/**  */
    #define EFM32_TIMER_CC_CTRL_ICEDGE_RISING        0x00000000
/**  */
    #define EFM32_TIMER_CC_CTRL_ICEDGE_FALLING       0x00000001
/**  */
    #define EFM32_TIMER_CC_CTRL_ICEDGE_BOTH          0x00000002
/**  */
    #define EFM32_TIMER_CC_CTRL_ICEDGE_NONE          0x00000003
  #define EFM32_TIMER_CC_CTRL_ICEVCTRL(v)          ((EFM32_TIMER_CC_CTRL_ICEVCTRL_##v) << 26)
  #define EFM32_TIMER_CC_CTRL_ICEVCTRL_SET(x, v)   do { (x) = (((x) & ~0xc000000) | ((EFM32_TIMER_CC_CTRL_ICEVCTRL_##v) << 26)); } while(0)
  #define EFM32_TIMER_CC_CTRL_ICEVCTRL_SETVAL(x, v) do { (x) = (((x) & ~0xc000000) | ((v) << 26)); } while(0)
  #define EFM32_TIMER_CC_CTRL_ICEVCTRL_GET(x)      (((x) >> 26) & 0x3)
/**  */
    #define EFM32_TIMER_CC_CTRL_ICEVCTRL_EVERYEDGE   0x00000000
/**  */
    #define EFM32_TIMER_CC_CTRL_ICEVCTRL_EVERYSECONDEDGE 0x00000001
/**  */
    #define EFM32_TIMER_CC_CTRL_ICEVCTRL_RISING      0x00000002
/**  */
    #define EFM32_TIMER_CC_CTRL_ICEVCTRL_FALLING     0x00000003
  #define EFM32_TIMER_CC_CTRL_PRSCONF              0x10000000
  #define EFM32_TIMER_CC_CTRL_INSEL                0x20000000
  #define EFM32_TIMER_CC_CTRL_FILT                 0x40000000

#define EFM32_TIMER_CC_CCV_ADDR(ridx)                (0x00000064 + (ridx) * 16)
#define EFM32_TIMER_CC_CCV_COUNT                     4
#define EFM32_TIMER_CC_CCV_MASK                      0x0000ffff
  #define EFM32_TIMER_CC_CCV_CCV(v)                ((v) << 0)
  #define EFM32_TIMER_CC_CCV_CCV_SET(x, v)         do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_CC_CCV_CCV_GET(x)            (((x) >> 0) & 0xffff)

#define EFM32_TIMER_CC_CCVP_ADDR(ridx)               (0x00000068 + (ridx) * 16)
#define EFM32_TIMER_CC_CCVP_COUNT                    4
#define EFM32_TIMER_CC_CCVP_MASK                     0x0000ffff
  #define EFM32_TIMER_CC_CCVP_CCVP(v)              ((v) << 0)
  #define EFM32_TIMER_CC_CCVP_CCVP_SET(x, v)       do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_CC_CCVP_CCVP_GET(x)          (((x) >> 0) & 0xffff)

#define EFM32_TIMER_CC_CCVB_ADDR(ridx)               (0x0000006c + (ridx) * 16)
#define EFM32_TIMER_CC_CCVB_COUNT                    4
#define EFM32_TIMER_CC_CCVB_MASK                     0x0000ffff
  #define EFM32_TIMER_CC_CCVB_CCVB(v)              ((v) << 0)
  #define EFM32_TIMER_CC_CCVB_CCVB_SET(x, v)       do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_CC_CCVB_CCVB_GET(x)          (((x) >> 0) & 0xffff)

#define EFM32_TIMER_DTCTRL_ADDR                      0x000000a0
#define EFM32_TIMER_DTCTRL_MASK                      0x010006ff
  #define EFM32_TIMER_DTCTRL_DTEN                  0x00000001
  #define EFM32_TIMER_DTCTRL_DTDAS                 0x00000002
  #define EFM32_TIMER_DTCTRL_DTIPOL                0x00000004
  #define EFM32_TIMER_DTCTRL_DTCINV                0x00000008
  #define EFM32_TIMER_DTCTRL_DTPRSSEL(v)           ((EFM32_TIMER_DTCTRL_DTPRSSEL_##v) << 4)
  #define EFM32_TIMER_DTCTRL_DTPRSSEL_SET(x, v)    do { (x) = (((x) & ~0xf0) | ((EFM32_TIMER_DTCTRL_DTPRSSEL_##v) << 4)); } while(0)
  #define EFM32_TIMER_DTCTRL_DTPRSSEL_SETVAL(x, v) do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define EFM32_TIMER_DTCTRL_DTPRSSEL_GET(x)       (((x) >> 4) & 0xf)
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH0       0x00000000
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH1       0x00000001
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH2       0x00000002
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH3       0x00000003
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH4       0x00000004
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH5       0x00000005
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH6       0x00000006
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH7       0x00000007
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH8       0x00000008
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH9       0x00000009
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH10      0x0000000a
/**  */
    #define EFM32_TIMER_DTCTRL_DTPRSSEL_PRSCH11      0x0000000b
  #define EFM32_TIMER_DTCTRL_DTAR                  0x00000200
  #define EFM32_TIMER_DTCTRL_DTFATS                0x00000400
  #define EFM32_TIMER_DTCTRL_DTPRSEN               0x01000000

#define EFM32_TIMER_DTTIME_ADDR                      0x000000a4
#define EFM32_TIMER_DTTIME_MASK                      0x003f3f0f
  #define EFM32_TIMER_DTTIME_DTPRESC(v)            ((EFM32_TIMER_DTTIME_DTPRESC_##v) << 0)
  #define EFM32_TIMER_DTTIME_DTPRESC_SET(x, v)     do { (x) = (((x) & ~0xf) | ((EFM32_TIMER_DTTIME_DTPRESC_##v) << 0)); } while(0)
  #define EFM32_TIMER_DTTIME_DTPRESC_SETVAL(x, v)  do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_DTTIME_DTPRESC_GET(x)        (((x) >> 0) & 0xf)
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV1          0x00000000
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV2          0x00000001
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV4          0x00000002
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV8          0x00000003
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV16         0x00000004
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV32         0x00000005
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV64         0x00000006
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV128        0x00000007
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV256        0x00000008
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV512        0x00000009
/**  */
    #define EFM32_TIMER_DTTIME_DTPRESC_DIV1024       0x0000000a
  #define EFM32_TIMER_DTTIME_DTRISET(v)            ((v) << 8)
  #define EFM32_TIMER_DTTIME_DTRISET_SET(x, v)     do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define EFM32_TIMER_DTTIME_DTRISET_GET(x)        (((x) >> 8) & 0x3f)
  #define EFM32_TIMER_DTTIME_DTFALLT(v)            ((v) << 16)
  #define EFM32_TIMER_DTTIME_DTFALLT_SET(x, v)     do { (x) = (((x) & ~0x3f0000) | ((v) << 16)); } while(0)
  #define EFM32_TIMER_DTTIME_DTFALLT_GET(x)        (((x) >> 16) & 0x3f)

#define EFM32_TIMER_DTFC_ADDR                        0x000000a8
#define EFM32_TIMER_DTFC_MASK                        0x0f030f0f
  #define EFM32_TIMER_DTFC_DTPRS0FSEL(v)           ((EFM32_TIMER_DTFC_DTPRS0FSEL_##v) << 0)
  #define EFM32_TIMER_DTFC_DTPRS0FSEL_SET(x, v)    do { (x) = (((x) & ~0xf) | ((EFM32_TIMER_DTFC_DTPRS0FSEL_##v) << 0)); } while(0)
  #define EFM32_TIMER_DTFC_DTPRS0FSEL_SETVAL(x, v) do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_DTFC_DTPRS0FSEL_GET(x)       (((x) >> 0) & 0xf)
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH0       0x00000000
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH1       0x00000001
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH2       0x00000002
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH3       0x00000003
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH4       0x00000004
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH5       0x00000005
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH6       0x00000006
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH7       0x00000007
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH8       0x00000008
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH9       0x00000009
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH10      0x0000000a
/**  */
    #define EFM32_TIMER_DTFC_DTPRS0FSEL_PRSCH11      0x0000000b
  #define EFM32_TIMER_DTFC_DTPRS1FSEL(v)           ((EFM32_TIMER_DTFC_DTPRS1FSEL_##v) << 8)
  #define EFM32_TIMER_DTFC_DTPRS1FSEL_SET(x, v)    do { (x) = (((x) & ~0xf00) | ((EFM32_TIMER_DTFC_DTPRS1FSEL_##v) << 8)); } while(0)
  #define EFM32_TIMER_DTFC_DTPRS1FSEL_SETVAL(x, v) do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFM32_TIMER_DTFC_DTPRS1FSEL_GET(x)       (((x) >> 8) & 0xf)
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH0       0x00000000
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH1       0x00000001
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH2       0x00000002
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH3       0x00000003
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH4       0x00000004
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH5       0x00000005
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH6       0x00000006
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH7       0x00000007
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH8       0x00000008
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH9       0x00000009
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH10      0x0000000a
/**  */
    #define EFM32_TIMER_DTFC_DTPRS1FSEL_PRSCH11      0x0000000b
  #define EFM32_TIMER_DTFC_DTFA(v)                 ((EFM32_TIMER_DTFC_DTFA_##v) << 16)
  #define EFM32_TIMER_DTFC_DTFA_SET(x, v)          do { (x) = (((x) & ~0x30000) | ((EFM32_TIMER_DTFC_DTFA_##v) << 16)); } while(0)
  #define EFM32_TIMER_DTFC_DTFA_SETVAL(x, v)       do { (x) = (((x) & ~0x30000) | ((v) << 16)); } while(0)
  #define EFM32_TIMER_DTFC_DTFA_GET(x)             (((x) >> 16) & 0x3)
/**  */
    #define EFM32_TIMER_DTFC_DTFA_NONE               0x00000000
/**  */
    #define EFM32_TIMER_DTFC_DTFA_INACTIVE           0x00000001
/**  */
    #define EFM32_TIMER_DTFC_DTFA_CLEAR              0x00000002
/**  */
    #define EFM32_TIMER_DTFC_DTFA_TRISTATE           0x00000003
  #define EFM32_TIMER_DTFC_DTPRS0FEN               0x01000000
  #define EFM32_TIMER_DTFC_DTPRS1FEN               0x02000000
  #define EFM32_TIMER_DTFC_DTDBGFEN                0x04000000
  #define EFM32_TIMER_DTFC_DTLOCKUPFEN             0x08000000

#define EFM32_TIMER_DTOGEN_ADDR                      0x000000ac
#define EFM32_TIMER_DTOGEN_MASK                      0x0000003f
  #define EFM32_TIMER_DTOGEN_DTOGCCEN_COUNT        3
  #define EFM32_TIMER_DTOGEN_DTOGCCEN(fidx)        (0x00000001 << ((fidx)))
  #define EFM32_TIMER_DTOGEN_DTOGCDTIEN_COUNT      3
  #define EFM32_TIMER_DTOGEN_DTOGCDTIEN(fidx)      (0x00000008 << ((fidx)))

#define EFM32_TIMER_DTFAULT_ADDR                     0x000000b0
#define EFM32_TIMER_DTFAULT_MASK                     0x0000000f
  #define EFM32_TIMER_DTFAULT_DTPRS0F              0x00000001
  #define EFM32_TIMER_DTFAULT_DTPRS1F              0x00000002
  #define EFM32_TIMER_DTFAULT_DTDBGF               0x00000004
  #define EFM32_TIMER_DTFAULT_DTLOCKUPF            0x00000008

#define EFM32_TIMER_DTFAULTC_ADDR                    0x000000b4
#define EFM32_TIMER_DTFAULTC_MASK                    0x0000000f
  #define EFM32_TIMER_DTFAULTC_DTPRS0FC            0x00000001
  #define EFM32_TIMER_DTFAULTC_DTPRS1FC            0x00000002
  #define EFM32_TIMER_DTFAULTC_DTDBGFC             0x00000004
  #define EFM32_TIMER_DTFAULTC_TLOCKUPFC           0x00000008

#define EFM32_TIMER_DTLOCK_ADDR                      0x000000b8
#define EFM32_TIMER_DTLOCK_MASK                      0x0000ffff
  #define EFM32_TIMER_DTLOCK_LOCKKEY(v)            ((EFM32_TIMER_DTLOCK_LOCKKEY_##v) << 0)
  #define EFM32_TIMER_DTLOCK_LOCKKEY_SET(x, v)     do { (x) = (((x) & ~0xffff) | ((EFM32_TIMER_DTLOCK_LOCKKEY_##v) << 0)); } while(0)
  #define EFM32_TIMER_DTLOCK_LOCKKEY_SETVAL(x, v)  do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_TIMER_DTLOCK_LOCKKEY_GET(x)        (((x) >> 0) & 0xffff)
/**  */
    #define EFM32_TIMER_DTLOCK_LOCKKEY_UNLOCKED      0x00000000
/**  */
    #define EFM32_TIMER_DTLOCK_LOCKKEY_LOCKED        0x00000001

#endif

