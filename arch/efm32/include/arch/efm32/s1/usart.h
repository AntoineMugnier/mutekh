/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1                \
     -i usart.bf                \
     -O usart.h
*/

#ifndef _EFM32_USART_BFGEN_DEFS_
#define _EFM32_USART_BFGEN_DEFS_

#define EFM32_USART_CTRL_ADDR                        0x00000000
#define EFM32_USART_CTRL_MASK                        0xf3ffff7f
  #define EFM32_USART_CTRL_SYNC                    0x00000001
  #define EFM32_USART_CTRL_LOOPBK                  0x00000002
  #define EFM32_USART_CTRL_CCEN                    0x00000004
  #define EFM32_USART_CTRL_MPM                     0x00000008
  #define EFM32_USART_CTRL_MPAB                    0x00000010
  #define EFM32_USART_CTRL_OVS(v)                  ((EFM32_USART_CTRL_OVS_##v) << 5)
  #define EFM32_USART_CTRL_OVS_SET(x, v)           do { (x) = (((x) & ~0x60) | ((EFM32_USART_CTRL_OVS_##v) << 5)); } while(0)
  #define EFM32_USART_CTRL_OVS_SETVAL(x, v)        do { (x) = (((x) & ~0x60) | ((v) << 5)); } while(0)
  #define EFM32_USART_CTRL_OVS_GET(x)              (((x) >> 5) & 0x3)
/**  */
    #define EFM32_USART_CTRL_OVS_X16                 0x00000000
/**  */
    #define EFM32_USART_CTRL_OVS_X8                  0x00000001
/**  */
    #define EFM32_USART_CTRL_OVS_X6                  0x00000002
/**  */
    #define EFM32_USART_CTRL_OVS_X4                  0x00000003
  #define EFM32_USART_CTRL_CLKPOL                  0x00000100
  #define EFM32_USART_CTRL_CLKPHA                  0x00000200
  #define EFM32_USART_CTRL_MSBF                    0x00000400
  #define EFM32_USART_CTRL_CSMA                    0x00000800
  #define EFM32_USART_CTRL_TXBIL                   0x00001000
  #define EFM32_USART_CTRL_RXINV                   0x00002000
  #define EFM32_USART_CTRL_TXINV                   0x00004000
  #define EFM32_USART_CTRL_CSINV                   0x00008000
  #define EFM32_USART_CTRL_AUTOCS                  0x00010000
  #define EFM32_USART_CTRL_AUTOTRI                 0x00020000
  #define EFM32_USART_CTRL_SCMODE                  0x00040000
  #define EFM32_USART_CTRL_SCRETRANS               0x00080000
  #define EFM32_USART_CTRL_SKIPPERRF               0x00100000
  #define EFM32_USART_CTRL_BIT8DV                  0x00200000
  #define EFM32_USART_CTRL_ERRSDMA                 0x00400000
  #define EFM32_USART_CTRL_ERRSRX                  0x00800000
  #define EFM32_USART_CTRL_ERRSTX                  0x01000000
  #define EFM32_USART_CTRL_SSSEARLY                0x02000000
  #define EFM32_USART_CTRL_BYTESWAP                0x10000000
  #define EFM32_USART_CTRL_AUTOTX                  0x20000000
  #define EFM32_USART_CTRL_MVDIS                   0x40000000
  #define EFM32_USART_CTRL_SMSDELAY                0x80000000

#define EFM32_USART_FRAME_ADDR                       0x00000004
#define EFM32_USART_FRAME_MASK                       0x0000330f
  #define EFM32_USART_FRAME_DATABITS(v)            ((EFM32_USART_FRAME_DATABITS_##v) << 0)
  #define EFM32_USART_FRAME_DATABITS_SET(x, v)     do { (x) = (((x) & ~0xf) | ((EFM32_USART_FRAME_DATABITS_##v) << 0)); } while(0)
  #define EFM32_USART_FRAME_DATABITS_SETVAL(x, v)  do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_USART_FRAME_DATABITS_GET(x)        (((x) >> 0) & 0xf)
/**  */
    #define EFM32_USART_FRAME_DATABITS_FOUR          0x00000001
/**  */
    #define EFM32_USART_FRAME_DATABITS_FIVE          0x00000002
/**  */
    #define EFM32_USART_FRAME_DATABITS_SIX           0x00000003
/**  */
    #define EFM32_USART_FRAME_DATABITS_SEVEN         0x00000004
/**  */
    #define EFM32_USART_FRAME_DATABITS_EIGHT         0x00000005
/**  */
    #define EFM32_USART_FRAME_DATABITS_NINE          0x00000006
/**  */
    #define EFM32_USART_FRAME_DATABITS_TEN           0x00000007
/**  */
    #define EFM32_USART_FRAME_DATABITS_ELEVEN        0x00000008
/**  */
    #define EFM32_USART_FRAME_DATABITS_TWELVE        0x00000009
/**  */
    #define EFM32_USART_FRAME_DATABITS_THIRTEEN      0x0000000a
/**  */
    #define EFM32_USART_FRAME_DATABITS_FOURTEEN      0x0000000b
/**  */
    #define EFM32_USART_FRAME_DATABITS_FIFTEEN       0x0000000c
/**  */
    #define EFM32_USART_FRAME_DATABITS_SIXTEEN       0x0000000d
  #define EFM32_USART_FRAME_PARITY(v)              ((EFM32_USART_FRAME_PARITY_##v) << 8)
  #define EFM32_USART_FRAME_PARITY_SET(x, v)       do { (x) = (((x) & ~0x300) | ((EFM32_USART_FRAME_PARITY_##v) << 8)); } while(0)
  #define EFM32_USART_FRAME_PARITY_SETVAL(x, v)    do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define EFM32_USART_FRAME_PARITY_GET(x)          (((x) >> 8) & 0x3)
/**  */
    #define EFM32_USART_FRAME_PARITY_NONE            0x00000000
/**  */
    #define EFM32_USART_FRAME_PARITY_EVEN            0x00000002
/**  */
    #define EFM32_USART_FRAME_PARITY_ODD             0x00000003
  #define EFM32_USART_FRAME_STOPBITS(v)            ((EFM32_USART_FRAME_STOPBITS_##v) << 12)
  #define EFM32_USART_FRAME_STOPBITS_SET(x, v)     do { (x) = (((x) & ~0x3000) | ((EFM32_USART_FRAME_STOPBITS_##v) << 12)); } while(0)
  #define EFM32_USART_FRAME_STOPBITS_SETVAL(x, v)  do { (x) = (((x) & ~0x3000) | ((v) << 12)); } while(0)
  #define EFM32_USART_FRAME_STOPBITS_GET(x)        (((x) >> 12) & 0x3)
/**  */
    #define EFM32_USART_FRAME_STOPBITS_HALF          0x00000000
/**  */
    #define EFM32_USART_FRAME_STOPBITS_ONE           0x00000001
/**  */
    #define EFM32_USART_FRAME_STOPBITS_ONEANDAHALF   0x00000002
/**  */
    #define EFM32_USART_FRAME_STOPBITS_TWO           0x00000003

#define EFM32_USART_TRIGCTRL_ADDR                    0x00000008
#define EFM32_USART_TRIGCTRL_MASK                    0x000f1ff0
  #define EFM32_USART_TRIGCTRL_RXTEN               0x00000010
  #define EFM32_USART_TRIGCTRL_TXTEN               0x00000020
  #define EFM32_USART_TRIGCTRL_AUTOTXTEN           0x00000040
  #define EFM32_USART_TRIGCTRL_TXARX0EN            0x00000080
  #define EFM32_USART_TRIGCTRL_TXARX1EN            0x00000100
  #define EFM32_USART_TRIGCTRL_TXARX2EN            0x00000200
  #define EFM32_USART_TRIGCTRL_RXATX0EN            0x00000400
  #define EFM32_USART_TRIGCTRL_RXATX1EN            0x00000800
  #define EFM32_USART_TRIGCTRL_RXATX2EN            0x00001000
  #define EFM32_USART_TRIGCTRL_TSEL(v)             ((EFM32_USART_TRIGCTRL_TSEL_##v) << 16)
  #define EFM32_USART_TRIGCTRL_TSEL_SET(x, v)      do { (x) = (((x) & ~0xf0000) | ((EFM32_USART_TRIGCTRL_TSEL_##v) << 16)); } while(0)
  #define EFM32_USART_TRIGCTRL_TSEL_SETVAL(x, v)   do { (x) = (((x) & ~0xf0000) | ((v) << 16)); } while(0)
  #define EFM32_USART_TRIGCTRL_TSEL_GET(x)         (((x) >> 16) & 0xf)
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH0         0x00000000
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH1         0x00000001
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH2         0x00000002
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH3         0x00000003
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH4         0x00000004
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH5         0x00000005
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH6         0x00000006
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH7         0x00000007
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH8         0x00000008
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH9         0x00000009
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH10        0x0000000a
/**  */
    #define EFM32_USART_TRIGCTRL_TSEL_PRSCH11        0x0000000b

#define EFM32_USART_CMD_ADDR                         0x0000000c
#define EFM32_USART_CMD_MASK                         0x00000fff
  #define EFM32_USART_CMD_RXEN                     0x00000001
  #define EFM32_USART_CMD_RXDIS                    0x00000002
  #define EFM32_USART_CMD_TXEN                     0x00000004
  #define EFM32_USART_CMD_TXDIS                    0x00000008
  #define EFM32_USART_CMD_MASTEREN                 0x00000010
  #define EFM32_USART_CMD_MASTERDIS                0x00000020
  #define EFM32_USART_CMD_RXBLOCKEN                0x00000040
  #define EFM32_USART_CMD_RXBLOCKDIS               0x00000080
  #define EFM32_USART_CMD_TXTRIEN                  0x00000100
  #define EFM32_USART_CMD_TXTRIDIS                 0x00000200
  #define EFM32_USART_CMD_CLEARTX                  0x00000400
  #define EFM32_USART_CMD_CLEARRX                  0x00000800

#define EFM32_USART_STATUS_ADDR                      0x00000010
#define EFM32_USART_STATUS_MASK                      0x00037fff
  #define EFM32_USART_STATUS_RXENS                 0x00000001
  #define EFM32_USART_STATUS_TXENS                 0x00000002
  #define EFM32_USART_STATUS_MASTER                0x00000004
  #define EFM32_USART_STATUS_RXBLOCK               0x00000008
  #define EFM32_USART_STATUS_TXTRI                 0x00000010
  #define EFM32_USART_STATUS_TXC                   0x00000020
  #define EFM32_USART_STATUS_TXBL                  0x00000040
  #define EFM32_USART_STATUS_RXDATAV               0x00000080
  #define EFM32_USART_STATUS_RXFULL                0x00000100
  #define EFM32_USART_STATUS_TXBDRIGHT             0x00000200
  #define EFM32_USART_STATUS_TXBSRIGHT             0x00000400
  #define EFM32_USART_STATUS_RXDATAVRIGHT          0x00000800
  #define EFM32_USART_STATUS_RXFULLRIGHT           0x00001000
  #define EFM32_USART_STATUS_TXIDLE                0x00002000
  #define EFM32_USART_STATUS_TIMERRESTARTED        0x00004000
  #define EFM32_USART_STATUS_TXBUFCNT(v)           ((v) << 16)
  #define EFM32_USART_STATUS_TXBUFCNT_SET(x, v)    do { (x) = (((x) & ~0x30000) | ((v) << 16)); } while(0)
  #define EFM32_USART_STATUS_TXBUFCNT_GET(x)       (((x) >> 16) & 0x3)

#define EFM32_USART_CLKDIV_ADDR                      0x00000014
#define EFM32_USART_CLKDIV_MASK                      0x80fffff8
  #define EFM32_USART_CLKDIV_DIV(v)                ((v) << 3)
  #define EFM32_USART_CLKDIV_DIV_SET(x, v)         do { (x) = (((x) & ~0xfffff8) | ((v) << 3)); } while(0)
  #define EFM32_USART_CLKDIV_DIV_GET(x)            (((x) >> 3) & 0x1fffff)
  #define EFM32_USART_CLKDIV_AUTOBAUDEN            0x80000000

#define EFM32_USART_RXDATAX_ADDR                     0x00000018
#define EFM32_USART_RXDATAX_MASK                     0x0000c1ff
  #define EFM32_USART_RXDATAX_RXDATA(v)            ((v) << 0)
  #define EFM32_USART_RXDATAX_RXDATA_SET(x, v)     do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define EFM32_USART_RXDATAX_RXDATA_GET(x)        (((x) >> 0) & 0x1ff)
  #define EFM32_USART_RXDATAX_PERR                 0x00004000
  #define EFM32_USART_RXDATAX_FERR                 0x00008000

#define EFM32_USART_RXDATA_ADDR                      0x0000001c
#define EFM32_USART_RXDATA_MASK                      0x000000ff
  #define EFM32_USART_RXDATA_RXDATA(v)             ((v) << 0)
  #define EFM32_USART_RXDATA_RXDATA_SET(x, v)      do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFM32_USART_RXDATA_RXDATA_GET(x)         (((x) >> 0) & 0xff)

#define EFM32_USART_RXDOUBLEX_ADDR                   0x00000020
#define EFM32_USART_RXDOUBLEX_MASK                   0xc1ffc1ff
  #define EFM32_USART_RXDOUBLEX_RXDATA0(v)         ((v) << 0)
  #define EFM32_USART_RXDOUBLEX_RXDATA0_SET(x, v)  do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define EFM32_USART_RXDOUBLEX_RXDATA0_GET(x)     (((x) >> 0) & 0x1ff)
  #define EFM32_USART_RXDOUBLEX_PERR0              0x00004000
  #define EFM32_USART_RXDOUBLEX_FERR0              0x00008000
  #define EFM32_USART_RXDOUBLEX_RXDATA1(v)         ((v) << 16)
  #define EFM32_USART_RXDOUBLEX_RXDATA1_SET(x, v)  do { (x) = (((x) & ~0x1ff0000) | ((v) << 16)); } while(0)
  #define EFM32_USART_RXDOUBLEX_RXDATA1_GET(x)     (((x) >> 16) & 0x1ff)
  #define EFM32_USART_RXDOUBLEX_PERR1              0x40000000
  #define EFM32_USART_RXDOUBLEX_FERR1              0x80000000

#define EFM32_USART_RXDOUBLE_ADDR                    0x00000024
#define EFM32_USART_RXDOUBLE_MASK                    0x0000ffff
  #define EFM32_USART_RXDOUBLE_RXDATA0(v)          ((v) << 0)
  #define EFM32_USART_RXDOUBLE_RXDATA0_SET(x, v)   do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFM32_USART_RXDOUBLE_RXDATA0_GET(x)      (((x) >> 0) & 0xff)
  #define EFM32_USART_RXDOUBLE_RXDATA1(v)          ((v) << 8)
  #define EFM32_USART_RXDOUBLE_RXDATA1_SET(x, v)   do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define EFM32_USART_RXDOUBLE_RXDATA1_GET(x)      (((x) >> 8) & 0xff)

#define EFM32_USART_RXDATAXP_ADDR                    0x00000028
#define EFM32_USART_RXDATAXP_MASK                    0x0000c1ff
  #define EFM32_USART_RXDATAXP_RXDATAP(v)          ((v) << 0)
  #define EFM32_USART_RXDATAXP_RXDATAP_SET(x, v)   do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define EFM32_USART_RXDATAXP_RXDATAP_GET(x)      (((x) >> 0) & 0x1ff)
  #define EFM32_USART_RXDATAXP_PERRP               0x00004000
  #define EFM32_USART_RXDATAXP_FERRP               0x00008000

#define EFM32_USART_RXDOUBLEXP_ADDR                  0x0000002c
#define EFM32_USART_RXDOUBLEXP_MASK                  0xc1ffc1ff
  #define EFM32_USART_RXDOUBLEXP_RXDATAP0(v)       ((v) << 0)
  #define EFM32_USART_RXDOUBLEXP_RXDATAP0_SET(x, v) do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define EFM32_USART_RXDOUBLEXP_RXDATAP0_GET(x)   (((x) >> 0) & 0x1ff)
  #define EFM32_USART_RXDOUBLEXP_PERRP0            0x00004000
  #define EFM32_USART_RXDOUBLEXP_FERRP0            0x00008000
  #define EFM32_USART_RXDOUBLEXP_RXDATAP1(v)       ((v) << 16)
  #define EFM32_USART_RXDOUBLEXP_RXDATAP1_SET(x, v) do { (x) = (((x) & ~0x1ff0000) | ((v) << 16)); } while(0)
  #define EFM32_USART_RXDOUBLEXP_RXDATAP1_GET(x)   (((x) >> 16) & 0x1ff)
  #define EFM32_USART_RXDOUBLEXP_PERRP1            0x40000000
  #define EFM32_USART_RXDOUBLEXP_FERRP1            0x80000000

#define EFM32_USART_TXDATAX_ADDR                     0x00000030
#define EFM32_USART_TXDATAX_MASK                     0x0000f9ff
  #define EFM32_USART_TXDATAX_TXDATAX(v)           ((v) << 0)
  #define EFM32_USART_TXDATAX_TXDATAX_SET(x, v)    do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define EFM32_USART_TXDATAX_TXDATAX_GET(x)       (((x) >> 0) & 0x1ff)
  #define EFM32_USART_TXDATAX_UBRXAT               0x00000800
  #define EFM32_USART_TXDATAX_TXTRIAT              0x00001000
  #define EFM32_USART_TXDATAX_TXBREAK              0x00002000
  #define EFM32_USART_TXDATAX_TXDISAT              0x00004000
  #define EFM32_USART_TXDATAX_RXENAT               0x00008000

#define EFM32_USART_TXDATA_ADDR                      0x00000034
#define EFM32_USART_TXDATA_MASK                      0x000000ff
  #define EFM32_USART_TXDATA_TXDATA(v)             ((v) << 0)
  #define EFM32_USART_TXDATA_TXDATA_SET(x, v)      do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFM32_USART_TXDATA_TXDATA_GET(x)         (((x) >> 0) & 0xff)

#define EFM32_USART_TXDOUBLEX_ADDR                   0x00000038
#define EFM32_USART_TXDOUBLEX_MASK                   0xf9fff9ff
  #define EFM32_USART_TXDOUBLEX_TXDATA0(v)         ((v) << 0)
  #define EFM32_USART_TXDOUBLEX_TXDATA0_SET(x, v)  do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define EFM32_USART_TXDOUBLEX_TXDATA0_GET(x)     (((x) >> 0) & 0x1ff)
  #define EFM32_USART_TXDOUBLEX_UBRXAT0            0x00000800
  #define EFM32_USART_TXDOUBLEX_TXTRIAT0           0x00001000
  #define EFM32_USART_TXDOUBLEX_TXBREAK0           0x00002000
  #define EFM32_USART_TXDOUBLEX_TXDISAT0           0x00004000
  #define EFM32_USART_TXDOUBLEX_RXENAT0            0x00008000
  #define EFM32_USART_TXDOUBLEX_TXDATA1(v)         ((v) << 16)
  #define EFM32_USART_TXDOUBLEX_TXDATA1_SET(x, v)  do { (x) = (((x) & ~0x1ff0000) | ((v) << 16)); } while(0)
  #define EFM32_USART_TXDOUBLEX_TXDATA1_GET(x)     (((x) >> 16) & 0x1ff)
  #define EFM32_USART_TXDOUBLEX_UBRXAT1            0x08000000
  #define EFM32_USART_TXDOUBLEX_TXTRIAT1           0x10000000
  #define EFM32_USART_TXDOUBLEX_TXBREAK1           0x20000000
  #define EFM32_USART_TXDOUBLEX_TXDISAT1           0x40000000
  #define EFM32_USART_TXDOUBLEX_RXENAT1            0x80000000

#define EFM32_USART_TXDOUBLE_ADDR                    0x0000003c
#define EFM32_USART_TXDOUBLE_MASK                    0x0000ffff
  #define EFM32_USART_TXDOUBLE_TXDATA0(v)          ((v) << 0)
  #define EFM32_USART_TXDOUBLE_TXDATA0_SET(x, v)   do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFM32_USART_TXDOUBLE_TXDATA0_GET(x)      (((x) >> 0) & 0xff)
  #define EFM32_USART_TXDOUBLE_TXDATA1(v)          ((v) << 8)
  #define EFM32_USART_TXDOUBLE_TXDATA1_SET(x, v)   do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define EFM32_USART_TXDOUBLE_TXDATA1_GET(x)      (((x) >> 8) & 0xff)

#define EFM32_USART_IF_ADDR                          0x00000040
#define EFM32_USART_IF_MASK                          0x0001ffff
  #define EFM32_USART_IF_TXC                       0x00000001
  #define EFM32_USART_IF_TXBL                      0x00000002
  #define EFM32_USART_IF_RXDATAV                   0x00000004
  #define EFM32_USART_IF_RXFULL                    0x00000008
  #define EFM32_USART_IF_RXOF                      0x00000010
  #define EFM32_USART_IF_RXUF                      0x00000020
  #define EFM32_USART_IF_TXOF                      0x00000040
  #define EFM32_USART_IF_TXUF                      0x00000080
  #define EFM32_USART_IF_PERR                      0x00000100
  #define EFM32_USART_IF_FERR                      0x00000200
  #define EFM32_USART_IF_MPAF                      0x00000400
  #define EFM32_USART_IF_SSM                       0x00000800
  #define EFM32_USART_IF_CCF                       0x00001000
  #define EFM32_USART_IF_TXIDLE                    0x00002000
  #define EFM32_USART_IF_TCMP0                     0x00004000
  #define EFM32_USART_IF_TCMP1                     0x00008000
  #define EFM32_USART_IF_TCMP2                     0x00010000

#define EFM32_USART_IFS_ADDR                         0x00000044
#define EFM32_USART_IFS_MASK                         0x0001fff9
  #define EFM32_USART_IFS_TXC                      0x00000001
  #define EFM32_USART_IFS_RXFULL                   0x00000008
  #define EFM32_USART_IFS_RXOF                     0x00000010
  #define EFM32_USART_IFS_RXUF                     0x00000020
  #define EFM32_USART_IFS_TXOF                     0x00000040
  #define EFM32_USART_IFS_TXUF                     0x00000080
  #define EFM32_USART_IFS_PERR                     0x00000100
  #define EFM32_USART_IFS_FERR                     0x00000200
  #define EFM32_USART_IFS_MPAF                     0x00000400
  #define EFM32_USART_IFS_SSM                      0x00000800
  #define EFM32_USART_IFS_CCF                      0x00001000
  #define EFM32_USART_IFS_TXIDLE                   0x00002000
  #define EFM32_USART_IFS_TCMP0                    0x00004000
  #define EFM32_USART_IFS_TCMP1                    0x00008000
  #define EFM32_USART_IFS_TCMP2                    0x00010000

#define EFM32_USART_IFC_ADDR                         0x00000048
#define EFM32_USART_IFC_MASK                         0x0001fff9
  #define EFM32_USART_IFC_TXC                      0x00000001
  #define EFM32_USART_IFC_RXFULL                   0x00000008
  #define EFM32_USART_IFC_RXOF                     0x00000010
  #define EFM32_USART_IFC_RXUF                     0x00000020
  #define EFM32_USART_IFC_TXOF                     0x00000040
  #define EFM32_USART_IFC_TXUF                     0x00000080
  #define EFM32_USART_IFC_PERR                     0x00000100
  #define EFM32_USART_IFC_FERR                     0x00000200
  #define EFM32_USART_IFC_MPAF                     0x00000400
  #define EFM32_USART_IFC_SSM                      0x00000800
  #define EFM32_USART_IFC_CCF                      0x00001000
  #define EFM32_USART_IFC_TXIDLE                   0x00002000
  #define EFM32_USART_IFC_TCMP0                    0x00004000
  #define EFM32_USART_IFC_TCMP1                    0x00008000
  #define EFM32_USART_IFC_TCMP2                    0x00010000

#define EFM32_USART_IEN_ADDR                         0x0000004c
#define EFM32_USART_IEN_MASK                         0x0001ffff
  #define EFM32_USART_IEN_TXC                      0x00000001
  #define EFM32_USART_IEN_TXBL                     0x00000002
  #define EFM32_USART_IEN_RXDATAV                  0x00000004
  #define EFM32_USART_IEN_RXFULL                   0x00000008
  #define EFM32_USART_IEN_RXOF                     0x00000010
  #define EFM32_USART_IEN_RXUF                     0x00000020
  #define EFM32_USART_IEN_TXOF                     0x00000040
  #define EFM32_USART_IEN_TXUF                     0x00000080
  #define EFM32_USART_IEN_PERR                     0x00000100
  #define EFM32_USART_IEN_FERR                     0x00000200
  #define EFM32_USART_IEN_MPAF                     0x00000400
  #define EFM32_USART_IEN_SSM                      0x00000800
  #define EFM32_USART_IEN_CCF                      0x00001000
  #define EFM32_USART_IEN_TXIDLE                   0x00002000
  #define EFM32_USART_IEN_TCMP0                    0x00004000
  #define EFM32_USART_IEN_TCMP1                    0x00008000
  #define EFM32_USART_IEN_TCMP2                    0x00010000

#define EFM32_USART_IRCTRL_ADDR                      0x00000050
#define EFM32_USART_IRCTRL_MASK                      0x00000f8f
  #define EFM32_USART_IRCTRL_IREN                  0x00000001
  #define EFM32_USART_IRCTRL_IRPW(v)               ((EFM32_USART_IRCTRL_IRPW_##v) << 1)
  #define EFM32_USART_IRCTRL_IRPW_SET(x, v)        do { (x) = (((x) & ~0x6) | ((EFM32_USART_IRCTRL_IRPW_##v) << 1)); } while(0)
  #define EFM32_USART_IRCTRL_IRPW_SETVAL(x, v)     do { (x) = (((x) & ~0x6) | ((v) << 1)); } while(0)
  #define EFM32_USART_IRCTRL_IRPW_GET(x)           (((x) >> 1) & 0x3)
/**  */
    #define EFM32_USART_IRCTRL_IRPW_ONE              0x00000000
/**  */
    #define EFM32_USART_IRCTRL_IRPW_TWO              0x00000001
/**  */
    #define EFM32_USART_IRCTRL_IRPW_THREE            0x00000002
/**  */
    #define EFM32_USART_IRCTRL_IRPW_FOUR             0x00000003
  #define EFM32_USART_IRCTRL_IRFILT                0x00000008
  #define EFM32_USART_IRCTRL_IRPRSEN               0x00000080
  #define EFM32_USART_IRCTRL_IRPRSSEL(v)           ((EFM32_USART_IRCTRL_IRPRSSEL_##v) << 8)
  #define EFM32_USART_IRCTRL_IRPRSSEL_SET(x, v)    do { (x) = (((x) & ~0xf00) | ((EFM32_USART_IRCTRL_IRPRSSEL_##v) << 8)); } while(0)
  #define EFM32_USART_IRCTRL_IRPRSSEL_SETVAL(x, v) do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFM32_USART_IRCTRL_IRPRSSEL_GET(x)       (((x) >> 8) & 0xf)
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH0       0x00000000
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH1       0x00000001
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH2       0x00000002
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH3       0x00000003
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH4       0x00000004
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH5       0x00000005
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH6       0x00000006
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH7       0x00000007
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH8       0x00000008
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH9       0x00000009
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH10      0x0000000a
/**  */
    #define EFM32_USART_IRCTRL_IRPRSSEL_PRSCH11      0x0000000b

#define EFM32_USART_INPUT_ADDR                       0x00000058
#define EFM32_USART_INPUT_MASK                       0x00008f8f
  #define EFM32_USART_INPUT_RXPRSSEL(v)            ((EFM32_USART_INPUT_RXPRSSEL_##v) << 0)
  #define EFM32_USART_INPUT_RXPRSSEL_SET(x, v)     do { (x) = (((x) & ~0xf) | ((EFM32_USART_INPUT_RXPRSSEL_##v) << 0)); } while(0)
  #define EFM32_USART_INPUT_RXPRSSEL_SETVAL(x, v)  do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_USART_INPUT_RXPRSSEL_GET(x)        (((x) >> 0) & 0xf)
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH0        0x00000000
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH1        0x00000001
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH2        0x00000002
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH3        0x00000003
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH4        0x00000004
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH5        0x00000005
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH6        0x00000006
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH7        0x00000007
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH8        0x00000008
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH9        0x00000009
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH10       0x0000000a
/**  */
    #define EFM32_USART_INPUT_RXPRSSEL_PRSCH11       0x0000000b
  #define EFM32_USART_INPUT_RXPRS                  0x00000080
  #define EFM32_USART_INPUT_CLKPRSSEL(v)           ((EFM32_USART_INPUT_CLKPRSSEL_##v) << 8)
  #define EFM32_USART_INPUT_CLKPRSSEL_SET(x, v)    do { (x) = (((x) & ~0xf00) | ((EFM32_USART_INPUT_CLKPRSSEL_##v) << 8)); } while(0)
  #define EFM32_USART_INPUT_CLKPRSSEL_SETVAL(x, v) do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFM32_USART_INPUT_CLKPRSSEL_GET(x)       (((x) >> 8) & 0xf)
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH0       0x00000000
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH1       0x00000001
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH2       0x00000002
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH3       0x00000003
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH4       0x00000004
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH5       0x00000005
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH6       0x00000006
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH7       0x00000007
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH8       0x00000008
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH9       0x00000009
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH10      0x0000000a
/**  */
    #define EFM32_USART_INPUT_CLKPRSSEL_PRSCH11      0x0000000b
  #define EFM32_USART_INPUT_CLKPRS                 0x00008000

#define EFM32_USART_I2SCTRL_ADDR                     0x0000005c
#define EFM32_USART_I2SCTRL_MASK                     0x0000071f
  #define EFM32_USART_I2SCTRL_EN                   0x00000001
  #define EFM32_USART_I2SCTRL_MONO                 0x00000002
  #define EFM32_USART_I2SCTRL_JUSTIFY              0x00000004
  #define EFM32_USART_I2SCTRL_DMASPLIT             0x00000008
  #define EFM32_USART_I2SCTRL_DELAY                0x00000010
  #define EFM32_USART_I2SCTRL_FORMAT(v)            ((EFM32_USART_I2SCTRL_FORMAT_##v) << 8)
  #define EFM32_USART_I2SCTRL_FORMAT_SET(x, v)     do { (x) = (((x) & ~0x700) | ((EFM32_USART_I2SCTRL_FORMAT_##v) << 8)); } while(0)
  #define EFM32_USART_I2SCTRL_FORMAT_SETVAL(x, v)  do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define EFM32_USART_I2SCTRL_FORMAT_GET(x)        (((x) >> 8) & 0x7)
/**  */
    #define EFM32_USART_I2SCTRL_FORMAT_W32D32        0x00000000
/**  */
    #define EFM32_USART_I2SCTRL_FORMAT_W32D24M       0x00000001
/**  */
    #define EFM32_USART_I2SCTRL_FORMAT_W32D24        0x00000002
/**  */
    #define EFM32_USART_I2SCTRL_FORMAT_W32D16        0x00000003
/**  */
    #define EFM32_USART_I2SCTRL_FORMAT_W32D8         0x00000004
/**  */
    #define EFM32_USART_I2SCTRL_FORMAT_W16D16        0x00000005
/**  */
    #define EFM32_USART_I2SCTRL_FORMAT_W16D8         0x00000006
/**  */
    #define EFM32_USART_I2SCTRL_FORMAT_W8D8          0x00000007

#define EFM32_USART_TIMING_ADDR                      0x00000060
#define EFM32_USART_TIMING_MASK                      0x77770000
  #define EFM32_USART_TIMING_TXDELAY(v)            ((EFM32_USART_TIMING_TXDELAY_##v) << 16)
  #define EFM32_USART_TIMING_TXDELAY_SET(x, v)     do { (x) = (((x) & ~0x70000) | ((EFM32_USART_TIMING_TXDELAY_##v) << 16)); } while(0)
  #define EFM32_USART_TIMING_TXDELAY_SETVAL(x, v)  do { (x) = (((x) & ~0x70000) | ((v) << 16)); } while(0)
  #define EFM32_USART_TIMING_TXDELAY_GET(x)        (((x) >> 16) & 0x7)
/**  */
    #define EFM32_USART_TIMING_TXDELAY_DISABLE       0x00000000
/**  */
    #define EFM32_USART_TIMING_TXDELAY_ONE           0x00000001
/**  */
    #define EFM32_USART_TIMING_TXDELAY_TWO           0x00000002
/**  */
    #define EFM32_USART_TIMING_TXDELAY_THREE         0x00000003
/**  */
    #define EFM32_USART_TIMING_TXDELAY_SEVEN         0x00000004
/**  */
    #define EFM32_USART_TIMING_TXDELAY_TCMP0         0x00000005
/**  */
    #define EFM32_USART_TIMING_TXDELAY_TCMP1         0x00000006
/**  */
    #define EFM32_USART_TIMING_TXDELAY_TCMP2         0x00000007
  #define EFM32_USART_TIMING_CSSETUP(v)            ((EFM32_USART_TIMING_CSSETUP_##v) << 20)
  #define EFM32_USART_TIMING_CSSETUP_SET(x, v)     do { (x) = (((x) & ~0x700000) | ((EFM32_USART_TIMING_CSSETUP_##v) << 20)); } while(0)
  #define EFM32_USART_TIMING_CSSETUP_SETVAL(x, v)  do { (x) = (((x) & ~0x700000) | ((v) << 20)); } while(0)
  #define EFM32_USART_TIMING_CSSETUP_GET(x)        (((x) >> 20) & 0x7)
/**  */
    #define EFM32_USART_TIMING_CSSETUP_ZERO          0x00000000
/**  */
    #define EFM32_USART_TIMING_CSSETUP_ONE           0x00000001
/**  */
    #define EFM32_USART_TIMING_CSSETUP_TWO           0x00000002
/**  */
    #define EFM32_USART_TIMING_CSSETUP_THREE         0x00000003
/**  */
    #define EFM32_USART_TIMING_CSSETUP_SEVEN         0x00000004
/**  */
    #define EFM32_USART_TIMING_CSSETUP_TCMP0         0x00000005
/**  */
    #define EFM32_USART_TIMING_CSSETUP_TCMP1         0x00000006
/**  */
    #define EFM32_USART_TIMING_CSSETUP_TCMP2         0x00000007
  #define EFM32_USART_TIMING_ICS(v)                ((EFM32_USART_TIMING_ICS_##v) << 24)
  #define EFM32_USART_TIMING_ICS_SET(x, v)         do { (x) = (((x) & ~0x7000000) | ((EFM32_USART_TIMING_ICS_##v) << 24)); } while(0)
  #define EFM32_USART_TIMING_ICS_SETVAL(x, v)      do { (x) = (((x) & ~0x7000000) | ((v) << 24)); } while(0)
  #define EFM32_USART_TIMING_ICS_GET(x)            (((x) >> 24) & 0x7)
/**  */
    #define EFM32_USART_TIMING_ICS_ZERO              0x00000000
/**  */
    #define EFM32_USART_TIMING_ICS_ONE               0x00000001
/**  */
    #define EFM32_USART_TIMING_ICS_TWO               0x00000002
/**  */
    #define EFM32_USART_TIMING_ICS_THREE             0x00000003
/**  */
    #define EFM32_USART_TIMING_ICS_SEVEN             0x00000004
/**  */
    #define EFM32_USART_TIMING_ICS_TCMP0             0x00000005
/**  */
    #define EFM32_USART_TIMING_ICS_TCMP1             0x00000006
/**  */
    #define EFM32_USART_TIMING_ICS_TCMP2             0x00000007
  #define EFM32_USART_TIMING_CSHOLD(v)             ((EFM32_USART_TIMING_CSHOLD_##v) << 28)
  #define EFM32_USART_TIMING_CSHOLD_SET(x, v)      do { (x) = (((x) & ~0x70000000) | ((EFM32_USART_TIMING_CSHOLD_##v) << 28)); } while(0)
  #define EFM32_USART_TIMING_CSHOLD_SETVAL(x, v)   do { (x) = (((x) & ~0x70000000) | ((v) << 28)); } while(0)
  #define EFM32_USART_TIMING_CSHOLD_GET(x)         (((x) >> 28) & 0x7)
/**  */
    #define EFM32_USART_TIMING_CSHOLD_ZERO           0x00000000
/**  */
    #define EFM32_USART_TIMING_CSHOLD_ONE            0x00000001
/**  */
    #define EFM32_USART_TIMING_CSHOLD_TWO            0x00000002
/**  */
    #define EFM32_USART_TIMING_CSHOLD_THREE          0x00000003
/**  */
    #define EFM32_USART_TIMING_CSHOLD_SEVEN          0x00000004
/**  */
    #define EFM32_USART_TIMING_CSHOLD_TCMP0          0x00000005
/**  */
    #define EFM32_USART_TIMING_CSHOLD_TCMP1          0x00000006
/**  */
    #define EFM32_USART_TIMING_CSHOLD_TCMP2          0x00000007

#define EFM32_USART_CTRLX_ADDR                       0x00000064
#define EFM32_USART_CTRLX_MASK                       0x8000000f
  #define EFM32_USART_CTRLX_DBGHALT                0x00000001
  #define EFM32_USART_CTRLX_CTSINV                 0x00000002
  #define EFM32_USART_CTRLX_CTSEN                  0x00000004
  #define EFM32_USART_CTRLX_RTSINV                 0x00000008
  #define EFM32_USART_CTRLX_GPIODELAYXOREN         0x80000000

#define EFM32_USART_TIMECMP0_ADDR                    0x00000068
#define EFM32_USART_TIMECMP0_MASK                    0x017700ff
  #define EFM32_USART_TIMECMP0_TCMPVAL(v)          ((v) << 0)
  #define EFM32_USART_TIMECMP0_TCMPVAL_SET(x, v)   do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFM32_USART_TIMECMP0_TCMPVAL_GET(x)      (((x) >> 0) & 0xff)
  #define EFM32_USART_TIMECMP0_TSTART(v)           ((EFM32_USART_TIMECMP0_TSTART_##v) << 16)
  #define EFM32_USART_TIMECMP0_TSTART_SET(x, v)    do { (x) = (((x) & ~0x70000) | ((EFM32_USART_TIMECMP0_TSTART_##v) << 16)); } while(0)
  #define EFM32_USART_TIMECMP0_TSTART_SETVAL(x, v) do { (x) = (((x) & ~0x70000) | ((v) << 16)); } while(0)
  #define EFM32_USART_TIMECMP0_TSTART_GET(x)       (((x) >> 16) & 0x7)
/**  */
    #define EFM32_USART_TIMECMP0_TSTART_DISABLE      0x00000000
/**  */
    #define EFM32_USART_TIMECMP0_TSTART_TXEOF        0x00000001
/**  */
    #define EFM32_USART_TIMECMP0_TSTART_TXC          0x00000002
/**  */
    #define EFM32_USART_TIMECMP0_TSTART_RXACT        0x00000003
/**  */
    #define EFM32_USART_TIMECMP0_TSTART_RXEOF        0x00000004
  #define EFM32_USART_TIMECMP0_TSTOP(v)            ((EFM32_USART_TIMECMP0_TSTOP_##v) << 20)
  #define EFM32_USART_TIMECMP0_TSTOP_SET(x, v)     do { (x) = (((x) & ~0x700000) | ((EFM32_USART_TIMECMP0_TSTOP_##v) << 20)); } while(0)
  #define EFM32_USART_TIMECMP0_TSTOP_SETVAL(x, v)  do { (x) = (((x) & ~0x700000) | ((v) << 20)); } while(0)
  #define EFM32_USART_TIMECMP0_TSTOP_GET(x)        (((x) >> 20) & 0x7)
/**  */
    #define EFM32_USART_TIMECMP0_TSTOP_TCMP0         0x00000000
/**  */
    #define EFM32_USART_TIMECMP0_TSTOP_TXST          0x00000001
/**  */
    #define EFM32_USART_TIMECMP0_TSTOP_RXACT         0x00000002
/**  */
    #define EFM32_USART_TIMECMP0_TSTOP_RXACTN        0x00000003
  #define EFM32_USART_TIMECMP0_RESTARTEN           0x01000000

#define EFM32_USART_TIMECMP1_ADDR                    0x0000006c
#define EFM32_USART_TIMECMP1_MASK                    0x017700ff
  #define EFM32_USART_TIMECMP1_TCMPVAL(v)          ((v) << 0)
  #define EFM32_USART_TIMECMP1_TCMPVAL_SET(x, v)   do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFM32_USART_TIMECMP1_TCMPVAL_GET(x)      (((x) >> 0) & 0xff)
  #define EFM32_USART_TIMECMP1_TSTART(v)           ((EFM32_USART_TIMECMP1_TSTART_##v) << 16)
  #define EFM32_USART_TIMECMP1_TSTART_SET(x, v)    do { (x) = (((x) & ~0x70000) | ((EFM32_USART_TIMECMP1_TSTART_##v) << 16)); } while(0)
  #define EFM32_USART_TIMECMP1_TSTART_SETVAL(x, v) do { (x) = (((x) & ~0x70000) | ((v) << 16)); } while(0)
  #define EFM32_USART_TIMECMP1_TSTART_GET(x)       (((x) >> 16) & 0x7)
/**  */
    #define EFM32_USART_TIMECMP1_TSTART_DISABLE      0x00000000
/**  */
    #define EFM32_USART_TIMECMP1_TSTART_TXEOF        0x00000001
/**  */
    #define EFM32_USART_TIMECMP1_TSTART_TXC          0x00000002
/**  */
    #define EFM32_USART_TIMECMP1_TSTART_RXACT        0x00000003
/**  */
    #define EFM32_USART_TIMECMP1_TSTART_RXEOF        0x00000004
  #define EFM32_USART_TIMECMP1_TSTOP(v)            ((EFM32_USART_TIMECMP1_TSTOP_##v) << 20)
  #define EFM32_USART_TIMECMP1_TSTOP_SET(x, v)     do { (x) = (((x) & ~0x700000) | ((EFM32_USART_TIMECMP1_TSTOP_##v) << 20)); } while(0)
  #define EFM32_USART_TIMECMP1_TSTOP_SETVAL(x, v)  do { (x) = (((x) & ~0x700000) | ((v) << 20)); } while(0)
  #define EFM32_USART_TIMECMP1_TSTOP_GET(x)        (((x) >> 20) & 0x7)
/**  */
    #define EFM32_USART_TIMECMP1_TSTOP_TCMP1         0x00000000
/**  */
    #define EFM32_USART_TIMECMP1_TSTOP_TXST          0x00000001
/**  */
    #define EFM32_USART_TIMECMP1_TSTOP_RXACT         0x00000002
/**  */
    #define EFM32_USART_TIMECMP1_TSTOP_RXACTN        0x00000003
  #define EFM32_USART_TIMECMP1_RESTARTEN           0x01000000

#define EFM32_USART_TIMECMP2_ADDR                    0x00000070
#define EFM32_USART_TIMECMP2_MASK                    0x017700ff
  #define EFM32_USART_TIMECMP2_TCMPVAL(v)          ((v) << 0)
  #define EFM32_USART_TIMECMP2_TCMPVAL_SET(x, v)   do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFM32_USART_TIMECMP2_TCMPVAL_GET(x)      (((x) >> 0) & 0xff)
  #define EFM32_USART_TIMECMP2_TSTART(v)           ((EFM32_USART_TIMECMP2_TSTART_##v) << 16)
  #define EFM32_USART_TIMECMP2_TSTART_SET(x, v)    do { (x) = (((x) & ~0x70000) | ((EFM32_USART_TIMECMP2_TSTART_##v) << 16)); } while(0)
  #define EFM32_USART_TIMECMP2_TSTART_SETVAL(x, v) do { (x) = (((x) & ~0x70000) | ((v) << 16)); } while(0)
  #define EFM32_USART_TIMECMP2_TSTART_GET(x)       (((x) >> 16) & 0x7)
/**  */
    #define EFM32_USART_TIMECMP2_TSTART_DISABLE      0x00000000
/**  */
    #define EFM32_USART_TIMECMP2_TSTART_TXEOF        0x00000001
/**  */
    #define EFM32_USART_TIMECMP2_TSTART_TXC          0x00000002
/**  */
    #define EFM32_USART_TIMECMP2_TSTART_RXACT        0x00000003
/**  */
    #define EFM32_USART_TIMECMP2_TSTART_RXEOF        0x00000004
  #define EFM32_USART_TIMECMP2_TSTOP(v)            ((EFM32_USART_TIMECMP2_TSTOP_##v) << 20)
  #define EFM32_USART_TIMECMP2_TSTOP_SET(x, v)     do { (x) = (((x) & ~0x700000) | ((EFM32_USART_TIMECMP2_TSTOP_##v) << 20)); } while(0)
  #define EFM32_USART_TIMECMP2_TSTOP_SETVAL(x, v)  do { (x) = (((x) & ~0x700000) | ((v) << 20)); } while(0)
  #define EFM32_USART_TIMECMP2_TSTOP_GET(x)        (((x) >> 20) & 0x7)
/**  */
    #define EFM32_USART_TIMECMP2_TSTOP_TCMP2         0x00000000
/**  */
    #define EFM32_USART_TIMECMP2_TSTOP_TXST          0x00000001
/**  */
    #define EFM32_USART_TIMECMP2_TSTOP_RXACT         0x00000002
/**  */
    #define EFM32_USART_TIMECMP2_TSTOP_RXACTN        0x00000003
  #define EFM32_USART_TIMECMP2_RESTARTEN           0x01000000

#define EFM32_USART_ROUTEPEN_ADDR                    0x00000074
#define EFM32_USART_ROUTEPEN_MASK                    0x0000003f
  #define EFM32_USART_ROUTEPEN_RXPEN               0x00000001
  #define EFM32_USART_ROUTEPEN_TXPEN               0x00000002
  #define EFM32_USART_ROUTEPEN_CSPEN               0x00000004
  #define EFM32_USART_ROUTEPEN_CLKPEN              0x00000008
  #define EFM32_USART_ROUTEPEN_CTSPEN              0x00000010
  #define EFM32_USART_ROUTEPEN_RTSPEN              0x00000020

#define EFM32_USART_ROUTELOC0_ADDR                   0x00000078
#define EFM32_USART_ROUTELOC0_MASK                   0x3f3f3f3f
  #define EFM32_USART_ROUTELOC0_RXLOC(v)           ((EFM32_USART_ROUTELOC0_RXLOC_##v) << 0)
  #define EFM32_USART_ROUTELOC0_RXLOC_SET(x, v)    do { (x) = (((x) & ~0x3f) | ((EFM32_USART_ROUTELOC0_RXLOC_##v) << 0)); } while(0)
  #define EFM32_USART_ROUTELOC0_RXLOC_SETVAL(x, v) do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define EFM32_USART_ROUTELOC0_RXLOC_GET(x)       (((x) >> 0) & 0x3f)
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC0         0x00000000
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC1         0x00000001
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC2         0x00000002
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC3         0x00000003
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC4         0x00000004
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC5         0x00000005
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC6         0x00000006
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC7         0x00000007
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC8         0x00000008
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC9         0x00000009
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC10        0x0000000a
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC11        0x0000000b
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC12        0x0000000c
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC13        0x0000000d
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC14        0x0000000e
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC15        0x0000000f
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC16        0x00000010
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC17        0x00000011
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC18        0x00000012
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC19        0x00000013
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC20        0x00000014
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC21        0x00000015
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC22        0x00000016
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC23        0x00000017
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC24        0x00000018
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC25        0x00000019
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC26        0x0000001a
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC27        0x0000001b
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC28        0x0000001c
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC29        0x0000001d
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC30        0x0000001e
/**  */
    #define EFM32_USART_ROUTELOC0_RXLOC_LOC31        0x0000001f
  #define EFM32_USART_ROUTELOC0_TXLOC(v)           ((EFM32_USART_ROUTELOC0_TXLOC_##v) << 8)
  #define EFM32_USART_ROUTELOC0_TXLOC_SET(x, v)    do { (x) = (((x) & ~0x3f00) | ((EFM32_USART_ROUTELOC0_TXLOC_##v) << 8)); } while(0)
  #define EFM32_USART_ROUTELOC0_TXLOC_SETVAL(x, v) do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define EFM32_USART_ROUTELOC0_TXLOC_GET(x)       (((x) >> 8) & 0x3f)
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC0         0x00000000
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC1         0x00000001
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC2         0x00000002
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC3         0x00000003
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC4         0x00000004
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC5         0x00000005
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC6         0x00000006
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC7         0x00000007
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC8         0x00000008
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC9         0x00000009
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC10        0x0000000a
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC11        0x0000000b
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC12        0x0000000c
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC13        0x0000000d
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC14        0x0000000e
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC15        0x0000000f
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC16        0x00000010
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC17        0x00000011
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC18        0x00000012
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC19        0x00000013
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC20        0x00000014
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC21        0x00000015
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC22        0x00000016
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC23        0x00000017
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC24        0x00000018
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC25        0x00000019
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC26        0x0000001a
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC27        0x0000001b
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC28        0x0000001c
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC29        0x0000001d
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC30        0x0000001e
/**  */
    #define EFM32_USART_ROUTELOC0_TXLOC_LOC31        0x0000001f
  #define EFM32_USART_ROUTELOC0_CSLOC(v)           ((EFM32_USART_ROUTELOC0_CSLOC_##v) << 16)
  #define EFM32_USART_ROUTELOC0_CSLOC_SET(x, v)    do { (x) = (((x) & ~0x3f0000) | ((EFM32_USART_ROUTELOC0_CSLOC_##v) << 16)); } while(0)
  #define EFM32_USART_ROUTELOC0_CSLOC_SETVAL(x, v) do { (x) = (((x) & ~0x3f0000) | ((v) << 16)); } while(0)
  #define EFM32_USART_ROUTELOC0_CSLOC_GET(x)       (((x) >> 16) & 0x3f)
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC0         0x00000000
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC1         0x00000001
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC2         0x00000002
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC3         0x00000003
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC4         0x00000004
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC5         0x00000005
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC6         0x00000006
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC7         0x00000007
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC8         0x00000008
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC9         0x00000009
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC10        0x0000000a
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC11        0x0000000b
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC12        0x0000000c
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC13        0x0000000d
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC14        0x0000000e
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC15        0x0000000f
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC16        0x00000010
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC17        0x00000011
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC18        0x00000012
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC19        0x00000013
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC20        0x00000014
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC21        0x00000015
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC22        0x00000016
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC23        0x00000017
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC24        0x00000018
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC25        0x00000019
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC26        0x0000001a
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC27        0x0000001b
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC28        0x0000001c
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC29        0x0000001d
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC30        0x0000001e
/**  */
    #define EFM32_USART_ROUTELOC0_CSLOC_LOC31        0x0000001f
  #define EFM32_USART_ROUTELOC0_CLKLOC(v)          ((EFM32_USART_ROUTELOC0_CLKLOC_##v) << 24)
  #define EFM32_USART_ROUTELOC0_CLKLOC_SET(x, v)   do { (x) = (((x) & ~0x3f000000) | ((EFM32_USART_ROUTELOC0_CLKLOC_##v) << 24)); } while(0)
  #define EFM32_USART_ROUTELOC0_CLKLOC_SETVAL(x, v) do { (x) = (((x) & ~0x3f000000) | ((v) << 24)); } while(0)
  #define EFM32_USART_ROUTELOC0_CLKLOC_GET(x)      (((x) >> 24) & 0x3f)
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC0        0x00000000
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC1        0x00000001
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC2        0x00000002
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC3        0x00000003
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC4        0x00000004
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC5        0x00000005
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC6        0x00000006
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC7        0x00000007
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC8        0x00000008
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC9        0x00000009
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC10       0x0000000a
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC11       0x0000000b
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC12       0x0000000c
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC13       0x0000000d
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC14       0x0000000e
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC15       0x0000000f
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC16       0x00000010
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC17       0x00000011
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC18       0x00000012
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC19       0x00000013
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC20       0x00000014
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC21       0x00000015
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC22       0x00000016
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC23       0x00000017
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC24       0x00000018
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC25       0x00000019
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC26       0x0000001a
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC27       0x0000001b
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC28       0x0000001c
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC29       0x0000001d
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC30       0x0000001e
/**  */
    #define EFM32_USART_ROUTELOC0_CLKLOC_LOC31       0x0000001f

#define EFM32_USART_ROUTELOC1_ADDR                   0x0000007c
#define EFM32_USART_ROUTELOC1_MASK                   0x00003f3f
  #define EFM32_USART_ROUTELOC1_CTSLOC(v)          ((EFM32_USART_ROUTELOC1_CTSLOC_##v) << 0)
  #define EFM32_USART_ROUTELOC1_CTSLOC_SET(x, v)   do { (x) = (((x) & ~0x3f) | ((EFM32_USART_ROUTELOC1_CTSLOC_##v) << 0)); } while(0)
  #define EFM32_USART_ROUTELOC1_CTSLOC_SETVAL(x, v) do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define EFM32_USART_ROUTELOC1_CTSLOC_GET(x)      (((x) >> 0) & 0x3f)
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC0        0x00000000
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC1        0x00000001
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC2        0x00000002
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC3        0x00000003
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC4        0x00000004
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC5        0x00000005
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC6        0x00000006
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC7        0x00000007
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC8        0x00000008
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC9        0x00000009
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC10       0x0000000a
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC11       0x0000000b
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC12       0x0000000c
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC13       0x0000000d
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC14       0x0000000e
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC15       0x0000000f
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC16       0x00000010
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC17       0x00000011
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC18       0x00000012
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC19       0x00000013
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC20       0x00000014
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC21       0x00000015
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC22       0x00000016
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC23       0x00000017
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC24       0x00000018
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC25       0x00000019
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC26       0x0000001a
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC27       0x0000001b
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC28       0x0000001c
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC29       0x0000001d
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC30       0x0000001e
/**  */
    #define EFM32_USART_ROUTELOC1_CTSLOC_LOC31       0x0000001f
  #define EFM32_USART_ROUTELOC1_RTSLOC(v)          ((EFM32_USART_ROUTELOC1_RTSLOC_##v) << 8)
  #define EFM32_USART_ROUTELOC1_RTSLOC_SET(x, v)   do { (x) = (((x) & ~0x3f00) | ((EFM32_USART_ROUTELOC1_RTSLOC_##v) << 8)); } while(0)
  #define EFM32_USART_ROUTELOC1_RTSLOC_SETVAL(x, v) do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define EFM32_USART_ROUTELOC1_RTSLOC_GET(x)      (((x) >> 8) & 0x3f)
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC0        0x00000000
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC1        0x00000001
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC2        0x00000002
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC3        0x00000003
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC4        0x00000004
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC5        0x00000005
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC6        0x00000006
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC7        0x00000007
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC8        0x00000008
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC9        0x00000009
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC10       0x0000000a
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC11       0x0000000b
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC12       0x0000000c
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC13       0x0000000d
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC14       0x0000000e
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC15       0x0000000f
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC16       0x00000010
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC17       0x00000011
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC18       0x00000012
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC19       0x00000013
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC20       0x00000014
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC21       0x00000015
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC22       0x00000016
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC23       0x00000017
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC24       0x00000018
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC25       0x00000019
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC26       0x0000001a
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC27       0x0000001b
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC28       0x0000001c
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC29       0x0000001d
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC30       0x0000001e
/**  */
    #define EFM32_USART_ROUTELOC1_RTSLOC_LOC31       0x0000001f

#define EFM32_USART_TEST_ADDR                        0x00000080
#define EFM32_USART_TEST_MASK                        0x00000003
  #define EFM32_USART_TEST_GPIODELAYSTABLE         0x00000001
  #define EFM32_USART_TEST_GPIODELAYXOR            0x00000002

#endif

