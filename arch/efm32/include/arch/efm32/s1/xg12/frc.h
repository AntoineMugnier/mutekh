/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_shift=1                 \
     cdefs_sfx_field_shift=_IDX
*/

#ifndef _EFR32_FRC_BFGEN_DEFS_
#define _EFR32_FRC_BFGEN_DEFS_

#define EFR32_FRC_STATUS_ADDR                        0x00000000
#define EFR32_FRC_STATUS_MASK                        0x000003ff
  #define EFR32_FRC_STATUS_ACTIVETXFCD             0x00000001
  #define EFR32_FRC_STATUS_ACTIVETXFCD_IDX         0
  #define EFR32_FRC_STATUS_ACTIVERXFCD             0x00000002
  #define EFR32_FRC_STATUS_ACTIVERXFCD_IDX         1
  #define EFR32_FRC_STATUS_RXABORTINPROGRESS       0x00000004
  #define EFR32_FRC_STATUS_RXABORTINPROGRESS_IDX   2
  #define EFR32_FRC_STATUS_SNIFFDFRAME             0x00000008
  #define EFR32_FRC_STATUS_SNIFFDFRAME_IDX         3
  #define EFR32_FRC_STATUS_SNIFFDCOUNT_IDX         4
  #define EFR32_FRC_STATUS_SNIFFDCOUNT(v)          ((v) << 4)
  #define EFR32_FRC_STATUS_SNIFFDCOUNT_SET(x, v)   do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define EFR32_FRC_STATUS_SNIFFDCOUNT_GET(x)      (((x) >> 4) & 0xf)
  #define EFR32_FRC_STATUS_RXRAWBLOCKED            0x00000100
  #define EFR32_FRC_STATUS_RXRAWBLOCKED_IDX        8
  #define EFR32_FRC_STATUS_FRAMEOK                 0x00000200
  #define EFR32_FRC_STATUS_FRAMEOK_IDX             9

/** Frame length control @multiple */
#define EFR32_FRC_DFLCTRL_ADDR                       0x00000004
#define EFR32_FRC_DFLCTRL_MASK                       0x001fff7f
  #define EFR32_FRC_DFLCTRL_DFLMODE_IDX            0
  #define EFR32_FRC_DFLCTRL_DFLMODE(v)             ((EFR32_FRC_DFLCTRL_DFLMODE_##v) << 0)
  #define EFR32_FRC_DFLCTRL_DFLMODE_SET(x, v)      do { (x) = (((x) & ~0x7) | ((EFR32_FRC_DFLCTRL_DFLMODE_##v) << 0)); } while(0)
  #define EFR32_FRC_DFLCTRL_DFLMODE_GET(x)         (((x) >> 0) & 0x7)
/**  */
    #define EFR32_FRC_DFLCTRL_DFLMODE_DISABLE        0x00000000
/** This add one byte for variable length field */
    #define EFR32_FRC_DFLCTRL_DFLMODE_SINGLEBYTE     0x00000001
/**  */
    #define EFR32_FRC_DFLCTRL_DFLMODE_SINGLEBYTEMSB  0x00000002
/**  */
    #define EFR32_FRC_DFLCTRL_DFLMODE_DUALBYTELSBFIRST 0x00000003
/**  */
    #define EFR32_FRC_DFLCTRL_DFLMODE_DUALBYTEMSBFIRST 0x00000004
/**  */
    #define EFR32_FRC_DFLCTRL_DFLMODE_INFINITE       0x00000005
/**  */
    #define EFR32_FRC_DFLCTRL_DFLMODE_BLOCKERROR     0x00000006
/** This bit selects the transmission/reception order for the bits of the
   variable length field @multiple */
  #define EFR32_FRC_DFLCTRL_DFLBITORDER            0x00000008
  #define EFR32_FRC_DFLCTRL_DFLBITORDER_IDX        3
/** Define the location of the least significant bit of the variable lenght
   field. @multiple */
  #define EFR32_FRC_DFLCTRL_DFLSHIFT_IDX           4
  #define EFR32_FRC_DFLCTRL_DFLSHIFT(v)            ((v) << 4)
  #define EFR32_FRC_DFLCTRL_DFLSHIFT_SET(x, v)     do { (x) = (((x) & ~0x70) | ((v) << 4)); } while(0)
  #define EFR32_FRC_DFLCTRL_DFLSHIFT_GET(x)        (((x) >> 4) & 0x7)
/** Define the location in bytes of the variable lenght field in payload.
   @multiple */
  #define EFR32_FRC_DFLCTRL_DFLOFFSET_IDX          8
  #define EFR32_FRC_DFLCTRL_DFLOFFSET(v)           ((v) << 8)
  #define EFR32_FRC_DFLCTRL_DFLOFFSET_SET(x, v)    do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFR32_FRC_DFLCTRL_DFLOFFSET_GET(x)       (((x) >> 8) & 0xf)
/** Defines the size of the variable lenght field in bits. @multiple */
  #define EFR32_FRC_DFLCTRL_DFLBITS_IDX            12
  #define EFR32_FRC_DFLCTRL_DFLBITS(v)             ((v) << 12)
  #define EFR32_FRC_DFLCTRL_DFLBITS_SET(x, v)      do { (x) = (((x) & ~0xf000) | ((v) << 12)); } while(0)
  #define EFR32_FRC_DFLCTRL_DFLBITS_GET(x)         (((x) >> 12) & 0xf)
  #define EFR32_FRC_DFLCTRL_MINLENGTH_IDX          16
  #define EFR32_FRC_DFLCTRL_MINLENGTH(v)           ((v) << 16)
  #define EFR32_FRC_DFLCTRL_MINLENGTH_SET(x, v)    do { (x) = (((x) & ~0xf0000) | ((v) << 16)); } while(0)
  #define EFR32_FRC_DFLCTRL_MINLENGTH_GET(x)       (((x) >> 16) & 0xf)
/** Set this bit to include CRC bytes to variable length field @multiple */
  #define EFR32_FRC_DFLCTRL_DFLINCLUDECRC          0x00100000
  #define EFR32_FRC_DFLCTRL_DFLINCLUDECRC_IDX      20

#define EFR32_FRC_MAXLENGTH_ADDR                     0x00000008
#define EFR32_FRC_MAXLENGTH_MASK                     0x00000fff
  #define EFR32_FRC_MAXLENGTH_MAXLENGTH_IDX        0
  #define EFR32_FRC_MAXLENGTH_MAXLENGTH(v)         ((v) << 0)
  #define EFR32_FRC_MAXLENGTH_MAXLENGTH_SET(x, v)  do { (x) = (((x) & ~0xfff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_MAXLENGTH_MAXLENGTH_GET(x)     (((x) >> 0) & 0xfff)

#define EFR32_FRC_ADDRFILTCTRL_ADDR                  0x0000000c
#define EFR32_FRC_ADDRFILTCTRL_MASK                  0x0000ff07
/** Enable filtering on address matching @multiple */
  #define EFR32_FRC_ADDRFILTCTRL_EN                0x00000001
  #define EFR32_FRC_ADDRFILTCTRL_EN_IDX            0
  #define EFR32_FRC_ADDRFILTCTRL_BRDCST00EN        0x00000002
  #define EFR32_FRC_ADDRFILTCTRL_BRDCST00EN_IDX    1
  #define EFR32_FRC_ADDRFILTCTRL_BRDCSTFFEN        0x00000004
  #define EFR32_FRC_ADDRFILTCTRL_BRDCSTFFEN_IDX    2
/** MSB bits of address filter @multiple */
  #define EFR32_FRC_ADDRFILTCTRL_ADDRESS_IDX       8
  #define EFR32_FRC_ADDRFILTCTRL_ADDRESS(v)        ((v) << 8)
  #define EFR32_FRC_ADDRFILTCTRL_ADDRESS_SET(x, v) do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define EFR32_FRC_ADDRFILTCTRL_ADDRESS_GET(x)    (((x) >> 8) & 0xff)

#define EFR32_FRC_DATABUFFER_ADDR                    0x00000010
#define EFR32_FRC_DATABUFFER_MASK                    0x000000ff
  #define EFR32_FRC_DATABUFFER_DATABUFFER_IDX      0
  #define EFR32_FRC_DATABUFFER_DATABUFFER(v)       ((v) << 0)
  #define EFR32_FRC_DATABUFFER_DATABUFFER_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_DATABUFFER_DATABUFFER_GET(x)   (((x) >> 0) & 0xff)

#define EFR32_FRC_WCNT_ADDR                          0x00000014
#define EFR32_FRC_WCNT_MASK                          0x00000fff
  #define EFR32_FRC_WCNT_WCNT_IDX                  0
  #define EFR32_FRC_WCNT_WCNT(v)                   ((v) << 0)
  #define EFR32_FRC_WCNT_WCNT_SET(x, v)            do { (x) = (((x) & ~0xfff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_WCNT_WCNT_GET(x)               (((x) >> 0) & 0xfff)

#define EFR32_FRC_WCNTCMP0_ADDR                      0x00000018
#define EFR32_FRC_WCNTCMP0_MASK                      0x00000fff
/** Used in fixed length mode. Define the payload size minus one. @multiple */
  #define EFR32_FRC_WCNTCMP0_FRAMELENGTH_IDX       0
  #define EFR32_FRC_WCNTCMP0_FRAMELENGTH(v)        ((v) << 0)
  #define EFR32_FRC_WCNTCMP0_FRAMELENGTH_SET(x, v) do { (x) = (((x) & ~0xfff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_WCNTCMP0_FRAMELENGTH_GET(x)    (((x) >> 0) & 0xfff)

#define EFR32_FRC_WCNTCMP1_ADDR                      0x0000001c
#define EFR32_FRC_WCNTCMP1_MASK                      0x00000fff
/** Defines the position in bytes of the length field @multiple */
  #define EFR32_FRC_WCNTCMP1_LENGTHFIELDLOC_IDX    0
  #define EFR32_FRC_WCNTCMP1_LENGTHFIELDLOC(v)     ((v) << 0)
  #define EFR32_FRC_WCNTCMP1_LENGTHFIELDLOC_SET(x, v) do { (x) = (((x) & ~0xfff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_WCNTCMP1_LENGTHFIELDLOC_GET(x) (((x) >> 0) & 0xfff)

#define EFR32_FRC_WCNTCMP2_ADDR                      0x00000020
#define EFR32_FRC_WCNTCMP2_MASK                      0x00000fff
/** Defines the position in bytes of the address filter field @multiple */
  #define EFR32_FRC_WCNTCMP2_ADDRFIELDLOC_IDX      0
  #define EFR32_FRC_WCNTCMP2_ADDRFIELDLOC(v)       ((v) << 0)
  #define EFR32_FRC_WCNTCMP2_ADDRFIELDLOC_SET(x, v) do { (x) = (((x) & ~0xfff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_WCNTCMP2_ADDRFIELDLOC_GET(x)   (((x) >> 0) & 0xfff)

#define EFR32_FRC_CMD_ADDR                           0x00000024
#define EFR32_FRC_CMD_MASK                           0x00001fff
  #define EFR32_FRC_CMD_RXABORT                    0x00000001
  #define EFR32_FRC_CMD_RXABORT_IDX                0
  #define EFR32_FRC_CMD_FRAMEDETRESUME             0x00000002
  #define EFR32_FRC_CMD_FRAMEDETRESUME_IDX         1
  #define EFR32_FRC_CMD_INTERLEAVEWRITERESUME      0x00000004
  #define EFR32_FRC_CMD_INTERLEAVEWRITERESUME_IDX  2
  #define EFR32_FRC_CMD_INTERLEAVEREADRESUME       0x00000008
  #define EFR32_FRC_CMD_INTERLEAVEREADRESUME_IDX   3
  #define EFR32_FRC_CMD_CONVRESUME                 0x00000010
  #define EFR32_FRC_CMD_CONVRESUME_IDX             4
  #define EFR32_FRC_CMD_CONVTERMINATE              0x00000020
  #define EFR32_FRC_CMD_CONVTERMINATE_IDX          5
  #define EFR32_FRC_CMD_TXSUBFRAMERESUME           0x00000040
  #define EFR32_FRC_CMD_TXSUBFRAMERESUME_IDX       6
  #define EFR32_FRC_CMD_INTERLEAVEINIT             0x00000080
  #define EFR32_FRC_CMD_INTERLEAVEINIT_IDX         7
  #define EFR32_FRC_CMD_INTERLEAVECNTCLEAR         0x00000100
  #define EFR32_FRC_CMD_INTERLEAVECNTCLEAR_IDX     8
  #define EFR32_FRC_CMD_CONVINIT                   0x00000200
  #define EFR32_FRC_CMD_CONVINIT_IDX               9
  #define EFR32_FRC_CMD_BLOCKINIT                  0x00000400
  #define EFR32_FRC_CMD_BLOCKINIT_IDX              10
  #define EFR32_FRC_CMD_STATEINIT                  0x00000800
  #define EFR32_FRC_CMD_STATEINIT_IDX              11
  #define EFR32_FRC_CMD_RXRAWUNBLOCK               0x00001000
  #define EFR32_FRC_CMD_RXRAWUNBLOCK_IDX           12

#define EFR32_FRC_WHITECTRL_ADDR                     0x00000028
#define EFR32_FRC_WHITECTRL_MASK                     0x00001f7f
  #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_IDX      0
  #define EFR32_FRC_WHITECTRL_FEEDBACKSEL(v)       ((EFR32_FRC_WHITECTRL_FEEDBACKSEL_##v) << 0)
  #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_SET(x, v) do { (x) = (((x) & ~0x1f) | ((EFR32_FRC_WHITECTRL_FEEDBACKSEL_##v) << 0)); } while(0)
  #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_GET(x)   (((x) >> 0) & 0x1f)
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT0     0x00000000
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT1     0x00000001
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT2     0x00000002
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT3     0x00000003
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT4     0x00000004
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT5     0x00000005
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT6     0x00000006
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT7     0x00000007
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT8     0x00000008
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT9     0x00000009
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT10    0x0000000a
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT11    0x0000000b
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT12    0x0000000c
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT13    0x0000000d
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT14    0x0000000e
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_BIT15    0x0000000f
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_INPUT    0x00000010
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_ZERO     0x00000011
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_ONE      0x00000012
/**  */
    #define EFR32_FRC_WHITECTRL_FEEDBACKSEL_TXLASTWORD 0x00000013
  #define EFR32_FRC_WHITECTRL_XORFEEDBACK_IDX      5
  #define EFR32_FRC_WHITECTRL_XORFEEDBACK(v)       ((EFR32_FRC_WHITECTRL_XORFEEDBACK_##v) << 5)
  #define EFR32_FRC_WHITECTRL_XORFEEDBACK_SET(x, v) do { (x) = (((x) & ~0x60) | ((EFR32_FRC_WHITECTRL_XORFEEDBACK_##v) << 5)); } while(0)
  #define EFR32_FRC_WHITECTRL_XORFEEDBACK_GET(x)   (((x) >> 5) & 0x3)
/**  */
    #define EFR32_FRC_WHITECTRL_XORFEEDBACK_DIRECT   0x00000000
/**  */
    #define EFR32_FRC_WHITECTRL_XORFEEDBACK_XOR      0x00000001
/**  */
    #define EFR32_FRC_WHITECTRL_XORFEEDBACK_ZERO     0x00000002
  #define EFR32_FRC_WHITECTRL_SHROUTPUTSEL_IDX     8
  #define EFR32_FRC_WHITECTRL_SHROUTPUTSEL(v)      ((v) << 8)
  #define EFR32_FRC_WHITECTRL_SHROUTPUTSEL_SET(x, v) do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFR32_FRC_WHITECTRL_SHROUTPUTSEL_GET(x)  (((x) >> 8) & 0xf)
  #define EFR32_FRC_WHITECTRL_BLOCKERRORCORRECT    0x00001000
  #define EFR32_FRC_WHITECTRL_BLOCKERRORCORRECT_IDX 12

#define EFR32_FRC_WHITEPOLY_ADDR                     0x0000002c
#define EFR32_FRC_WHITEPOLY_MASK                     0x0000ffff
  #define EFR32_FRC_WHITEPOLY_POLY_IDX             0
  #define EFR32_FRC_WHITEPOLY_POLY(v)              ((v) << 0)
  #define EFR32_FRC_WHITEPOLY_POLY_SET(x, v)       do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_WHITEPOLY_POLY_GET(x)          (((x) >> 0) & 0xffff)

#define EFR32_FRC_WHITEINIT_ADDR                     0x00000030
#define EFR32_FRC_WHITEINIT_MASK                     0x0000ffff
  #define EFR32_FRC_WHITEINIT_WHITEINIT_IDX        0
  #define EFR32_FRC_WHITEINIT_WHITEINIT(v)         ((v) << 0)
  #define EFR32_FRC_WHITEINIT_WHITEINIT_SET(x, v)  do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_WHITEINIT_WHITEINIT_GET(x)     (((x) >> 0) & 0xffff)

#define EFR32_FRC_FECCTRL_ADDR                       0x00000034
#define EFR32_FRC_FECCTRL_MASK                       0x003ffff7
  #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_IDX     0
  #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE(v)      ((EFR32_FRC_FECCTRL_BLOCKWHITEMODE_##v) << 0)
  #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_SET(x, v) do { (x) = (((x) & ~0x7) | ((EFR32_FRC_FECCTRL_BLOCKWHITEMODE_##v) << 0)); } while(0)
  #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_GET(x)  (((x) >> 0) & 0x7)
/**  */
    #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_DIRECT  0x00000000
/**  */
    #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_WHITE   0x00000001
/**  */
    #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_BYTEWHITE 0x00000002
/**  */
    #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_INTERLEAVEDWHITE0 0x00000003
/**  */
    #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_INTERLEAVEDWHITE1 0x00000004
/**  */
    #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_BLOCKCODEINSERT 0x00000005
/**  */
    #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_BLOCKCODEREPLACE 0x00000006
/**  */
    #define EFR32_FRC_FECCTRL_BLOCKWHITEMODE_BLOCKLOOKUP 0x00000007
  #define EFR32_FRC_FECCTRL_CONVMODE_IDX           4
  #define EFR32_FRC_FECCTRL_CONVMODE(v)            ((EFR32_FRC_FECCTRL_CONVMODE_##v) << 4)
  #define EFR32_FRC_FECCTRL_CONVMODE_SET(x, v)     do { (x) = (((x) & ~0x30) | ((EFR32_FRC_FECCTRL_CONVMODE_##v) << 4)); } while(0)
  #define EFR32_FRC_FECCTRL_CONVMODE_GET(x)        (((x) >> 4) & 0x3)
/**  */
    #define EFR32_FRC_FECCTRL_CONVMODE_DISABLE       0x00000000
/**  */
    #define EFR32_FRC_FECCTRL_CONVMODE_CONVOLUTIONAL 0x00000001
/**  */
    #define EFR32_FRC_FECCTRL_CONVMODE_REPEAT        0x00000002
  #define EFR32_FRC_FECCTRL_CONVDECODEMODE         0x00000040
  #define EFR32_FRC_FECCTRL_CONVDECODEMODE_IDX     6
  #define EFR32_FRC_FECCTRL_CONVTRACEBACKDISABLE   0x00000080
  #define EFR32_FRC_FECCTRL_CONVTRACEBACKDISABLE_IDX 7
  #define EFR32_FRC_FECCTRL_CONVINV_IDX            8
  #define EFR32_FRC_FECCTRL_CONVINV(v)             ((v) << 8)
  #define EFR32_FRC_FECCTRL_CONVINV_SET(x, v)      do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define EFR32_FRC_FECCTRL_CONVINV_GET(x)         (((x) >> 8) & 0x3)
  #define EFR32_FRC_FECCTRL_INTERLEAVEMODE_IDX     10
  #define EFR32_FRC_FECCTRL_INTERLEAVEMODE(v)      ((EFR32_FRC_FECCTRL_INTERLEAVEMODE_##v) << 10)
  #define EFR32_FRC_FECCTRL_INTERLEAVEMODE_SET(x, v) do { (x) = (((x) & ~0xc00) | ((EFR32_FRC_FECCTRL_INTERLEAVEMODE_##v) << 10)); } while(0)
  #define EFR32_FRC_FECCTRL_INTERLEAVEMODE_GET(x)  (((x) >> 10) & 0x3)
/**  */
    #define EFR32_FRC_FECCTRL_INTERLEAVEMODE_DISABLE 0x00000000
/**  */
    #define EFR32_FRC_FECCTRL_INTERLEAVEMODE_ENABLE  0x00000001
/**  */
    #define EFR32_FRC_FECCTRL_INTERLEAVEMODE_RXBUFFER 0x00000002
/**  */
    #define EFR32_FRC_FECCTRL_INTERLEAVEMODE_RXTXBUFFER 0x00000003
  #define EFR32_FRC_FECCTRL_INTERLEAVEFIRSTINDEX_IDX 12
  #define EFR32_FRC_FECCTRL_INTERLEAVEFIRSTINDEX(v) ((v) << 12)
  #define EFR32_FRC_FECCTRL_INTERLEAVEFIRSTINDEX_SET(x, v) do { (x) = (((x) & ~0xf000) | ((v) << 12)); } while(0)
  #define EFR32_FRC_FECCTRL_INTERLEAVEFIRSTINDEX_GET(x) (((x) >> 12) & 0xf)
  #define EFR32_FRC_FECCTRL_INTERLEAVEWIDTH        0x00010000
  #define EFR32_FRC_FECCTRL_INTERLEAVEWIDTH_IDX    16
  #define EFR32_FRC_FECCTRL_CONVBUSLOCK            0x00020000
  #define EFR32_FRC_FECCTRL_CONVBUSLOCK_IDX        17
  #define EFR32_FRC_FECCTRL_CONVSUBFRAMETERMINATE  0x00040000
  #define EFR32_FRC_FECCTRL_CONVSUBFRAMETERMINATE_IDX 18
  #define EFR32_FRC_FECCTRL_SINGLEBLOCK            0x00080000
  #define EFR32_FRC_FECCTRL_SINGLEBLOCK_IDX        19
  #define EFR32_FRC_FECCTRL_FORCE2FSK              0x00100000
  #define EFR32_FRC_FECCTRL_FORCE2FSK_IDX          20
  #define EFR32_FRC_FECCTRL_CONVHARDERROR          0x00200000
  #define EFR32_FRC_FECCTRL_CONVHARDERROR_IDX      21

#define EFR32_FRC_BLOCKRAMADDR_ADDR                  0x00000038
#define EFR32_FRC_BLOCKRAMADDR_MASK                  0x0007fffc
  #define EFR32_FRC_BLOCKRAMADDR_BLOCKRAMADDR_IDX  2
  #define EFR32_FRC_BLOCKRAMADDR_BLOCKRAMADDR(v)   ((v) << 2)
  #define EFR32_FRC_BLOCKRAMADDR_BLOCKRAMADDR_SET(x, v) do { (x) = (((x) & ~0x7fffc) | ((v) << 2)); } while(0)
  #define EFR32_FRC_BLOCKRAMADDR_BLOCKRAMADDR_GET(x) (((x) >> 2) & 0x1ffff)

#define EFR32_FRC_CONVRAMADDR_ADDR                   0x0000003c
#define EFR32_FRC_CONVRAMADDR_MASK                   0x0007fffc
  #define EFR32_FRC_CONVRAMADDR_CONVRAMADDR_IDX    2
  #define EFR32_FRC_CONVRAMADDR_CONVRAMADDR(v)     ((v) << 2)
  #define EFR32_FRC_CONVRAMADDR_CONVRAMADDR_SET(x, v) do { (x) = (((x) & ~0x7fffc) | ((v) << 2)); } while(0)
  #define EFR32_FRC_CONVRAMADDR_CONVRAMADDR_GET(x) (((x) >> 2) & 0x1ffff)

#define EFR32_FRC_CTRL_ADDR                          0x00000040
#define EFR32_FRC_CTRL_MASK                          0x00033ff7
  #define EFR32_FRC_CTRL_RANDOMTX                  0x00000001
  #define EFR32_FRC_CTRL_RANDOMTX_IDX              0
  #define EFR32_FRC_CTRL_UARTMODE                  0x00000002
  #define EFR32_FRC_CTRL_UARTMODE_IDX              1
/** This bit selects the transmission/reception order for the bits in all data
   fields @multiple */
  #define EFR32_FRC_CTRL_BITORDER_IDX              2
  #define EFR32_FRC_CTRL_BITORDER(v)               ((EFR32_FRC_CTRL_BITORDER_##v) << 2)
  #define EFR32_FRC_CTRL_BITORDER_SET(x, v)        do { (x) = (((x) & ~0x4) | ((EFR32_FRC_CTRL_BITORDER_##v) << 2)); } while(0)
  #define EFR32_FRC_CTRL_BITORDER_GET(x)           (((x) >> 2) & 0x1)
    #define EFR32_FRC_CTRL_BITORDER_LSB              0x00000000
    #define EFR32_FRC_CTRL_BITORDER_MSB              0x00000001
  #define EFR32_FRC_CTRL_TXFCDMODE_IDX             4
  #define EFR32_FRC_CTRL_TXFCDMODE(v)              ((EFR32_FRC_CTRL_TXFCDMODE_##v) << 4)
  #define EFR32_FRC_CTRL_TXFCDMODE_SET(x, v)       do { (x) = (((x) & ~0x30) | ((EFR32_FRC_CTRL_TXFCDMODE_##v) << 4)); } while(0)
  #define EFR32_FRC_CTRL_TXFCDMODE_GET(x)          (((x) >> 4) & 0x3)
/**  */
    #define EFR32_FRC_CTRL_TXFCDMODE_FCDMODE0        0x00000000
/**  */
    #define EFR32_FRC_CTRL_TXFCDMODE_FCDMODE1        0x00000001
/**  */
    #define EFR32_FRC_CTRL_TXFCDMODE_FCDMODE2        0x00000002
/**  */
    #define EFR32_FRC_CTRL_TXFCDMODE_FCDMODE3        0x00000003
  #define EFR32_FRC_CTRL_RXFCDMODE_IDX             6
  #define EFR32_FRC_CTRL_RXFCDMODE(v)              ((EFR32_FRC_CTRL_RXFCDMODE_##v) << 6)
  #define EFR32_FRC_CTRL_RXFCDMODE_SET(x, v)       do { (x) = (((x) & ~0xc0) | ((EFR32_FRC_CTRL_RXFCDMODE_##v) << 6)); } while(0)
  #define EFR32_FRC_CTRL_RXFCDMODE_GET(x)          (((x) >> 6) & 0x3)
/**  */
    #define EFR32_FRC_CTRL_RXFCDMODE_FCDMODE0        0x00000000
/**  */
    #define EFR32_FRC_CTRL_RXFCDMODE_FCDMODE1        0x00000001
/**  */
    #define EFR32_FRC_CTRL_RXFCDMODE_FCDMODE2        0x00000002
/**  */
    #define EFR32_FRC_CTRL_RXFCDMODE_FCDMODE3        0x00000003
/** Number of bits minus one per word. @multiple */
  #define EFR32_FRC_CTRL_BITSPERWORD_IDX           8
  #define EFR32_FRC_CTRL_BITSPERWORD(v)            ((v) << 8)
  #define EFR32_FRC_CTRL_BITSPERWORD_SET(x, v)     do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define EFR32_FRC_CTRL_BITSPERWORD_GET(x)        (((x) >> 8) & 0x7)
  #define EFR32_FRC_CTRL_RATESELECT_IDX            11
  #define EFR32_FRC_CTRL_RATESELECT(v)             ((v) << 11)
  #define EFR32_FRC_CTRL_RATESELECT_SET(x, v)      do { (x) = (((x) & ~0x1800) | ((v) << 11)); } while(0)
  #define EFR32_FRC_CTRL_RATESELECT_GET(x)         (((x) >> 11) & 0x3)
  #define EFR32_FRC_CTRL_TXPREFETCH                0x00002000
  #define EFR32_FRC_CTRL_TXPREFETCH_IDX            13
  #define EFR32_FRC_CTRL_SEQHANDSHAKE              0x00010000
  #define EFR32_FRC_CTRL_SEQHANDSHAKE_IDX          16
  #define EFR32_FRC_CTRL_PRBSTEST                  0x00020000
  #define EFR32_FRC_CTRL_PRBSTEST_IDX              17

#define EFR32_FRC_RXCTRL_ADDR                        0x00000044
#define EFR32_FRC_RXCTRL_MASK                        0x0000007f
  #define EFR32_FRC_RXCTRL_STORECRC                0x00000001
  #define EFR32_FRC_RXCTRL_STORECRC_IDX            0
  #define EFR32_FRC_RXCTRL_ACCEPTCRCERRORS         0x00000002
  #define EFR32_FRC_RXCTRL_ACCEPTCRCERRORS_IDX     1
  #define EFR32_FRC_RXCTRL_ACCEPTBLOCKERRORS       0x00000004
  #define EFR32_FRC_RXCTRL_ACCEPTBLOCKERRORS_IDX   2
  #define EFR32_FRC_RXCTRL_TRACKABFRAME            0x00000008
  #define EFR32_FRC_RXCTRL_TRACKABFRAME_IDX        3
  #define EFR32_FRC_RXCTRL_BUFCLEAR                0x00000010
  #define EFR32_FRC_RXCTRL_BUFCLEAR_IDX            4
  #define EFR32_FRC_RXCTRL_BUFRESTOREFRAMEERROR    0x00000020
  #define EFR32_FRC_RXCTRL_BUFRESTOREFRAMEERROR_IDX 5
  #define EFR32_FRC_RXCTRL_BUFRESTORERXABORTED     0x00000040
  #define EFR32_FRC_RXCTRL_BUFRESTORERXABORTED_IDX 6

#define EFR32_FRC_TRAILTXDATACTRL_ADDR               0x00000048
#define EFR32_FRC_TRAILTXDATACTRL_MASK               0x00000fff
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATA_IDX 0
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATA(v) ((v) << 0)
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATA_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATA_GET(x) (((x) >> 0) & 0xff)
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATACNT_IDX 8
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATACNT(v) ((v) << 8)
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATACNT_SET(x, v) do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATACNT_GET(x) (((x) >> 8) & 0x7)
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATAFORCE 0x00000800
  #define EFR32_FRC_TRAILTXDATACTRL_TRAILTXDATAFORCE_IDX 11

#define EFR32_FRC_TRAILRXDATA_ADDR                   0x0000004c
#define EFR32_FRC_TRAILRXDATA_MASK                   0x0000003f
/** Add a 1 byte RSSI value to the input data @multiple */
  #define EFR32_FRC_TRAILRXDATA_RSSI               0x00000001
  #define EFR32_FRC_TRAILRXDATA_RSSI_IDX           0
/** Add a 1 byte CRC valid info to the input data @multiple */
  #define EFR32_FRC_TRAILRXDATA_CRCOK              0x00000002
  #define EFR32_FRC_TRAILRXDATA_CRCOK_IDX          1
/** Add the CC0 base capture value to the input data @multiple */
  #define EFR32_FRC_TRAILRXDATA_PROTIMERCC0BASE    0x00000004
  #define EFR32_FRC_TRAILRXDATA_PROTIMERCC0BASE_IDX 2
/** Add the CC0 wrap lsb (bits 15 downto 0) capture value to the input data
   @multiple */
  #define EFR32_FRC_TRAILRXDATA_PROTIMERCC0WRAPL   0x00000008
  #define EFR32_FRC_TRAILRXDATA_PROTIMERCC0WRAPL_IDX 3
/** Add the CC0 wrap msb (bits 31 downto 16) capture value to the input data
   @multiple */
  #define EFR32_FRC_TRAILRXDATA_PROTIMERCC0WRAPH   0x00000010
  #define EFR32_FRC_TRAILRXDATA_PROTIMERCC0WRAPH_IDX 4
/** Add a 4 bytes RTC timestamp to the input data @multiple */
  #define EFR32_FRC_TRAILRXDATA_RTCSTAMP           0x00000020
  #define EFR32_FRC_TRAILRXDATA_RTCSTAMP_IDX       5

#define EFR32_FRC_SCNT_ADDR                          0x00000050
#define EFR32_FRC_SCNT_MASK                          0x000000ff
  #define EFR32_FRC_SCNT_SCNT_IDX                  0
  #define EFR32_FRC_SCNT_SCNT(v)                   ((v) << 0)
  #define EFR32_FRC_SCNT_SCNT_SET(x, v)            do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_SCNT_SCNT_GET(x)               (((x) >> 0) & 0xff)

#define EFR32_FRC_CONVGENERATOR_ADDR                 0x00000054
#define EFR32_FRC_CONVGENERATOR_MASK                 0x00037f7f
  #define EFR32_FRC_CONVGENERATOR_GENERATOR0_IDX   0
  #define EFR32_FRC_CONVGENERATOR_GENERATOR0(v)    ((v) << 0)
  #define EFR32_FRC_CONVGENERATOR_GENERATOR0_SET(x, v) do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define EFR32_FRC_CONVGENERATOR_GENERATOR0_GET(x) (((x) >> 0) & 0x7f)
  #define EFR32_FRC_CONVGENERATOR_GENERATOR1_IDX   8
  #define EFR32_FRC_CONVGENERATOR_GENERATOR1(v)    ((v) << 8)
  #define EFR32_FRC_CONVGENERATOR_GENERATOR1_SET(x, v) do { (x) = (((x) & ~0x7f00) | ((v) << 8)); } while(0)
  #define EFR32_FRC_CONVGENERATOR_GENERATOR1_GET(x) (((x) >> 8) & 0x7f)
  #define EFR32_FRC_CONVGENERATOR_RECURSIVE        0x00010000
  #define EFR32_FRC_CONVGENERATOR_RECURSIVE_IDX    16
  #define EFR32_FRC_CONVGENERATOR_NONSYSTEMATIC    0x00020000
  #define EFR32_FRC_CONVGENERATOR_NONSYSTEMATIC_IDX 17

#define EFR32_FRC_PUNCTCTRL_ADDR                     0x00000058
#define EFR32_FRC_PUNCTCTRL_MASK                     0x00007f7f
  #define EFR32_FRC_PUNCTCTRL_PUNCT0_IDX           0
  #define EFR32_FRC_PUNCTCTRL_PUNCT0(v)            ((v) << 0)
  #define EFR32_FRC_PUNCTCTRL_PUNCT0_SET(x, v)     do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define EFR32_FRC_PUNCTCTRL_PUNCT0_GET(x)        (((x) >> 0) & 0x7f)
  #define EFR32_FRC_PUNCTCTRL_PUNCT1_IDX           8
  #define EFR32_FRC_PUNCTCTRL_PUNCT1(v)            ((v) << 8)
  #define EFR32_FRC_PUNCTCTRL_PUNCT1_SET(x, v)     do { (x) = (((x) & ~0x7f00) | ((v) << 8)); } while(0)
  #define EFR32_FRC_PUNCTCTRL_PUNCT1_GET(x)        (((x) >> 8) & 0x7f)

#define EFR32_FRC_PAUSECTRL_ADDR                     0x0000005c
#define EFR32_FRC_PAUSECTRL_MASK                     0x001fffff
  #define EFR32_FRC_PAUSECTRL_FRAMEDETPAUSEEN      0x00000001
  #define EFR32_FRC_PAUSECTRL_FRAMEDETPAUSEEN_IDX  0
  #define EFR32_FRC_PAUSECTRL_TXINTERLEAVEWRITEPAUSEEN 0x00000002
  #define EFR32_FRC_PAUSECTRL_TXINTERLEAVEWRITEPAUSEEN_IDX 1
  #define EFR32_FRC_PAUSECTRL_RXINTERLEAVEWRITEPAUSEEN 0x00000004
  #define EFR32_FRC_PAUSECTRL_RXINTERLEAVEWRITEPAUSEEN_IDX 2
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEREADPAUSEEN 0x00000008
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEREADPAUSEEN_IDX 3
  #define EFR32_FRC_PAUSECTRL_TXSUBFRAMEPAUSEEN    0x00000010
  #define EFR32_FRC_PAUSECTRL_TXSUBFRAMEPAUSEEN_IDX 4
  #define EFR32_FRC_PAUSECTRL_CONVPAUSECNT_IDX     5
  #define EFR32_FRC_PAUSECTRL_CONVPAUSECNT(v)      ((v) << 5)
  #define EFR32_FRC_PAUSECTRL_CONVPAUSECNT_SET(x, v) do { (x) = (((x) & ~0x7e0) | ((v) << 5)); } while(0)
  #define EFR32_FRC_PAUSECTRL_CONVPAUSECNT_GET(x)  (((x) >> 5) & 0x3f)
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEWRITEPAUSECNT_IDX 11
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEWRITEPAUSECNT(v) ((v) << 11)
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEWRITEPAUSECNT_SET(x, v) do { (x) = (((x) & ~0xf800) | ((v) << 11)); } while(0)
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEWRITEPAUSECNT_GET(x) (((x) >> 11) & 0x1f)
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEREADPAUSECNT_IDX 16
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEREADPAUSECNT(v) ((v) << 16)
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEREADPAUSECNT_SET(x, v) do { (x) = (((x) & ~0x1f0000) | ((v) << 16)); } while(0)
  #define EFR32_FRC_PAUSECTRL_INTERLEAVEREADPAUSECNT_GET(x) (((x) >> 16) & 0x1f)

#define EFR32_FRC_IF_ADDR                            0x00000060
#define EFR32_FRC_IF_MASK                            0x7f07ffff
  #define EFR32_FRC_IF_TXDONE                      0x00000001
  #define EFR32_FRC_IF_TXDONE_IDX                  0
  #define EFR32_FRC_IF_TXAFTERFRAMEDONE            0x00000002
  #define EFR32_FRC_IF_TXAFTERFRAMEDONE_IDX        1
  #define EFR32_FRC_IF_TXABORTED                   0x00000004
  #define EFR32_FRC_IF_TXABORTED_IDX               2
  #define EFR32_FRC_IF_TXUF                        0x00000008
  #define EFR32_FRC_IF_TXUF_IDX                    3
  #define EFR32_FRC_IF_RXDONE                      0x00000010
  #define EFR32_FRC_IF_RXDONE_IDX                  4
  #define EFR32_FRC_IF_RXABORTED                   0x00000020
  #define EFR32_FRC_IF_RXABORTED_IDX               5
  #define EFR32_FRC_IF_FRAMEERROR                  0x00000040
  #define EFR32_FRC_IF_FRAMEERROR_IDX              6
  #define EFR32_FRC_IF_BLOCKERROR                  0x00000080
  #define EFR32_FRC_IF_BLOCKERROR_IDX              7
  #define EFR32_FRC_IF_RXOF                        0x00000100
  #define EFR32_FRC_IF_RXOF_IDX                    8
  #define EFR32_FRC_IF_WCNTCMP0                    0x00000200
  #define EFR32_FRC_IF_WCNTCMP0_IDX                9
  #define EFR32_FRC_IF_WCNTCMP1                    0x00000400
  #define EFR32_FRC_IF_WCNTCMP1_IDX                10
  #define EFR32_FRC_IF_WCNTCMP2                    0x00000800
  #define EFR32_FRC_IF_WCNTCMP2_IDX                11
  #define EFR32_FRC_IF_ADDRERROR                   0x00001000
  #define EFR32_FRC_IF_ADDRERROR_IDX               12
  #define EFR32_FRC_IF_BUSERROR                    0x00002000
  #define EFR32_FRC_IF_BUSERROR_IDX                13
  #define EFR32_FRC_IF_RXRAWEVENT                  0x00004000
  #define EFR32_FRC_IF_RXRAWEVENT_IDX              14
  #define EFR32_FRC_IF_TXRAWEVENT                  0x00008000
  #define EFR32_FRC_IF_TXRAWEVENT_IDX              15
  #define EFR32_FRC_IF_SNIFFOF                     0x00010000
  #define EFR32_FRC_IF_SNIFFOF_IDX                 16
  #define EFR32_FRC_IF_LVDSWILLERROR               0x00020000
  #define EFR32_FRC_IF_LVDSWILLERROR_IDX           17
  #define EFR32_FRC_IF_LVDSERROR                   0x00040000
  #define EFR32_FRC_IF_LVDSERROR_IDX               18
  #define EFR32_FRC_IF_FRAMEDETPAUSED              0x01000000
  #define EFR32_FRC_IF_FRAMEDETPAUSED_IDX          24
  #define EFR32_FRC_IF_INTERLEAVEWRITEPAUSED       0x02000000
  #define EFR32_FRC_IF_INTERLEAVEWRITEPAUSED_IDX   25
  #define EFR32_FRC_IF_INTERLEAVEREADPAUSED        0x04000000
  #define EFR32_FRC_IF_INTERLEAVEREADPAUSED_IDX    26
  #define EFR32_FRC_IF_TXSUBFRAMEPAUSED            0x08000000
  #define EFR32_FRC_IF_TXSUBFRAMEPAUSED_IDX        27
  #define EFR32_FRC_IF_CONVPAUSED                  0x10000000
  #define EFR32_FRC_IF_CONVPAUSED_IDX              28
  #define EFR32_FRC_IF_RXWORD                      0x20000000
  #define EFR32_FRC_IF_RXWORD_IDX                  29
  #define EFR32_FRC_IF_TXWORD                      0x40000000
  #define EFR32_FRC_IF_TXWORD_IDX                  30

/** See IF register fields @multiple */
#define EFR32_FRC_IFS_ADDR                           0x00000064
#define EFR32_FRC_IFS_MASK                           0x00000000

/** See IF register fields @multiple */
#define EFR32_FRC_IFC_ADDR                           0x00000068
#define EFR32_FRC_IFC_MASK                           0x00000000

/** See IF register fields @multiple */
#define EFR32_FRC_IEN_ADDR                           0x0000006c
#define EFR32_FRC_IEN_MASK                           0x00000000

#define EFR32_FRC_BUFFERMODE_ADDR                    0x00000070
#define EFR32_FRC_BUFFERMODE_MASK                    0x00000007
  #define EFR32_FRC_BUFFERMODE_TXBUFFERMODE        0x00000001
  #define EFR32_FRC_BUFFERMODE_TXBUFFERMODE_IDX    0
  #define EFR32_FRC_BUFFERMODE_RXBUFFERMODE_IDX    1
  #define EFR32_FRC_BUFFERMODE_RXBUFFERMODE(v)     ((EFR32_FRC_BUFFERMODE_RXBUFFERMODE_##v) << 1)
  #define EFR32_FRC_BUFFERMODE_RXBUFFERMODE_SET(x, v) do { (x) = (((x) & ~0x6) | ((EFR32_FRC_BUFFERMODE_RXBUFFERMODE_##v) << 1)); } while(0)
  #define EFR32_FRC_BUFFERMODE_RXBUFFERMODE_GET(x) (((x) >> 1) & 0x3)
/**  */
    #define EFR32_FRC_BUFFERMODE_RXBUFFERMODE_BUFC   0x00000000
/**  */
    #define EFR32_FRC_BUFFERMODE_RXBUFFERMODE_REGISTER 0x00000001
/**  */
    #define EFR32_FRC_BUFFERMODE_RXBUFFERMODE_DISABLE 0x00000002

#define EFR32_FRC_ROUTEPEN_ADDR                      0x00000074
#define EFR32_FRC_ROUTEPEN_MASK                      0x00000007
  #define EFR32_FRC_ROUTEPEN_DOUTPEN               0x00000001
  #define EFR32_FRC_ROUTEPEN_DOUTPEN_IDX           0
  #define EFR32_FRC_ROUTEPEN_DCLKPEN               0x00000002
  #define EFR32_FRC_ROUTEPEN_DCLKPEN_IDX           1
  #define EFR32_FRC_ROUTEPEN_DFRAMEPEN             0x00000004
  #define EFR32_FRC_ROUTEPEN_DFRAMEPEN_IDX         2

#define EFR32_FRC_ROUTELOC0_ADDR                     0x00000078
#define EFR32_FRC_ROUTELOC0_MASK                     0x003f3f3f
  #define EFR32_FRC_ROUTELOC0_DOUTLOC_IDX          0
  #define EFR32_FRC_ROUTELOC0_DOUTLOC(v)           ((v) << 0)
  #define EFR32_FRC_ROUTELOC0_DOUTLOC_SET(x, v)    do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define EFR32_FRC_ROUTELOC0_DOUTLOC_GET(x)       (((x) >> 0) & 0x3f)
  #define EFR32_FRC_ROUTELOC0_DCLKLOC_IDX          8
  #define EFR32_FRC_ROUTELOC0_DCLKLOC(v)           ((v) << 8)
  #define EFR32_FRC_ROUTELOC0_DCLKLOC_SET(x, v)    do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define EFR32_FRC_ROUTELOC0_DCLKLOC_GET(x)       (((x) >> 8) & 0x3f)
  #define EFR32_FRC_ROUTELOC0_DFRAMELOC_IDX        16
  #define EFR32_FRC_ROUTELOC0_DFRAMELOC(v)         ((v) << 16)
  #define EFR32_FRC_ROUTELOC0_DFRAMELOC_SET(x, v)  do { (x) = (((x) & ~0x3f0000) | ((v) << 16)); } while(0)
  #define EFR32_FRC_ROUTELOC0_DFRAMELOC_GET(x)     (((x) >> 16) & 0x3f)

#define EFR32_FRC_SNIFFCTRL_ADDR                     0x0000007c
#define EFR32_FRC_SNIFFCTRL_MASK                     0x0001ffff
  #define EFR32_FRC_SNIFFCTRL_SNIFFMODE_IDX        0
  #define EFR32_FRC_SNIFFCTRL_SNIFFMODE(v)         ((EFR32_FRC_SNIFFCTRL_SNIFFMODE_##v) << 0)
  #define EFR32_FRC_SNIFFCTRL_SNIFFMODE_SET(x, v)  do { (x) = (((x) & ~0x3) | ((EFR32_FRC_SNIFFCTRL_SNIFFMODE_##v) << 0)); } while(0)
  #define EFR32_FRC_SNIFFCTRL_SNIFFMODE_GET(x)     (((x) >> 0) & 0x3)
/**  */
    #define EFR32_FRC_SNIFFCTRL_SNIFFMODE_OFF        0x00000000
/**  */
    #define EFR32_FRC_SNIFFCTRL_SNIFFMODE_UART       0x00000001
/**  */
    #define EFR32_FRC_SNIFFCTRL_SNIFFMODE_SPI        0x00000002
  #define EFR32_FRC_SNIFFCTRL_SNIFFBITS            0x00000004
  #define EFR32_FRC_SNIFFCTRL_SNIFFBITS_IDX        2
  #define EFR32_FRC_SNIFFCTRL_SNIFFRXDATA          0x00000008
  #define EFR32_FRC_SNIFFCTRL_SNIFFRXDATA_IDX      3
  #define EFR32_FRC_SNIFFCTRL_SNIFFTXDATA          0x00000010
  #define EFR32_FRC_SNIFFCTRL_SNIFFTXDATA_IDX      4
  #define EFR32_FRC_SNIFFCTRL_SNIFFRSSI            0x00000020
  #define EFR32_FRC_SNIFFCTRL_SNIFFRSSI_IDX        5
  #define EFR32_FRC_SNIFFCTRL_SNIFFSTATE           0x00000040
  #define EFR32_FRC_SNIFFCTRL_SNIFFSTATE_IDX       6
  #define EFR32_FRC_SNIFFCTRL_SNIFFAUXDATA         0x00000080
  #define EFR32_FRC_SNIFFCTRL_SNIFFAUXDATA_IDX     7
  #define EFR32_FRC_SNIFFCTRL_SNIFFBR_IDX          8
  #define EFR32_FRC_SNIFFCTRL_SNIFFBR(v)           ((v) << 8)
  #define EFR32_FRC_SNIFFCTRL_SNIFFBR_SET(x, v)    do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define EFR32_FRC_SNIFFCTRL_SNIFFBR_GET(x)       (((x) >> 8) & 0xff)
  #define EFR32_FRC_SNIFFCTRL_SNIFFSLEEPCTRL       0x00010000
  #define EFR32_FRC_SNIFFCTRL_SNIFFSLEEPCTRL_IDX   16

#define EFR32_FRC_AUXDATA_ADDR                       0x00000080
#define EFR32_FRC_AUXDATA_MASK                       0x000001ff
  #define EFR32_FRC_AUXDATA_AUXDATA_IDX            0
  #define EFR32_FRC_AUXDATA_AUXDATA(v)             ((v) << 0)
  #define EFR32_FRC_AUXDATA_AUXDATA_SET(x, v)      do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_AUXDATA_AUXDATA_GET(x)         (((x) >> 0) & 0x1ff)

#define EFR32_FRC_RAWCTRL_ADDR                       0x00000084
#define EFR32_FRC_RAWCTRL_MASK                       0x00000fbf
  #define EFR32_FRC_RAWCTRL_TXRAWMODE_IDX          0
  #define EFR32_FRC_RAWCTRL_TXRAWMODE(v)           ((EFR32_FRC_RAWCTRL_TXRAWMODE_##v) << 0)
  #define EFR32_FRC_RAWCTRL_TXRAWMODE_SET(x, v)    do { (x) = (((x) & ~0x3) | ((EFR32_FRC_RAWCTRL_TXRAWMODE_##v) << 0)); } while(0)
  #define EFR32_FRC_RAWCTRL_TXRAWMODE_GET(x)       (((x) >> 0) & 0x3)
/**  */
    #define EFR32_FRC_RAWCTRL_TXRAWMODE_DISABLE      0x00000000
/**  */
    #define EFR32_FRC_RAWCTRL_TXRAWMODE_SINGLEBUFFER 0x00000001
/**  */
    #define EFR32_FRC_RAWCTRL_TXRAWMODE_REPEATBUFFER 0x00000002
  #define EFR32_FRC_RAWCTRL_RXRAWMODE_IDX          2
  #define EFR32_FRC_RAWCTRL_RXRAWMODE(v)           ((EFR32_FRC_RAWCTRL_RXRAWMODE_##v) << 2)
  #define EFR32_FRC_RAWCTRL_RXRAWMODE_SET(x, v)    do { (x) = (((x) & ~0x1c) | ((EFR32_FRC_RAWCTRL_RXRAWMODE_##v) << 2)); } while(0)
  #define EFR32_FRC_RAWCTRL_RXRAWMODE_GET(x)       (((x) >> 2) & 0x7)
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWMODE_DISABLE      0x00000000
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWMODE_SINGLEITEM   0x00000001
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWMODE_SINGLEBUFFER 0x00000002
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWMODE_SINGLEBUFFERFRAME 0x00000003
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWMODE_REPEATBUFFER 0x00000004
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWMODE_LVDS         0x00000005
  #define EFR32_FRC_RAWCTRL_RXRAWRANDOM            0x00000020
  #define EFR32_FRC_RAWCTRL_RXRAWRANDOM_IDX        5
  #define EFR32_FRC_RAWCTRL_RXRAWTRIGGER           0x00000080
  #define EFR32_FRC_RAWCTRL_RXRAWTRIGGER_IDX       7
  #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_IDX        8
  #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL(v)         ((EFR32_FRC_RAWCTRL_RXRAWPRSSEL_##v) << 8)
  #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_SET(x, v)  do { (x) = (((x) & ~0xf00) | ((EFR32_FRC_RAWCTRL_RXRAWPRSSEL_##v) << 8)); } while(0)
  #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_GET(x)     (((x) >> 8) & 0xf)
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH0     0x00000000
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH1     0x00000001
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH2     0x00000002
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH3     0x00000003
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH4     0x00000004
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH5     0x00000005
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH6     0x00000006
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH7     0x00000007
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH8     0x00000008
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH9     0x00000009
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH10    0x0000000a
/**  */
    #define EFR32_FRC_RAWCTRL_RXRAWPRSSEL_PRSCH11    0x0000000b

#define EFR32_FRC_RXRAWDATA_ADDR                     0x00000088
#define EFR32_FRC_RXRAWDATA_MASK                     0xffffffff
  #define EFR32_FRC_RXRAWDATA_RXRAWDATA_IDX        0
  #define EFR32_FRC_RXRAWDATA_RXRAWDATA(v)         ((v) << 0)
  #define EFR32_FRC_RXRAWDATA_RXRAWDATA_SET(x, v)  do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_RXRAWDATA_RXRAWDATA_GET(x)     (((x) >> 0) & 0xffffffff)

#define EFR32_FRC_PAUSEDATA_ADDR                     0x0000008c
#define EFR32_FRC_PAUSEDATA_MASK                     0xffffffff
  #define EFR32_FRC_PAUSEDATA_PAUSEDATA_IDX        0
  #define EFR32_FRC_PAUSEDATA_PAUSEDATA(v)         ((v) << 0)
  #define EFR32_FRC_PAUSEDATA_PAUSEDATA_SET(x, v)  do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_PAUSEDATA_PAUSEDATA_GET(x)     (((x) >> 0) & 0xffffffff)

#define EFR32_FRC_LIKELYCONVSTATE_ADDR               0x00000090
#define EFR32_FRC_LIKELYCONVSTATE_MASK               0x0000003f
  #define EFR32_FRC_LIKELYCONVSTATE_LIKELYCONVSTATE_IDX 0
  #define EFR32_FRC_LIKELYCONVSTATE_LIKELYCONVSTATE(v) ((v) << 0)
  #define EFR32_FRC_LIKELYCONVSTATE_LIKELYCONVSTATE_SET(x, v) do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define EFR32_FRC_LIKELYCONVSTATE_LIKELYCONVSTATE_GET(x) (((x) >> 0) & 0x3f)

#define EFR32_FRC_INTELEMENTNEXT_ADDR                0x00000094
#define EFR32_FRC_INTELEMENTNEXT_MASK                0x000000ff
  #define EFR32_FRC_INTELEMENTNEXT_INTELEMENTNEXT_IDX 0
  #define EFR32_FRC_INTELEMENTNEXT_INTELEMENTNEXT(v) ((v) << 0)
  #define EFR32_FRC_INTELEMENTNEXT_INTELEMENTNEXT_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_INTELEMENTNEXT_INTELEMENTNEXT_GET(x) (((x) >> 0) & 0xff)

#define EFR32_FRC_INTWRITEPOINT_ADDR                 0x00000098
#define EFR32_FRC_INTWRITEPOINT_MASK                 0x0000001f
  #define EFR32_FRC_INTWRITEPOINT_INTWRITEPOINT_IDX 0
  #define EFR32_FRC_INTWRITEPOINT_INTWRITEPOINT(v) ((v) << 0)
  #define EFR32_FRC_INTWRITEPOINT_INTWRITEPOINT_SET(x, v) do { (x) = (((x) & ~0x1f) | ((v) << 0)); } while(0)
  #define EFR32_FRC_INTWRITEPOINT_INTWRITEPOINT_GET(x) (((x) >> 0) & 0x1f)

#define EFR32_FRC_INTREADPOINT_ADDR                  0x0000009c
#define EFR32_FRC_INTREADPOINT_MASK                  0x0000001f
  #define EFR32_FRC_INTREADPOINT_INTREADPOINT_IDX  0
  #define EFR32_FRC_INTREADPOINT_INTREADPOINT(v)   ((v) << 0)
  #define EFR32_FRC_INTREADPOINT_INTREADPOINT_SET(x, v) do { (x) = (((x) & ~0x1f) | ((v) << 0)); } while(0)
  #define EFR32_FRC_INTREADPOINT_INTREADPOINT_GET(x) (((x) >> 0) & 0x1f)

#define EFR32_FRC_FCD_ADDR(ridx)                     (0x000000a0 + (ridx) * 4)
#define EFR32_FRC_FCD_COUNT                          4
#define EFR32_FRC_FCD_MASK                           0x0000ffff
  #define EFR32_FRC_FCD_WORDS_IDX                  0
  #define EFR32_FRC_FCD_WORDS(v)                   ((v) << 0)
  #define EFR32_FRC_FCD_WORDS_SET(x, v)            do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_FCD_WORDS_GET(x)               (((x) >> 0) & 0xff)
  #define EFR32_FRC_FCD_BUFFER_IDX                 8
  #define EFR32_FRC_FCD_BUFFER(v)                  ((v) << 8)
  #define EFR32_FRC_FCD_BUFFER_SET(x, v)           do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define EFR32_FRC_FCD_BUFFER_GET(x)              (((x) >> 8) & 0x3)
  #define EFR32_FRC_FCD_INCLUDECRC                 0x00000400
  #define EFR32_FRC_FCD_INCLUDECRC_IDX             10
  #define EFR32_FRC_FCD_CALCCRC                    0x00000800
  #define EFR32_FRC_FCD_CALCCRC_IDX                11
  #define EFR32_FRC_FCD_SKIPCRC_IDX                12
  #define EFR32_FRC_FCD_SKIPCRC(v)                 ((v) << 12)
  #define EFR32_FRC_FCD_SKIPCRC_SET(x, v)          do { (x) = (((x) & ~0x3000) | ((v) << 12)); } while(0)
  #define EFR32_FRC_FCD_SKIPCRC_GET(x)             (((x) >> 12) & 0x3)
  #define EFR32_FRC_FCD_SKIPWHITE                  0x00004000
  #define EFR32_FRC_FCD_SKIPWHITE_IDX              14
  #define EFR32_FRC_FCD_ADDTRAILTXDATA             0x00008000
  #define EFR32_FRC_FCD_ADDTRAILTXDATA_IDX         15

#define EFR32_FRC_INTELEMENT_ADDR(ridx)              (0x000000c0 + (ridx) * 4)
#define EFR32_FRC_INTELEMENT_COUNT                   16
#define EFR32_FRC_INTELEMENT_MASK                    0x000000ff
  #define EFR32_FRC_INTELEMENT_INTELEMENT_IDX      0
  #define EFR32_FRC_INTELEMENT_INTELEMENT(v)       ((v) << 0)
  #define EFR32_FRC_INTELEMENT_INTELEMENT_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_FRC_INTELEMENT_INTELEMENT_GET(x)   (((x) >> 0) & 0xff)

#define EFR32_FRC_MIRRORIF_ADDR                      0x00000100
#define EFR32_FRC_MIRRORIF_MASK                      0x0003ffff
  #define EFR32_FRC_MIRRORIF_TXDONEM               0x00000001
  #define EFR32_FRC_MIRRORIF_TXDONEM_IDX           0
  #define EFR32_FRC_MIRRORIF_TXAFTERFRAMEDONEM     0x00000002
  #define EFR32_FRC_MIRRORIF_TXAFTERFRAMEDONEM_IDX 1
  #define EFR32_FRC_MIRRORIF_TXABORTEDM            0x00000004
  #define EFR32_FRC_MIRRORIF_TXABORTEDM_IDX        2
  #define EFR32_FRC_MIRRORIF_TXUFM                 0x00000008
  #define EFR32_FRC_MIRRORIF_TXUFM_IDX             3
  #define EFR32_FRC_MIRRORIF_RXDONEM               0x00000010
  #define EFR32_FRC_MIRRORIF_RXDONEM_IDX           4
  #define EFR32_FRC_MIRRORIF_RXABORTEDM            0x00000020
  #define EFR32_FRC_MIRRORIF_RXABORTEDM_IDX        5
  #define EFR32_FRC_MIRRORIF_FRAMEERRORM           0x00000040
  #define EFR32_FRC_MIRRORIF_FRAMEERRORM_IDX       6
  #define EFR32_FRC_MIRRORIF_BLOCKERRORM           0x00000080
  #define EFR32_FRC_MIRRORIF_BLOCKERRORM_IDX       7
  #define EFR32_FRC_MIRRORIF_RXOFM                 0x00000100
  #define EFR32_FRC_MIRRORIF_RXOFM_IDX             8
  #define EFR32_FRC_MIRRORIF_ADDRERRORM            0x00000200
  #define EFR32_FRC_MIRRORIF_ADDRERRORM_IDX        9
  #define EFR32_FRC_MIRRORIF_BUSERRORM             0x00000400
  #define EFR32_FRC_MIRRORIF_BUSERRORM_IDX         10
  #define EFR32_FRC_MIRRORIF_SNIFFOFM              0x00000800
  #define EFR32_FRC_MIRRORIF_SNIFFOFM_IDX          11
  #define EFR32_FRC_MIRRORIF_FRAMEDETPAUSEDM       0x00001000
  #define EFR32_FRC_MIRRORIF_FRAMEDETPAUSEDM_IDX   12
  #define EFR32_FRC_MIRRORIF_INTERLEAVEWRITEPAUSEDM 0x00002000
  #define EFR32_FRC_MIRRORIF_INTERLEAVEWRITEPAUSEDM_IDX 13
  #define EFR32_FRC_MIRRORIF_INTERLEAVEREADPAUSEDM 0x00004000
  #define EFR32_FRC_MIRRORIF_INTERLEAVEREADPAUSEDM_IDX 14
  #define EFR32_FRC_MIRRORIF_TXSUBFRAMEPAUSEDM     0x00008000
  #define EFR32_FRC_MIRRORIF_TXSUBFRAMEPAUSEDM_IDX 15
  #define EFR32_FRC_MIRRORIF_CONVPAUSEDM           0x00010000
  #define EFR32_FRC_MIRRORIF_CONVPAUSEDM_IDX       16
  #define EFR32_FRC_MIRRORIF_IFMIRRORCLEAR         0x00020000
  #define EFR32_FRC_MIRRORIF_IFMIRRORCLEAR_IDX     17

#endif

