/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_shift=1                 \
     cdefs_sfx_field_shift=_IDX
*/

#ifndef _EFR32_CRC_BFGEN_DEFS_
#define _EFR32_CRC_BFGEN_DEFS_

#define EFR32_CRC_CTRL_ADDR                          0x00000000
#define EFR32_CRC_CTRL_MASK                          0x00001fef
  #define EFR32_CRC_CTRL_INPUTINV                  0x00000001
  #define EFR32_CRC_CTRL_INPUTINV_IDX              0
  #define EFR32_CRC_CTRL_OUTPUTINV                 0x00000002
  #define EFR32_CRC_CTRL_OUTPUTINV_IDX             1
  #define EFR32_CRC_CTRL_CRCWIDTH_IDX              2
  #define EFR32_CRC_CTRL_CRCWIDTH(v)               ((EFR32_CRC_CTRL_CRCWIDTH_##v) << 2)
  #define EFR32_CRC_CTRL_CRCWIDTH_SET(x, v)        do { (x) = (((x) & ~0xc) | ((EFR32_CRC_CTRL_CRCWIDTH_##v) << 2)); } while(0)
  #define EFR32_CRC_CTRL_CRCWIDTH_GET(x)           (((x) >> 2) & 0x3)
/**  */
    #define EFR32_CRC_CTRL_CRCWIDTH_CRCWIDTH8        0x00000000
/**  */
    #define EFR32_CRC_CTRL_CRCWIDTH_CRCWIDTH16       0x00000001
/**  */
    #define EFR32_CRC_CTRL_CRCWIDTH_CRCWIDTH24       0x00000002
/**  */
    #define EFR32_CRC_CTRL_CRCWIDTH_CRCWIDTH32       0x00000003
  #define EFR32_CRC_CTRL_INPUTBITORDER_IDX         5
  #define EFR32_CRC_CTRL_INPUTBITORDER(v)          ((EFR32_CRC_CTRL_INPUTBITORDER_##v) << 5)
  #define EFR32_CRC_CTRL_INPUTBITORDER_SET(x, v)   do { (x) = (((x) & ~0x20) | ((EFR32_CRC_CTRL_INPUTBITORDER_##v) << 5)); } while(0)
  #define EFR32_CRC_CTRL_INPUTBITORDER_GET(x)      (((x) >> 5) & 0x1)
    #define EFR32_CRC_CTRL_INPUTBITORDER_LSB         0x00000000
    #define EFR32_CRC_CTRL_INPUTBITORDER_MSB         0x00000001
  #define EFR32_CRC_CTRL_BYTEREVERSE_IDX           6
  #define EFR32_CRC_CTRL_BYTEREVERSE(v)            ((EFR32_CRC_CTRL_BYTEREVERSE_##v) << 6)
  #define EFR32_CRC_CTRL_BYTEREVERSE_SET(x, v)     do { (x) = (((x) & ~0x40) | ((EFR32_CRC_CTRL_BYTEREVERSE_##v) << 6)); } while(0)
  #define EFR32_CRC_CTRL_BYTEREVERSE_GET(x)        (((x) >> 6) & 0x1)
    #define EFR32_CRC_CTRL_BYTEREVERSE_MSB           0x00000000
    #define EFR32_CRC_CTRL_BYTEREVERSE_LSB           0x00000001
  #define EFR32_CRC_CTRL_BITREVERSE_IDX            7
  #define EFR32_CRC_CTRL_BITREVERSE(v)             ((EFR32_CRC_CTRL_BITREVERSE_##v) << 7)
  #define EFR32_CRC_CTRL_BITREVERSE_SET(x, v)      do { (x) = (((x) & ~0x80) | ((EFR32_CRC_CTRL_BITREVERSE_##v) << 7)); } while(0)
  #define EFR32_CRC_CTRL_BITREVERSE_GET(x)         (((x) >> 7) & 0x1)
    #define EFR32_CRC_CTRL_BITREVERSE_MSB            0x00000000
    #define EFR32_CRC_CTRL_BITREVERSE_LSB            0x00000001
/** Number of bits minus one per word. @multiple */
  #define EFR32_CRC_CTRL_BITSPERWORD_IDX           8
  #define EFR32_CRC_CTRL_BITSPERWORD(v)            ((v) << 8)
  #define EFR32_CRC_CTRL_BITSPERWORD_SET(x, v)     do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFR32_CRC_CTRL_BITSPERWORD_GET(x)        (((x) >> 8) & 0xf)
  #define EFR32_CRC_CTRL_PADCRCINPUT               0x00001000
  #define EFR32_CRC_CTRL_PADCRCINPUT_IDX           12

#define EFR32_CRC_STATUS_ADDR                        0x00000004
#define EFR32_CRC_STATUS_MASK                        0x00000001
  #define EFR32_CRC_STATUS_BUSY                    0x00000001
  #define EFR32_CRC_STATUS_BUSY_IDX                0

#define EFR32_CRC_CMD_ADDR                           0x00000008
#define EFR32_CRC_CMD_MASK                           0x00000001
  #define EFR32_CRC_CMD_INITIALIZE                 0x00000001
  #define EFR32_CRC_CMD_INITIALIZE_IDX             0

#define EFR32_CRC_INPUTDATA_ADDR                     0x0000000c
#define EFR32_CRC_INPUTDATA_MASK                     0x0000ffff
  #define EFR32_CRC_INPUTDATA_INPUTDATA_IDX        0
  #define EFR32_CRC_INPUTDATA_INPUTDATA(v)         ((v) << 0)
  #define EFR32_CRC_INPUTDATA_INPUTDATA_SET(x, v)  do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFR32_CRC_INPUTDATA_INPUTDATA_GET(x)     (((x) >> 0) & 0xffff)

#define EFR32_CRC_INIT_ADDR                          0x00000010
#define EFR32_CRC_INIT_MASK                          0xffffffff
  #define EFR32_CRC_INIT_INIT_IDX                  0
  #define EFR32_CRC_INIT_INIT(v)                   ((v) << 0)
  #define EFR32_CRC_INIT_INIT_SET(x, v)            do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFR32_CRC_INIT_INIT_GET(x)               (((x) >> 0) & 0xffffffff)

#define EFR32_CRC_DATA_ADDR                          0x00000014
#define EFR32_CRC_DATA_MASK                          0xffffffff
  #define EFR32_CRC_DATA_DATA_IDX                  0
  #define EFR32_CRC_DATA_DATA(v)                   ((v) << 0)
  #define EFR32_CRC_DATA_DATA_SET(x, v)            do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFR32_CRC_DATA_DATA_GET(x)               (((x) >> 0) & 0xffffffff)

#define EFR32_CRC_POLY_ADDR                          0x00000018
#define EFR32_CRC_POLY_MASK                          0xffffffff
/** This controls the polynomial used for CRC generation and checking. The value
   to write is obtained by reversing bits of initial polynomial mask. Example:
   Initial mask = 0x1021, Register value: 0x8408. @multiple */
  #define EFR32_CRC_POLY_POLY_IDX                  0
  #define EFR32_CRC_POLY_POLY(v)                   ((v) << 0)
  #define EFR32_CRC_POLY_POLY_SET(x, v)            do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFR32_CRC_POLY_POLY_GET(x)               (((x) >> 0) & 0xffffffff)

#endif

