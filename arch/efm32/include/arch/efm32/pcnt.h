/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1                \
     -I /opt/bfgen/defs/efm32/efm32_pcnt.bf cdefs_use_field_shift=1            \
     cdefs_use_field_shifted_mask=1 cdefs_sfx_field_shifter=_SHIFT_VAL
*/

#ifndef _EFM32_PCNT_BFGEN_DEFS_
#define _EFM32_PCNT_BFGEN_DEFS_

#define EFM32_PCNT_CTRL_ADDR                         0x00000000
#define EFM32_PCNT_CTRL_MASK                         0x0000003f
/** Selects the mode of operation. The corresponding clock source must be
   selected from the CMU. @multiple */
  #define EFM32_PCNT_CTRL_MODE                     0x00000003
  #define EFM32_PCNT_CTRL_MODE_SHIFT               0
  #define EFM32_PCNT_CTRL_MODE_SHIFT_VAL(v)        ((EFM32_PCNT_CTRL_MODE_##v) << 0)
  #define EFM32_PCNT_CTRL_MODE_SET(x, v)           do { (x) = (((x) & ~0x3) | ((EFM32_PCNT_CTRL_MODE_##v) << 0)); } while(0)
  #define EFM32_PCNT_CTRL_MODE_SETVAL(x, v)        do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define EFM32_PCNT_CTRL_MODE_GET(x)              (((x) >> 0) & 0x3)
    #define EFM32_PCNT_CTRL_MODE_DISABLE             0x00000000
    #define EFM32_PCNT_CTRL_MODE_OVSSINGLE           0x00000001
    #define EFM32_PCNT_CTRL_MODE_EXTCLKSINGLE        0x00000002
    #define EFM32_PCNT_CTRL_MODE_EXTCLKQUAD          0x00000003
/** The direction of the counter must be set in the OVSSINGLE and EXTCLKSINGLE
   modes. This bit is ignored in EXTCLKQUAD mode as the direction is
   automatically detected. @multiple */
  #define EFM32_PCNT_CTRL_CNTDIR                   0x00000004
  #define EFM32_PCNT_CTRL_CNTDIR_SHIFT             2
  #define EFM32_PCNT_CTRL_CNTDIR_SHIFT_VAL(v)      ((EFM32_PCNT_CTRL_CNTDIR_##v) << 2)
  #define EFM32_PCNT_CTRL_CNTDIR_SET(x, v)         do { (x) = (((x) & ~0x4) | ((EFM32_PCNT_CTRL_CNTDIR_##v) << 2)); } while(0)
  #define EFM32_PCNT_CTRL_CNTDIR_SETVAL(x, v)      do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define EFM32_PCNT_CTRL_CNTDIR_GET(x)            (((x) >> 2) & 0x1)
    #define EFM32_PCNT_CTRL_CNTDIR_UP                0x00000000
    #define EFM32_PCNT_CTRL_CNTDIR_DOWN              0x00000001
/** Determines the polarity of the incoming edges. This bit should be written
   when PCNT is in DISABLE mode, otherwise the behavior is unpredictable. This
   bit is ignored in EXTCLKSINGLE mode. @multiple */
  #define EFM32_PCNT_CTRL_EDGE                     0x00000008
  #define EFM32_PCNT_CTRL_EDGE_SHIFT               3
  #define EFM32_PCNT_CTRL_EDGE_SHIFT_VAL(v)        ((EFM32_PCNT_CTRL_EDGE_##v) << 3)
  #define EFM32_PCNT_CTRL_EDGE_SET(x, v)           do { (x) = (((x) & ~0x8) | ((EFM32_PCNT_CTRL_EDGE_##v) << 3)); } while(0)
  #define EFM32_PCNT_CTRL_EDGE_SETVAL(x, v)        do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define EFM32_PCNT_CTRL_EDGE_GET(x)              (((x) >> 3) & 0x1)
    #define EFM32_PCNT_CTRL_EDGE_POS                 0x00000000
    #define EFM32_PCNT_CTRL_EDGE_NEG                 0x00000001
/** The filter passes all high and low periods that are at least 5 clock cycles
   long. This filter is only available in OVSSINGLE mode. @multiple */
  #define EFM32_PCNT_CTRL_FILT                     0x00000010
  #define EFM32_PCNT_CTRL_FILT_SHIFT               4
/** The PCNT clock domain is asynchronously held in reset when this bit is set.
   The reset is synchronously released two PCNT clock edges after this bit is
   cleared. If external clock used the reset should be performed by setting and
   clearing the bit without pending for SYNCBUSY bit. @multiple */
  #define EFM32_PCNT_CTRL_RSTEN                    0x00000020
  #define EFM32_PCNT_CTRL_RSTEN_SHIFT              5

#define EFM32_PCNT_CMD_ADDR                          0x00000004
#define EFM32_PCNT_CMD_MASK                          0x00000003
/** Load PCNTn_TOP into PCNTn_CNT on the next counter clock cycle. @multiple */
  #define EFM32_PCNT_CMD_LCNTIM                    0x00000001
  #define EFM32_PCNT_CMD_LCNTIM_SHIFT              0
/** This bit has no effect since TOPB is not buffered and it is loaded directly
   into TOP. For EFM32G revisions A and B: Load PCNTn_TOPB into PCNTn_TOP. Please
   see the device datasheet for a description on how to extract the chip
   revision. @multiple */
  #define EFM32_PCNT_CMD_LTOPBIM                   0x00000002
  #define EFM32_PCNT_CMD_LTOPBIM_SHIFT             1

#define EFM32_PCNT_STATUS_ADDR                       0x00000008
#define EFM32_PCNT_STATUS_MASK                       0x00000001
/** Current direction status of the counter. This bit is valid in EXTCLKQUAD mode
   only. @multiple */
  #define EFM32_PCNT_STATUS_DIR                    0x00000001
  #define EFM32_PCNT_STATUS_DIR_SHIFT              0
  #define EFM32_PCNT_STATUS_DIR_SHIFT_VAL(v)       ((EFM32_PCNT_STATUS_DIR_##v) << 0)
  #define EFM32_PCNT_STATUS_DIR_SET(x, v)          do { (x) = (((x) & ~0x1) | ((EFM32_PCNT_STATUS_DIR_##v) << 0)); } while(0)
  #define EFM32_PCNT_STATUS_DIR_SETVAL(x, v)       do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_PCNT_STATUS_DIR_GET(x)             (((x) >> 0) & 0x1)
    #define EFM32_PCNT_STATUS_DIR_UP                 0x00000000
    #define EFM32_PCNT_STATUS_DIR_DOWN               0x00000001

#define EFM32_PCNT_CNT_ADDR                          0x0000000c
#define EFM32_PCNT_CNT_MASK                          0x0000ffff
/** Gives read access to the counter. @multiple */
  #define EFM32_PCNT_CNT_VAL                       0x0000ffff
  #define EFM32_PCNT_CNT_VAL_SHIFT                 0
  #define EFM32_PCNT_CNT_VAL_SHIFT_VAL(v)          ((v) << 0)
  #define EFM32_PCNT_CNT_VAL_SET(x, v)             do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_PCNT_CNT_VAL_GET(x)                (((x) >> 0) & 0xffff)

#define EFM32_PCNT_TOP_ADDR                          0x00000010
#define EFM32_PCNT_TOP_MASK                          0x0000ffff
/** When counting down, this value is reloaded into PCNTn_CNT when counting past
   0. When counting up, 0 is written to the PCNTn_CNT register when counting past
   this value. @multiple */
  #define EFM32_PCNT_TOP_VAL                       0x0000ffff
  #define EFM32_PCNT_TOP_VAL_SHIFT                 0
  #define EFM32_PCNT_TOP_VAL_SHIFT_VAL(v)          ((v) << 0)
  #define EFM32_PCNT_TOP_VAL_SET(x, v)             do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_PCNT_TOP_VAL_GET(x)                (((x) >> 0) & 0xffff)

#define EFM32_PCNT_TOPB_ADDR                         0x00000014
#define EFM32_PCNT_TOPB_MASK                         0x0000ffff
/** Loaded automatically to TOP when written. For EFM32G revisions A and B:
   Loaded into TOP when LTOPBIM in PCNTn_CMD register is set. Please see the
   device datasheet for a description on how to extract the chip revision
   @multiple */
  #define EFM32_PCNT_TOPB_VAL                      0x0000ffff
  #define EFM32_PCNT_TOPB_VAL_SHIFT                0
  #define EFM32_PCNT_TOPB_VAL_SHIFT_VAL(v)         ((v) << 0)
  #define EFM32_PCNT_TOPB_VAL_SET(x, v)            do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_PCNT_TOPB_VAL_GET(x)               (((x) >> 0) & 0xffff)

#define EFM32_PCNT_IF_ADDR                           0x00000018
#define EFM32_PCNT_IF_MASK                           0x00000007
/** Set when a CNT underflow occurs. @multiple */
  #define EFM32_PCNT_IF_UF                         0x00000001
  #define EFM32_PCNT_IF_UF_SHIFT                   0
/** Set when a CNT overflow occurs. @multiple */
  #define EFM32_PCNT_IF_OF                         0x00000002
  #define EFM32_PCNT_IF_OF_SHIFT                   1
/** Set when the count direction changes. Set in EXTCLKQUAD mode only. @multiple
   */
  #define EFM32_PCNT_IF_DIRCNG                     0x00000004
  #define EFM32_PCNT_IF_DIRCNG_SHIFT               2

#define EFM32_PCNT_IFS_ADDR                          0x0000001c
#define EFM32_PCNT_IFS_MASK                          0x00000007
/** Write to 1 to set the underflow interrupt flag @multiple */
  #define EFM32_PCNT_IFS_UF                        0x00000001
  #define EFM32_PCNT_IFS_UF_SHIFT                  0
/** Write to 1 to set the overflow interrupt flag @multiple */
  #define EFM32_PCNT_IFS_OF                        0x00000002
  #define EFM32_PCNT_IFS_OF_SHIFT                  1
/** Write to 1 to set the direction change interrupt flag @multiple */
  #define EFM32_PCNT_IFS_DIRCNG                    0x00000004
  #define EFM32_PCNT_IFS_DIRCNG_SHIFT              2

#define EFM32_PCNT_IFC_ADDR                          0x00000020
#define EFM32_PCNT_IFC_MASK                          0x00000007
/** Write to 1 to clear the underflow interrupt flag. @multiple */
  #define EFM32_PCNT_IFC_UF                        0x00000001
  #define EFM32_PCNT_IFC_UF_SHIFT                  0
/** Write to 1 to clear the overflow interrupt flag @multiple */
  #define EFM32_PCNT_IFC_OF                        0x00000002
  #define EFM32_PCNT_IFC_OF_SHIFT                  1
/** Write to 1 to clear the direction change detect interrupt flag @multiple */
  #define EFM32_PCNT_IFC_DIRCNG                    0x00000004
  #define EFM32_PCNT_IFC_DIRCNG_SHIFT              2

#define EFM32_PCNT_IEN_ADDR                          0x00000024
#define EFM32_PCNT_IEN_MASK                          0x00000007
/** Enable the underflow interrupt. @multiple */
  #define EFM32_PCNT_IEN_UF                        0x00000001
  #define EFM32_PCNT_IEN_UF_SHIFT                  0
/** Enable the overflow interrupt. @multiple */
  #define EFM32_PCNT_IEN_OF                        0x00000002
  #define EFM32_PCNT_IEN_OF_SHIFT                  1
/** Enable the direction change detect interrupt. @multiple */
  #define EFM32_PCNT_IEN_DIRCNG                    0x00000004
  #define EFM32_PCNT_IEN_DIRCNG_SHIFT              2

#define EFM32_PCNT_ROUTE_ADDR                        0x00000028
#define EFM32_PCNT_ROUTE_MASK                        0x00000300
/** Defines the location of the PCNT input pins. E.g. PCNTn_S0#0, #1 or #2.
   @multiple */
  #define EFM32_PCNT_ROUTE_VAL                     0x00000300
  #define EFM32_PCNT_ROUTE_VAL_SHIFT               8
  #define EFM32_PCNT_ROUTE_VAL_SHIFT_VAL(v)        ((EFM32_PCNT_ROUTE_VAL_##v) << 8)
  #define EFM32_PCNT_ROUTE_VAL_SET(x, v)           do { (x) = (((x) & ~0x300) | ((EFM32_PCNT_ROUTE_VAL_##v) << 8)); } while(0)
  #define EFM32_PCNT_ROUTE_VAL_SETVAL(x, v)        do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define EFM32_PCNT_ROUTE_VAL_GET(x)              (((x) >> 8) & 0x3)
    #define EFM32_PCNT_ROUTE_VAL_LOC0                0x00000000
    #define EFM32_PCNT_ROUTE_VAL_LOC1                0x00000001
    #define EFM32_PCNT_ROUTE_VAL_LOC2                0x00000002

#define EFM32_PCNT_FREEZE_ADDR                       0x0000002c
#define EFM32_PCNT_FREEZE_MASK                       0x00000001
/** When set, the update of the PCNT clock domain is postponed until this bit is
   cleared. Use this bit to update several registers simultaneously. @multiple */
  #define EFM32_PCNT_FREEZE_REGFREEZE              0x00000001
  #define EFM32_PCNT_FREEZE_REGFREEZE_SHIFT        0
  #define EFM32_PCNT_FREEZE_REGFREEZE_SHIFT_VAL(v) ((EFM32_PCNT_FREEZE_REGFREEZE_##v) << 0)
  #define EFM32_PCNT_FREEZE_REGFREEZE_SET(x, v)    do { (x) = (((x) & ~0x1) | ((EFM32_PCNT_FREEZE_REGFREEZE_##v) << 0)); } while(0)
  #define EFM32_PCNT_FREEZE_REGFREEZE_SETVAL(x, v) do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_PCNT_FREEZE_REGFREEZE_GET(x)       (((x) >> 0) & 0x1)
    #define EFM32_PCNT_FREEZE_REGFREEZE_UPDATE       0x00000000
    #define EFM32_PCNT_FREEZE_REGFREEZE_FREEZE       0x00000001

#define EFM32_PCNT_SYNCBUSY_ADDR                     0x00000030
#define EFM32_PCNT_SYNCBUSY_MASK                     0x00000007
/** Set when the value written to CTRL is being synchronized. @multiple */
  #define EFM32_PCNT_SYNCBUSY_CTRL                 0x00000001
  #define EFM32_PCNT_SYNCBUSY_CTRL_SHIFT           0
/** Set when the value written to CMD is being synchronized. @multiple */
  #define EFM32_PCNT_SYNCBUSY_CMD                  0x00000002
  #define EFM32_PCNT_SYNCBUSY_CMD_SHIFT            1
/** Set when the value written to TOPB is being synchronized. @multiple */
  #define EFM32_PCNT_SYNCBUSY_TOPB                 0x00000004
  #define EFM32_PCNT_SYNCBUSY_TOPB_SHIFT           2

#endif

