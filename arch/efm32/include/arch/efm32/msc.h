/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs -O arch/efm32/include/arch/efm32/msc.h cdefs_use_reg_mask=1  \
     cdefs_use_field_setval=1 cdefs_use_field_shift=1 cdefs_use_field_set=1
*/

#ifndef _EFM32_MSC_BFGEN_DEFS_
#define _EFM32_MSC_BFGEN_DEFS_

#define EFM32_MSC_CTRL_ADDR                          0x00000000
#define EFM32_MSC_CTRL_MASK                          0x00000001
  #define EFM32_MSC_CTRL_BUSFAULT_SHIFT            0
  #define EFM32_MSC_CTRL_BUSFAULT(v)               ((EFM32_MSC_CTRL_BUSFAULT_##v) << 0)
  #define EFM32_MSC_CTRL_BUSFAULT_SET(x, v)        do { (x) = (((x) & ~0x1) | ((EFM32_MSC_CTRL_BUSFAULT_##v) << 0)); } while(0)
  #define EFM32_MSC_CTRL_BUSFAULT_SETVAL(x, v)     do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_MSC_CTRL_BUSFAULT_GET(x)           (((x) >> 0) & 0x1)
    #define EFM32_MSC_CTRL_BUSFAULT_GENERATE         0x00000000
    #define EFM32_MSC_CTRL_BUSFAULT_IGNORE           0x00000001

#define EFM32_MSC_READCTRL_ADDR                      0x00000004
#define EFM32_MSC_READCTRL_MASK                      0x00000007
  #define EFM32_MSC_READCTRL_MODE_SHIFT            0
  #define EFM32_MSC_READCTRL_MODE(v)               ((EFM32_MSC_READCTRL_MODE_##v) << 0)
  #define EFM32_MSC_READCTRL_MODE_SET(x, v)        do { (x) = (((x) & ~0x7) | ((EFM32_MSC_READCTRL_MODE_##v) << 0)); } while(0)
  #define EFM32_MSC_READCTRL_MODE_SETVAL(x, v)     do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define EFM32_MSC_READCTRL_MODE_GET(x)           (((x) >> 0) & 0x7)
    #define EFM32_MSC_READCTRL_MODE_WS0              0x00000000
    #define EFM32_MSC_READCTRL_MODE_WS1              0x00000001
    #define EFM32_MSC_READCTRL_MODE_WS0SCBTP         0x00000002
    #define EFM32_MSC_READCTRL_MODE_WS1SCBTP         0x00000003
    #define EFM32_MSC_READCTRL_MODE_WS2              0x00000004
    #define EFM32_MSC_READCTRL_MODE_WS2SCBTP         0x00000005
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
  #define EFM32_MSC_READCTRL_IFCDIS                0x00000008
  #define EFM32_MSC_READCTRL_IFCDIS_SHIFT          3
  #define EFM32_MSC_READCTRL_IFCDIS_SET(x, v)      do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define EFM32_MSC_READCTRL_AIDIS                 0x00000010
  #define EFM32_MSC_READCTRL_AIDIS_SHIFT           4
  #define EFM32_MSC_READCTRL_AIDIS_SET(x, v)       do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
# endif
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO)
  #define EFM32_MSC_READCTRL_ICCDIS                0x00000020
  #define EFM32_MSC_READCTRL_ICCDIS_SHIFT          5
  #define EFM32_MSC_READCTRL_ICCDIS_SET(x, v)      do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define EFM32_MSC_READCTRL_EBICDIS               0x00000040
  #define EFM32_MSC_READCTRL_EBICDIS_SHIFT         6
  #define EFM32_MSC_READCTRL_EBICDIS_SET(x, v)     do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
# endif
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
  #define EFM32_MSC_READCTRL_RAMCEN                0x00000080
  #define EFM32_MSC_READCTRL_RAMCEN_SHIFT          7
  #define EFM32_MSC_READCTRL_RAMCEN_SET(x, v)      do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
# endif
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO)
  #define EFM32_MSC_READCTRL_BUSSTRATEGY_SHIFT     16
  #define EFM32_MSC_READCTRL_BUSSTRATEGY(v)        ((EFM32_MSC_READCTRL_BUSSTRATEGY_##v) << 16)
  #define EFM32_MSC_READCTRL_BUSSTRATEGY_SET(x, v) do { (x) = (((x) & ~0x30000) | ((EFM32_MSC_READCTRL_BUSSTRATEGY_##v) << 16)); } while(0)
  #define EFM32_MSC_READCTRL_BUSSTRATEGY_SETVAL(x, v) do { (x) = (((x) & ~0x30000) | ((v) << 16)); } while(0)
  #define EFM32_MSC_READCTRL_BUSSTRATEGY_GET(x)    (((x) >> 16) & 0x3)
    #define EFM32_MSC_READCTRL_BUSSTRATEGY_CPU       0x00000000
    #define EFM32_MSC_READCTRL_BUSSTRATEGY_DMA       0x00000001
    #define EFM32_MSC_READCTRL_BUSSTRATEGY_DMAEM1    0x00000002
    #define EFM32_MSC_READCTRL_BUSSTRATEGY_NONE      0x00000003
# endif

#define EFM32_MSC_WRITECTRL_ADDR                     0x00000008
#define EFM32_MSC_WRITECTRL_MASK                     0x00000003
  #define EFM32_MSC_WRITECTRL_WREN                 0x00000001
  #define EFM32_MSC_WRITECTRL_WREN_SHIFT           0
  #define EFM32_MSC_WRITECTRL_WREN_SET(x, v)       do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_MSC_WRITECTRL_IRQERASEABORT        0x00000002
  #define EFM32_MSC_WRITECTRL_IRQERASEABORT_SHIFT  1
  #define EFM32_MSC_WRITECTRL_IRQERASEABORT_SET(x, v) do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
# if defined(CONFIG_EFM32_GIANT_GECKO)
  #define EFM32_MSC_WRITECTRL_WDOUBLE              0x00000004
  #define EFM32_MSC_WRITECTRL_WDOUBLE_SHIFT        2
  #define EFM32_MSC_WRITECTRL_WDOUBLE_SET(x, v)    do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define EFM32_MSC_WRITECTRL_LPWRITE              0x00000008
  #define EFM32_MSC_WRITECTRL_LPWRITE_SHIFT        3
  #define EFM32_MSC_WRITECTRL_LPWRITE_SET(x, v)    do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define EFM32_MSC_WRITECTRL_LPERASE              0x00000010
  #define EFM32_MSC_WRITECTRL_LPERASE_SHIFT        4
  #define EFM32_MSC_WRITECTRL_LPERASE_SET(x, v)    do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define EFM32_MSC_WRITECTRL_RWWEN                0x00000020
  #define EFM32_MSC_WRITECTRL_RWWEN_SHIFT          5
  #define EFM32_MSC_WRITECTRL_RWWEN_SET(x, v)      do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
# endif

#define EFM32_MSC_WRITECMD_ADDR                      0x0000000c
#define EFM32_MSC_WRITECMD_MASK                      0x0000001f
  #define EFM32_MSC_WRITECMD_LADDRIM               0x00000001
  #define EFM32_MSC_WRITECMD_LADDRIM_SHIFT         0
  #define EFM32_MSC_WRITECMD_LADDRIM_SET(x, v)     do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_MSC_WRITECMD_ERASEPAGE             0x00000002
  #define EFM32_MSC_WRITECMD_ERASEPAGE_SHIFT       1
  #define EFM32_MSC_WRITECMD_ERASEPAGE_SET(x, v)   do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define EFM32_MSC_WRITECMD_WRITEEND              0x00000004
  #define EFM32_MSC_WRITECMD_WRITEEND_SHIFT        2
  #define EFM32_MSC_WRITECMD_WRITEEND_SET(x, v)    do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define EFM32_MSC_WRITECMD_WRITEONCE             0x00000008
  #define EFM32_MSC_WRITECMD_WRITEONCE_SHIFT       3
  #define EFM32_MSC_WRITECMD_WRITEONCE_SET(x, v)   do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define EFM32_MSC_WRITECMD_WRITETRIG             0x00000010
  #define EFM32_MSC_WRITECMD_WRITETRIG_SHIFT       4
  #define EFM32_MSC_WRITECMD_WRITETRIG_SET(x, v)   do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
  #define EFM32_MSC_WRITECMD_ERASEABORT            0x00000020
  #define EFM32_MSC_WRITECMD_ERASEABORT_SHIFT      5
  #define EFM32_MSC_WRITECMD_ERASEABORT_SET(x, v)  do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define EFM32_MSC_WRITECMD_ERASEMAIN0            0x00000100
  #define EFM32_MSC_WRITECMD_ERASEMAIN0_SHIFT      8
  #define EFM32_MSC_WRITECMD_ERASEMAIN0_SET(x, v)  do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
# endif
# if defined(CONFIG_EFM32_GIANT_GECKO)
  #define EFM32_MSC_WRITECMD_ERASEMAIN1            0x00000200
  #define EFM32_MSC_WRITECMD_ERASEMAIN1_SHIFT      9
  #define EFM32_MSC_WRITECMD_ERASEMAIN1_SET(x, v)  do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
# endif
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
  #define EFM32_MSC_WRITECMD_CLEARWDATA            0x00001000
  #define EFM32_MSC_WRITECMD_CLEARWDATA_SHIFT      12
  #define EFM32_MSC_WRITECMD_CLEARWDATA_SET(x, v)  do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
# endif

#define EFM32_MSC_ADDRB_ADDR                         0x00000010
#define EFM32_MSC_ADDRB_MASK                         0x00000000

#define EFM32_MSC_WDATA_ADDR                         0x00000018
#define EFM32_MSC_WDATA_MASK                         0x00000000

#define EFM32_MSC_STATUS_ADDR                        0x0000001c
#define EFM32_MSC_STATUS_MASK                        0x0000003f
  #define EFM32_MSC_STATUS_BUSY                    0x00000001
  #define EFM32_MSC_STATUS_BUSY_SHIFT              0
  #define EFM32_MSC_STATUS_BUSY_SET(x, v)          do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_MSC_STATUS_LOCKED                  0x00000002
  #define EFM32_MSC_STATUS_LOCKED_SHIFT            1
  #define EFM32_MSC_STATUS_LOCKED_SET(x, v)        do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define EFM32_MSC_STATUS_INVADDR                 0x00000004
  #define EFM32_MSC_STATUS_INVADDR_SHIFT           2
  #define EFM32_MSC_STATUS_INVADDR_SET(x, v)       do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define EFM32_MSC_STATUS_WDATAREADY              0x00000008
  #define EFM32_MSC_STATUS_WDATAREADY_SHIFT        3
  #define EFM32_MSC_STATUS_WDATAREADY_SET(x, v)    do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define EFM32_MSC_STATUS_WORDTIMEOUT             0x00000010
  #define EFM32_MSC_STATUS_WORDTIMEOUT_SHIFT       4
  #define EFM32_MSC_STATUS_WORDTIMEOUT_SET(x, v)   do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define EFM32_MSC_STATUS_ERASEABORTED            0x00000020
  #define EFM32_MSC_STATUS_ERASEABORTED_SHIFT      5
  #define EFM32_MSC_STATUS_ERASEABORTED_SET(x, v)  do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
  #define EFM32_MSC_STATUS_PCRUNNING               0x00000040
  #define EFM32_MSC_STATUS_PCRUNNING_SHIFT         6
  #define EFM32_MSC_STATUS_PCRUNNING_SET(x, v)     do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
# endif

#define EFM32_MSC_IF_ADDR                            0x0000002c
#define EFM32_MSC_IF_MASK                            0x00000003
  #define EFM32_MSC_IF_ERASE                       0x00000001
  #define EFM32_MSC_IF_ERASE_SHIFT                 0
  #define EFM32_MSC_IF_ERASE_SET(x, v)             do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_MSC_IF_WRITE                       0x00000002
  #define EFM32_MSC_IF_WRITE_SHIFT                 1
  #define EFM32_MSC_IF_WRITE_SET(x, v)             do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
  #define EFM32_MSC_IF_CHOF                        0x00000004
  #define EFM32_MSC_IF_CHOF_SHIFT                  2
  #define EFM32_MSC_IF_CHOF_SET(x, v)              do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define EFM32_MSC_IF_CMOF                        0x00000008
  #define EFM32_MSC_IF_CMOF_SHIFT                  3
  #define EFM32_MSC_IF_CMOF_SET(x, v)              do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
# endif

#define EFM32_MSC_IFS_ADDR                           0x00000030
#define EFM32_MSC_IFS_MASK                           0x00000003
  #define EFM32_MSC_IFS_ERASE                      0x00000001
  #define EFM32_MSC_IFS_ERASE_SHIFT                0
  #define EFM32_MSC_IFS_ERASE_SET(x, v)            do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_MSC_IFS_WRITE                      0x00000002
  #define EFM32_MSC_IFS_WRITE_SHIFT                1
  #define EFM32_MSC_IFS_WRITE_SET(x, v)            do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
  #define EFM32_MSC_IFS_CHOF                       0x00000004
  #define EFM32_MSC_IFS_CHOF_SHIFT                 2
  #define EFM32_MSC_IFS_CHOF_SET(x, v)             do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define EFM32_MSC_IFS_CMOF                       0x00000008
  #define EFM32_MSC_IFS_CMOF_SHIFT                 3
  #define EFM32_MSC_IFS_CMOF_SET(x, v)             do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
# endif

#define EFM32_MSC_IFC_ADDR                           0x00000034
#define EFM32_MSC_IFC_MASK                           0x00000003
  #define EFM32_MSC_IFC_ERASE                      0x00000001
  #define EFM32_MSC_IFC_ERASE_SHIFT                0
  #define EFM32_MSC_IFC_ERASE_SET(x, v)            do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_MSC_IFC_WRITE                      0x00000002
  #define EFM32_MSC_IFC_WRITE_SHIFT                1
  #define EFM32_MSC_IFC_WRITE_SET(x, v)            do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
  #define EFM32_MSC_IFC_CHOF                       0x00000004
  #define EFM32_MSC_IFC_CHOF_SHIFT                 2
  #define EFM32_MSC_IFC_CHOF_SET(x, v)             do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define EFM32_MSC_IFC_CMOF                       0x00000008
  #define EFM32_MSC_IFC_CMOF_SHIFT                 3
  #define EFM32_MSC_IFC_CMOF_SET(x, v)             do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
# endif

#define EFM32_MSC_IEN_ADDR                           0x00000038
#define EFM32_MSC_IEN_MASK                           0x00000003
  #define EFM32_MSC_IEN_ERASE                      0x00000001
  #define EFM32_MSC_IEN_ERASE_SHIFT                0
  #define EFM32_MSC_IEN_ERASE_SET(x, v)            do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_MSC_IEN_WRITE                      0x00000002
  #define EFM32_MSC_IEN_WRITE_SHIFT                1
  #define EFM32_MSC_IEN_WRITE_SET(x, v)            do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
  #define EFM32_MSC_IEN_CHOF                       0x00000004
  #define EFM32_MSC_IEN_CHOF_SHIFT                 2
  #define EFM32_MSC_IEN_CHOF_SET(x, v)             do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define EFM32_MSC_IEN_CMOF                       0x00000008
  #define EFM32_MSC_IEN_CMOF_SHIFT                 3
  #define EFM32_MSC_IEN_CMOF_SET(x, v)             do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
# endif

#define EFM32_MSC_LOCK_ADDR                          0x0000003c
#define EFM32_MSC_LOCK_MASK                          0x0000ffff
  #define EFM32_MSC_LOCK_LOCKKEY_SHIFT             0
  #define EFM32_MSC_LOCK_LOCKKEY(v)                ((EFM32_MSC_LOCK_LOCKKEY_##v) << 0)
  #define EFM32_MSC_LOCK_LOCKKEY_SET(x, v)         do { (x) = (((x) & ~0xffff) | ((EFM32_MSC_LOCK_LOCKKEY_##v) << 0)); } while(0)
  #define EFM32_MSC_LOCK_LOCKKEY_SETVAL(x, v)      do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_MSC_LOCK_LOCKKEY_GET(x)            (((x) >> 0) & 0xffff)
/** unlocking write key */
    #define EFM32_MSC_LOCK_LOCKKEY_UNLOCK            0x00001b71

# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
#define EFM32_MSC_CMD_ADDR                           0x00000040
#define EFM32_MSC_CMD_MASK                           0x00000007
  #define EFM32_MSC_CMD_INVCACHE                   0x00000001
  #define EFM32_MSC_CMD_INVCACHE_SHIFT             0
  #define EFM32_MSC_CMD_INVCACHE_SET(x, v)         do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_MSC_CMD_STARTPC                    0x00000002
  #define EFM32_MSC_CMD_STARTPC_SHIFT              1
  #define EFM32_MSC_CMD_STARTPC_SET(x, v)          do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define EFM32_MSC_CMD_STOPPC                     0x00000004
  #define EFM32_MSC_CMD_STOPPC_SHIFT               2
  #define EFM32_MSC_CMD_STOPPC_SET(x, v)           do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
# endif

# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
#define EFM32_MSC_CACHEHITS_ADDR                     0x00000044
#define EFM32_MSC_CACHEHITS_MASK                     0x000fffff
  #define EFM32_MSC_CACHEHITS_COUNT_SHIFT          0
  #define EFM32_MSC_CACHEHITS_COUNT(v)             ((v) << 0)
  #define EFM32_MSC_CACHEHITS_COUNT_SET(x, v)      do { (x) = (((x) & ~0xfffff) | ((v) << 0)); } while(0)
  #define EFM32_MSC_CACHEHITS_COUNT_GET(x)         (((x) >> 0) & 0xfffff)
# endif

# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
#define EFM32_MSC_CACHEMISSES_ADDR                   0x00000048
#define EFM32_MSC_CACHEMISSES_MASK                   0x000fffff
  #define EFM32_MSC_CACHEMISSES_COUNT_SHIFT        0
  #define EFM32_MSC_CACHEMISSES_COUNT(v)           ((v) << 0)
  #define EFM32_MSC_CACHEMISSES_COUNT_SET(x, v)    do { (x) = (((x) & ~0xfffff) | ((v) << 0)); } while(0)
  #define EFM32_MSC_CACHEMISSES_COUNT_GET(x)       (((x) >> 0) & 0xfffff)
# endif

# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
#define EFM32_MSC_TIMEBASE_ADDR                      0x00000050
#define EFM32_MSC_TIMEBASE_MASK                      0x0001003f
  #define EFM32_MSC_TIMEBASE_BASE_SHIFT            0
  #define EFM32_MSC_TIMEBASE_BASE(v)               ((v) << 0)
  #define EFM32_MSC_TIMEBASE_BASE_SET(x, v)        do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define EFM32_MSC_TIMEBASE_BASE_GET(x)           (((x) >> 0) & 0x3f)
  #define EFM32_MSC_TIMEBASE_PERIOD                0x00010000
  #define EFM32_MSC_TIMEBASE_PERIOD_SHIFT          16
  #define EFM32_MSC_TIMEBASE_PERIOD_SET(x, v)      do { (x) = (((x) & ~0x10000) | ((v) << 16)); } while(0)
# endif

# if defined(CONFIG_EFM32_LEOPARD_GECKO) || defined(CONFIG_EFM32_WONDER_GECKO) || defined(CONFIG_EFM32_GIANT_GECKO) || defined(CONFIG_EFM32_ZERO_GECKO)
#define EFM32_MSC_MASSLOCK_ADDR                      0x00000054
#define EFM32_MSC_MASSLOCK_MASK                      0x0000ffff
  #define EFM32_MSC_MASSLOCK_LOCKKEY_SHIFT         0
  #define EFM32_MSC_MASSLOCK_LOCKKEY(v)            ((EFM32_MSC_MASSLOCK_LOCKKEY_##v) << 0)
  #define EFM32_MSC_MASSLOCK_LOCKKEY_SET(x, v)     do { (x) = (((x) & ~0xffff) | ((EFM32_MSC_MASSLOCK_LOCKKEY_##v) << 0)); } while(0)
  #define EFM32_MSC_MASSLOCK_LOCKKEY_SETVAL(x, v)  do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_MSC_MASSLOCK_LOCKKEY_GET(x)        (((x) >> 0) & 0xffff)
/** unlocking write key */
    #define EFM32_MSC_MASSLOCK_LOCKKEY_UNLOCK        0x0000631a
# endif

# if defined(CONFIG_EFM32_ZERO_GECKO)
#define EFM32_MSC_IRQLATENCY_ADDR                    0x00000058
#define EFM32_MSC_IRQLATENCY_MASK                    0x000000ff
  #define EFM32_MSC_IRQLATENCY_IRQLATENCY_SHIFT    0
  #define EFM32_MSC_IRQLATENCY_IRQLATENCY(v)       ((v) << 0)
  #define EFM32_MSC_IRQLATENCY_IRQLATENCY_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFM32_MSC_IRQLATENCY_IRQLATENCY_GET(x)   (((x) >> 0) & 0xff)
# endif

#endif

