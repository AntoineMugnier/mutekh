/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1                \
     cdefs_use_field_shift=1 cdefs_use_field_shifted_mask=1                    \
     cdefs_sfx_field_shifter=_SHIFT_VAL
*/

#ifndef _EFM32_LESENSE_BFGEN_DEFS_
#define _EFM32_LESENSE_BFGEN_DEFS_

/** Control Register @multiple */
#define EFM32_LESENSE_CTRL_ADDR                      0x00000000
#define EFM32_LESENSE_CTRL_MASK                      0x00772eff
/** Configure scan mode @multiple */
  #define EFM32_LESENSE_CTRL_SCANMODE              0x00000003
  #define EFM32_LESENSE_CTRL_SCANMODE_SHIFT        0
  #define EFM32_LESENSE_CTRL_SCANMODE_SHIFT_VAL(v) ((EFM32_LESENSE_CTRL_SCANMODE_##v) << 0)
  #define EFM32_LESENSE_CTRL_SCANMODE_SET(x, v)    do { (x) = (((x) & ~0x3) | ((EFM32_LESENSE_CTRL_SCANMODE_##v) << 0)); } while(0)
  #define EFM32_LESENSE_CTRL_SCANMODE_SETVAL(x, v) do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_CTRL_SCANMODE_GET(x)       (((x) >> 0) & 0x3)
/** A new scan is started each time the period counter overflows */
    #define EFM32_LESENSE_CTRL_SCANMODE_PERIODIC     0x00000000
/** A single scan is performed when START in CMD is set */
    #define EFM32_LESENSE_CTRL_SCANMODE_ONESHOT      0x00000001
/** Pulse on PRS channel */
    #define EFM32_LESENSE_CTRL_SCANMODE_PRS          0x00000002
/** Scan start PRS select @multiple */
  #define EFM32_LESENSE_CTRL_PRSSEL                0x0000003c
  #define EFM32_LESENSE_CTRL_PRSSEL_SHIFT          2
  #define EFM32_LESENSE_CTRL_PRSSEL_SHIFT_VAL(v)   ((EFM32_LESENSE_CTRL_PRSSEL_##v) << 2)
  #define EFM32_LESENSE_CTRL_PRSSEL_SET(x, v)      do { (x) = (((x) & ~0x3c) | ((EFM32_LESENSE_CTRL_PRSSEL_##v) << 2)); } while(0)
  #define EFM32_LESENSE_CTRL_PRSSEL_SETVAL(x, v)   do { (x) = (((x) & ~0x3c) | ((v) << 2)); } while(0)
  #define EFM32_LESENSE_CTRL_PRSSEL_GET(x)         (((x) >> 2) & 0xf)
/** PRS Channel 0 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH0         0x00000000
/** PRS Channel 1 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH1         0x00000001
/** PRS Channel 2 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH2         0x00000002
/** PRS Channel 3 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH3         0x00000003
/** PRS Channel 4 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH4         0x00000004
/** PRS Channel 5 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH5         0x00000005
/** PRS Channel 6 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH6         0x00000006
/** PRS Channel 7 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH7         0x00000007
/** PRS Channel 8 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH8         0x00000008
/** PRS Channel 9 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH9         0x00000009
/** PRS Channel 10 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH10        0x0000000a
/** PRS Channel 11 selected as input */
    #define EFM32_LESENSE_CTRL_PRSSEL_PRSCH11        0x0000000b
/** Select scan configuration @multiple */
  #define EFM32_LESENSE_CTRL_SCANCONF              0x000000c0
  #define EFM32_LESENSE_CTRL_SCANCONF_SHIFT        6
  #define EFM32_LESENSE_CTRL_SCANCONF_SHIFT_VAL(v) ((EFM32_LESENSE_CTRL_SCANCONF_##v) << 6)
  #define EFM32_LESENSE_CTRL_SCANCONF_SET(x, v)    do { (x) = (((x) & ~0xc0) | ((EFM32_LESENSE_CTRL_SCANCONF_##v) << 6)); } while(0)
  #define EFM32_LESENSE_CTRL_SCANCONF_SETVAL(x, v) do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define EFM32_LESENSE_CTRL_SCANCONF_GET(x)       (((x) >> 6) & 0x3)
/** The channel configuration register registers used are directly mapped to the channel number */
    #define EFM32_LESENSE_CTRL_SCANCONF_DIRMAP       0x00000000
/** The channel configuration register registers used are CHX+8_CONF for channels 0-7 and CHX-8_CONF for channels 8-15 */
    #define EFM32_LESENSE_CTRL_SCANCONF_INVMAP       0x00000001
/** The channel configuration register registers used toggles between CHX_CONF and CHX+8_CONF when channel x triggers */
    #define EFM32_LESENSE_CTRL_SCANCONF_TOGGLE       0x00000002
/** The decoder state defines the CONF registers to be used */
    #define EFM32_LESENSE_CTRL_SCANCONF_DECDEF       0x00000003
/** Invert analog comparator 0 output @multiple */
  #define EFM32_LESENSE_CTRL_ACMP0INV              0x00000200
  #define EFM32_LESENSE_CTRL_ACMP0INV_SHIFT        9
/** Invert analog comparator 1 output @multiple */
  #define EFM32_LESENSE_CTRL_ACMP1INV              0x00000400
  #define EFM32_LESENSE_CTRL_ACMP1INV_SHIFT        10
/** Alternative excitation map @multiple */
  #define EFM32_LESENSE_CTRL_ALTEXMAP              0x00000800
  #define EFM32_LESENSE_CTRL_ALTEXMAP_SHIFT        11
/** Enable dual sample mode @multiple */
  #define EFM32_LESENSE_CTRL_DUALSAMPLE            0x00002000
  #define EFM32_LESENSE_CTRL_DUALSAMPLE_SHIFT      13
/** Result buffer overwrite @multiple */
  #define EFM32_LESENSE_CTRL_BUFOW                 0x00010000
  #define EFM32_LESENSE_CTRL_BUFOW_SHIFT           16
/** Enable storing of SCANRES @multiple */
  #define EFM32_LESENSE_CTRL_STRSCANRES            0x00020000
  #define EFM32_LESENSE_CTRL_STRSCANRES_SHIFT      17
/** Result buffer interrupt and DMA trigger level @multiple */
  #define EFM32_LESENSE_CTRL_BUFIDL                0x00040000
  #define EFM32_LESENSE_CTRL_BUFIDL_SHIFT          18
/** DMA wake-up from EM2 @multiple */
  #define EFM32_LESENSE_CTRL_DMAWU                 0x00300000
  #define EFM32_LESENSE_CTRL_DMAWU_SHIFT           20
  #define EFM32_LESENSE_CTRL_DMAWU_SHIFT_VAL(v)    ((EFM32_LESENSE_CTRL_DMAWU_##v) << 20)
  #define EFM32_LESENSE_CTRL_DMAWU_SET(x, v)       do { (x) = (((x) & ~0x300000) | ((EFM32_LESENSE_CTRL_DMAWU_##v) << 20)); } while(0)
  #define EFM32_LESENSE_CTRL_DMAWU_SETVAL(x, v)    do { (x) = (((x) & ~0x300000) | ((v) << 20)); } while(0)
  #define EFM32_LESENSE_CTRL_DMAWU_GET(x)          (((x) >> 20) & 0x3)
/** No DMA wake-up from EM2 */
    #define EFM32_LESENSE_CTRL_DMAWU_DISABLE         0x00000000
/** DMA wake-up from EM2 when data is valid in the result buffer */
    #define EFM32_LESENSE_CTRL_DMAWU_BUFDATAV        0x00000001
/** DMA wake-up from EM2 when the result buffer is full/half-full depending on BUFIDL configuration */
    #define EFM32_LESENSE_CTRL_DMAWU_BUFLEVEL        0x00000002
/** Debug Mode Run Enable @multiple */
  #define EFM32_LESENSE_CTRL_DEBUGRUN              0x00400000
  #define EFM32_LESENSE_CTRL_DEBUGRUN_SHIFT        22

/** Timing Control Register @multiple */
#define EFM32_LESENSE_TIMCTRL_ADDR                   0x00000004
#define EFM32_LESENSE_TIMCTRL_MASK                   0x00cff773
/** Prescaling factor for high frequency timer @multiple */
  #define EFM32_LESENSE_TIMCTRL_AUXPRESC           0x00000003
  #define EFM32_LESENSE_TIMCTRL_AUXPRESC_SHIFT     0
  #define EFM32_LESENSE_TIMCTRL_AUXPRESC_SHIFT_VAL(v) ((EFM32_LESENSE_TIMCTRL_AUXPRESC_##v) << 0)
  #define EFM32_LESENSE_TIMCTRL_AUXPRESC_SET(x, v) do { (x) = (((x) & ~0x3) | ((EFM32_LESENSE_TIMCTRL_AUXPRESC_##v) << 0)); } while(0)
  #define EFM32_LESENSE_TIMCTRL_AUXPRESC_SETVAL(x, v) do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_TIMCTRL_AUXPRESC_GET(x)    (((x) >> 0) & 0x3)
/** High frequency timer is clocked with AUXHFRCO/1 */
    #define EFM32_LESENSE_TIMCTRL_AUXPRESC_DIV1      0x00000000
/** High frequency timer is clocked with AUXHFRCO/2 */
    #define EFM32_LESENSE_TIMCTRL_AUXPRESC_DIV2      0x00000001
/** High frequency timer is clocked with AUXHFRCO/4 */
    #define EFM32_LESENSE_TIMCTRL_AUXPRESC_DIV4      0x00000002
/** High frequency timer is clocked with AUXHFRCO/8 */
    #define EFM32_LESENSE_TIMCTRL_AUXPRESC_DIV8      0x00000003
/** Prescaling factor for low frequency timer @multiple */
  #define EFM32_LESENSE_TIMCTRL_LFPRESC            0x00000070
  #define EFM32_LESENSE_TIMCTRL_LFPRESC_SHIFT      4
  #define EFM32_LESENSE_TIMCTRL_LFPRESC_SHIFT_VAL(v) ((EFM32_LESENSE_TIMCTRL_LFPRESC_##v) << 4)
  #define EFM32_LESENSE_TIMCTRL_LFPRESC_SET(x, v)  do { (x) = (((x) & ~0x70) | ((EFM32_LESENSE_TIMCTRL_LFPRESC_##v) << 4)); } while(0)
  #define EFM32_LESENSE_TIMCTRL_LFPRESC_SETVAL(x, v) do { (x) = (((x) & ~0x70) | ((v) << 4)); } while(0)
  #define EFM32_LESENSE_TIMCTRL_LFPRESC_GET(x)     (((x) >> 4) & 0x7)
/** Low frequency timer is clocked with LFACLKLESENSE/1 */
    #define EFM32_LESENSE_TIMCTRL_LFPRESC_DIV1       0x00000000
/** Low frequency timer is clocked with LFACLKLESENSE/2 */
    #define EFM32_LESENSE_TIMCTRL_LFPRESC_DIV2       0x00000001
/** Low frequency timer is clocked with LFACLKLESENSE/4 */
    #define EFM32_LESENSE_TIMCTRL_LFPRESC_DIV4       0x00000002
/** Low frequency timer is clocked with LFACLKLESENSE/8 */
    #define EFM32_LESENSE_TIMCTRL_LFPRESC_DIV8       0x00000003
/** Low frequency timer is clocked with LFACLKLESENSE/16 */
    #define EFM32_LESENSE_TIMCTRL_LFPRESC_DIV16      0x00000004
/** Low frequency timer is clocked with LFACLKLESENSE/32 */
    #define EFM32_LESENSE_TIMCTRL_LFPRESC_DIV32      0x00000005
/** Low frequency timer is clocked with LFACLKLESENSE/64 */
    #define EFM32_LESENSE_TIMCTRL_LFPRESC_DIV64      0x00000006
/** Low frequency timer is clocked with LFACLKLESENSE/128 */
    #define EFM32_LESENSE_TIMCTRL_LFPRESC_DIV128     0x00000007
/** Period counter prescaling @multiple */
  #define EFM32_LESENSE_TIMCTRL_PCPRESC            0x00000700
  #define EFM32_LESENSE_TIMCTRL_PCPRESC_SHIFT      8
  #define EFM32_LESENSE_TIMCTRL_PCPRESC_SHIFT_VAL(v) ((EFM32_LESENSE_TIMCTRL_PCPRESC_##v) << 8)
  #define EFM32_LESENSE_TIMCTRL_PCPRESC_SET(x, v)  do { (x) = (((x) & ~0x700) | ((EFM32_LESENSE_TIMCTRL_PCPRESC_##v) << 8)); } while(0)
  #define EFM32_LESENSE_TIMCTRL_PCPRESC_SETVAL(x, v) do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define EFM32_LESENSE_TIMCTRL_PCPRESC_GET(x)     (((x) >> 8) & 0x7)
/** The period counter clock frequency is LFACLKLESENSE/1 */
    #define EFM32_LESENSE_TIMCTRL_PCPRESC_DIV1       0x00000000
/** The period counter clock frequency is LFACLKLESENSE/2 */
    #define EFM32_LESENSE_TIMCTRL_PCPRESC_DIV2       0x00000001
/** The period counter clock frequency is LFACLKLESENSE/4 */
    #define EFM32_LESENSE_TIMCTRL_PCPRESC_DIV4       0x00000002
/** The period counter clock frequency is LFACLKLESENSE/8 */
    #define EFM32_LESENSE_TIMCTRL_PCPRESC_DIV8       0x00000003
/** The period counter clock frequency is LFACLKLESENSE/16 */
    #define EFM32_LESENSE_TIMCTRL_PCPRESC_DIV16      0x00000004
/** The period counter clock frequency is LFACLKLESENSE/32 */
    #define EFM32_LESENSE_TIMCTRL_PCPRESC_DIV32      0x00000005
/** The period counter clock frequency is LFACLKLESENSE/64 */
    #define EFM32_LESENSE_TIMCTRL_PCPRESC_DIV64      0x00000006
/** The period counter clock frequency is LFACLKLESENSE/128 */
    #define EFM32_LESENSE_TIMCTRL_PCPRESC_DIV128     0x00000007
/** Period counter top value @multiple */
  #define EFM32_LESENSE_TIMCTRL_PCTOP              0x000ff000
  #define EFM32_LESENSE_TIMCTRL_PCTOP_SHIFT        12
  #define EFM32_LESENSE_TIMCTRL_PCTOP_SHIFT_VAL(v) ((v) << 12)
  #define EFM32_LESENSE_TIMCTRL_PCTOP_SET(x, v)    do { (x) = (((x) & ~0xff000) | ((v) << 12)); } while(0)
  #define EFM32_LESENSE_TIMCTRL_PCTOP_GET(x)       (((x) >> 12) & 0xff)
/** Start delay configuration @multiple */
  #define EFM32_LESENSE_TIMCTRL_STARTDLY           0x00c00000
  #define EFM32_LESENSE_TIMCTRL_STARTDLY_SHIFT     22
  #define EFM32_LESENSE_TIMCTRL_STARTDLY_SHIFT_VAL(v) ((v) << 22)
  #define EFM32_LESENSE_TIMCTRL_STARTDLY_SET(x, v) do { (x) = (((x) & ~0xc00000) | ((v) << 22)); } while(0)
  #define EFM32_LESENSE_TIMCTRL_STARTDLY_GET(x)    (((x) >> 22) & 0x3)

/** Peripheral Control Register @multiple */
#define EFM32_LESENSE_PERCTRL_ADDR                   0x00000008
#define EFM32_LESENSE_PERCTRL_MASK                   0x0cf47fff
/** DAC CH0 data selection @multiple */
  #define EFM32_LESENSE_PERCTRL_DACCH0DATA         0x00000001
  #define EFM32_LESENSE_PERCTRL_DACCH0DATA_SHIFT   0
/** DAC CH1 data selection @multiple */
  #define EFM32_LESENSE_PERCTRL_DACCH1DATA         0x00000002
  #define EFM32_LESENSE_PERCTRL_DACCH1DATA_SHIFT   1
/** DAC channel 0 conversion mode @multiple */
  #define EFM32_LESENSE_PERCTRL_DACCH0CONV         0x0000000c
  #define EFM32_LESENSE_PERCTRL_DACCH0CONV_SHIFT   2
  #define EFM32_LESENSE_PERCTRL_DACCH0CONV_SHIFT_VAL(v) ((EFM32_LESENSE_PERCTRL_DACCH0CONV_##v) << 2)
  #define EFM32_LESENSE_PERCTRL_DACCH0CONV_SET(x, v) do { (x) = (((x) & ~0xc) | ((EFM32_LESENSE_PERCTRL_DACCH0CONV_##v) << 2)); } while(0)
  #define EFM32_LESENSE_PERCTRL_DACCH0CONV_SETVAL(x, v) do { (x) = (((x) & ~0xc) | ((v) << 2)); } while(0)
  #define EFM32_LESENSE_PERCTRL_DACCH0CONV_GET(x)  (((x) >> 2) & 0x3)
/** LESENSE does not control DAC CH0 */
    #define EFM32_LESENSE_PERCTRL_DACCH0CONV_DISABLE 0x00000000
/** DAC channel 0 is driven in continuous mode */
    #define EFM32_LESENSE_PERCTRL_DACCH0CONV_CONTINUOUS 0x00000001
/** DAC channel 0 is driven in sample hold mode */
    #define EFM32_LESENSE_PERCTRL_DACCH0CONV_SAMPLEHOLD 0x00000002
/** DAC channel 0 is driven in sample off mode */
    #define EFM32_LESENSE_PERCTRL_DACCH0CONV_SAMPLEOFF 0x00000003
/** DAC channel 1 conversion mode @multiple */
  #define EFM32_LESENSE_PERCTRL_DACCH1CONV         0x00000030
  #define EFM32_LESENSE_PERCTRL_DACCH1CONV_SHIFT   4
  #define EFM32_LESENSE_PERCTRL_DACCH1CONV_SHIFT_VAL(v) ((EFM32_LESENSE_PERCTRL_DACCH1CONV_##v) << 4)
  #define EFM32_LESENSE_PERCTRL_DACCH1CONV_SET(x, v) do { (x) = (((x) & ~0x30) | ((EFM32_LESENSE_PERCTRL_DACCH1CONV_##v) << 4)); } while(0)
  #define EFM32_LESENSE_PERCTRL_DACCH1CONV_SETVAL(x, v) do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define EFM32_LESENSE_PERCTRL_DACCH1CONV_GET(x)  (((x) >> 4) & 0x3)
/** LESENSE does not control DAC CH1 */
    #define EFM32_LESENSE_PERCTRL_DACCH1CONV_DISABLE 0x00000000
/** DAC channel 1 is driven in continuous mode */
    #define EFM32_LESENSE_PERCTRL_DACCH1CONV_CONTINUOUS 0x00000001
/** DAC channel 1 is driven in sample hold mode */
    #define EFM32_LESENSE_PERCTRL_DACCH1CONV_SAMPLEHOLD 0x00000002
/** DAC channel 1 is driven in sample off mode */
    #define EFM32_LESENSE_PERCTRL_DACCH1CONV_SAMPLEOFF 0x00000003
/** DAC channel 0 output mode @multiple */
  #define EFM32_LESENSE_PERCTRL_DACCH0OUT          0x000000c0
  #define EFM32_LESENSE_PERCTRL_DACCH0OUT_SHIFT    6
  #define EFM32_LESENSE_PERCTRL_DACCH0OUT_SHIFT_VAL(v) ((EFM32_LESENSE_PERCTRL_DACCH0OUT_##v) << 6)
  #define EFM32_LESENSE_PERCTRL_DACCH0OUT_SET(x, v) do { (x) = (((x) & ~0xc0) | ((EFM32_LESENSE_PERCTRL_DACCH0OUT_##v) << 6)); } while(0)
  #define EFM32_LESENSE_PERCTRL_DACCH0OUT_SETVAL(x, v) do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define EFM32_LESENSE_PERCTRL_DACCH0OUT_GET(x)   (((x) >> 6) & 0x3)
/** DAC CH0 output to pin and ACMP/ADC disabled */
    #define EFM32_LESENSE_PERCTRL_DACCH0OUT_DISABLE  0x00000000
/** DAC CH0 output to pin enabled, output to ADC and ACMP disabled */
    #define EFM32_LESENSE_PERCTRL_DACCH0OUT_PIN      0x00000001
/** DAC CH0 output to pin disabled, output to ADC and ACMP enabled */
    #define EFM32_LESENSE_PERCTRL_DACCH0OUT_ADCACMP  0x00000002
/** DAC CH0 output to pin, ADC, and ACMP enabled */
    #define EFM32_LESENSE_PERCTRL_DACCH0OUT_PINADCACMP 0x00000003
/** DAC channel 1 output mode @multiple */
  #define EFM32_LESENSE_PERCTRL_DACCH1OUT          0x00000300
  #define EFM32_LESENSE_PERCTRL_DACCH1OUT_SHIFT    8
  #define EFM32_LESENSE_PERCTRL_DACCH1OUT_SHIFT_VAL(v) ((EFM32_LESENSE_PERCTRL_DACCH1OUT_##v) << 8)
  #define EFM32_LESENSE_PERCTRL_DACCH1OUT_SET(x, v) do { (x) = (((x) & ~0x300) | ((EFM32_LESENSE_PERCTRL_DACCH1OUT_##v) << 8)); } while(0)
  #define EFM32_LESENSE_PERCTRL_DACCH1OUT_SETVAL(x, v) do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define EFM32_LESENSE_PERCTRL_DACCH1OUT_GET(x)   (((x) >> 8) & 0x3)
/** DAC CH1 output to pin and ACMP/ADC disabled */
    #define EFM32_LESENSE_PERCTRL_DACCH1OUT_DISABLE  0x00000000
/** DAC CH1 output to pin enabled, output to ADC and ACMP disabled */
    #define EFM32_LESENSE_PERCTRL_DACCH1OUT_PIN      0x00000001
/** DAC CH1 output to pin disabled, output to ADC and ACMP enabled */
    #define EFM32_LESENSE_PERCTRL_DACCH1OUT_ADCACMP  0x00000002
/** DAC CH1 output to pin, ADC, and ACMP enabled */
    #define EFM32_LESENSE_PERCTRL_DACCH1OUT_PINADCACMP 0x00000003
/** DAC prescaler configuration @multiple */
  #define EFM32_LESENSE_PERCTRL_DACPRESC           0x00007c00
  #define EFM32_LESENSE_PERCTRL_DACPRESC_SHIFT     10
  #define EFM32_LESENSE_PERCTRL_DACPRESC_SHIFT_VAL(v) ((v) << 10)
  #define EFM32_LESENSE_PERCTRL_DACPRESC_SET(x, v) do { (x) = (((x) & ~0x7c00) | ((v) << 10)); } while(0)
  #define EFM32_LESENSE_PERCTRL_DACPRESC_GET(x)    (((x) >> 10) & 0x1f)
/** DAC bandgap reference used @multiple */
  #define EFM32_LESENSE_PERCTRL_DACREF             0x00040000
  #define EFM32_LESENSE_PERCTRL_DACREF_SHIFT       18
/** ACMP0 mode @multiple */
  #define EFM32_LESENSE_PERCTRL_ACMP0MODE          0x00300000
  #define EFM32_LESENSE_PERCTRL_ACMP0MODE_SHIFT    20
  #define EFM32_LESENSE_PERCTRL_ACMP0MODE_SHIFT_VAL(v) ((EFM32_LESENSE_PERCTRL_ACMP0MODE_##v) << 20)
  #define EFM32_LESENSE_PERCTRL_ACMP0MODE_SET(x, v) do { (x) = (((x) & ~0x300000) | ((EFM32_LESENSE_PERCTRL_ACMP0MODE_##v) << 20)); } while(0)
  #define EFM32_LESENSE_PERCTRL_ACMP0MODE_SETVAL(x, v) do { (x) = (((x) & ~0x300000) | ((v) << 20)); } while(0)
  #define EFM32_LESENSE_PERCTRL_ACMP0MODE_GET(x)   (((x) >> 20) & 0x3)
/** LESENSE does not control ACMP0 */
    #define EFM32_LESENSE_PERCTRL_ACMP0MODE_DISABLE  0x00000000
/** LESENSE controls the input mux (POSSEL) of ACMP0 */
    #define EFM32_LESENSE_PERCTRL_ACMP0MODE_MUX      0x00000001
/** LESENSE controls the input mux (POSSEL) and the threshold value (VDDLEVEL) of ACMP0 */
    #define EFM32_LESENSE_PERCTRL_ACMP0MODE_MUXTHRES 0x00000002
/** ACMP1 mode @multiple */
  #define EFM32_LESENSE_PERCTRL_ACMP1MODE          0x00c00000
  #define EFM32_LESENSE_PERCTRL_ACMP1MODE_SHIFT    22
  #define EFM32_LESENSE_PERCTRL_ACMP1MODE_SHIFT_VAL(v) ((EFM32_LESENSE_PERCTRL_ACMP1MODE_##v) << 22)
  #define EFM32_LESENSE_PERCTRL_ACMP1MODE_SET(x, v) do { (x) = (((x) & ~0xc00000) | ((EFM32_LESENSE_PERCTRL_ACMP1MODE_##v) << 22)); } while(0)
  #define EFM32_LESENSE_PERCTRL_ACMP1MODE_SETVAL(x, v) do { (x) = (((x) & ~0xc00000) | ((v) << 22)); } while(0)
  #define EFM32_LESENSE_PERCTRL_ACMP1MODE_GET(x)   (((x) >> 22) & 0x3)
/** LESENSE does not control ACMP1 */
    #define EFM32_LESENSE_PERCTRL_ACMP1MODE_DISABLE  0x00000000
/** LESENSE controls the input mux (POSSEL) of ACMP1 */
    #define EFM32_LESENSE_PERCTRL_ACMP1MODE_MUX      0x00000001
/** LESENSE controls the input mux and the threshold value (VDDLEVEL) of ACMP1 */
    #define EFM32_LESENSE_PERCTRL_ACMP1MODE_MUXTHRES 0x00000002
/** ACMP and DAC duty cycle mode @multiple */
  #define EFM32_LESENSE_PERCTRL_WARMUPMODE         0x0c000000
  #define EFM32_LESENSE_PERCTRL_WARMUPMODE_SHIFT   26
  #define EFM32_LESENSE_PERCTRL_WARMUPMODE_SHIFT_VAL(v) ((EFM32_LESENSE_PERCTRL_WARMUPMODE_##v) << 26)
  #define EFM32_LESENSE_PERCTRL_WARMUPMODE_SET(x, v) do { (x) = (((x) & ~0xc000000) | ((EFM32_LESENSE_PERCTRL_WARMUPMODE_##v) << 26)); } while(0)
  #define EFM32_LESENSE_PERCTRL_WARMUPMODE_SETVAL(x, v) do { (x) = (((x) & ~0xc000000) | ((v) << 26)); } while(0)
  #define EFM32_LESENSE_PERCTRL_WARMUPMODE_GET(x)  (((x) >> 26) & 0x3)
/** The analog comparators and DAC are shut down when LESENSE is idle */
    #define EFM32_LESENSE_PERCTRL_WARMUPMODE_NORMAL  0x00000000
/** The analog comparators are kept powered up when LESENSE is idle */
    #define EFM32_LESENSE_PERCTRL_WARMUPMODE_KEEPACMPWARM 0x00000001
/** The DAC is kept powered up when LESENSE is idle */
    #define EFM32_LESENSE_PERCTRL_WARMUPMODE_KEEPDACWARM 0x00000002
/** The analog comparators and DAC are kept powered up when LESENSE is idle */
    #define EFM32_LESENSE_PERCTRL_WARMUPMODE_KEEPACMPDACWARM 0x00000003

/** Decoder control Register @multiple */
#define EFM32_LESENSE_DECCTRL_ADDR                   0x0000000c
#define EFM32_LESENSE_DECCTRL_MASK                   0x03fffdff
/** Disable the decoder @multiple */
  #define EFM32_LESENSE_DECCTRL_DISABLE            0x00000001
  #define EFM32_LESENSE_DECCTRL_DISABLE_SHIFT      0
/** Enable check of current state @multiple */
  #define EFM32_LESENSE_DECCTRL_ERRCHK             0x00000002
  #define EFM32_LESENSE_DECCTRL_ERRCHK_SHIFT       1
/** Enable decoder to channel interrupt mapping @multiple */
  #define EFM32_LESENSE_DECCTRL_INTMAP             0x00000004
  #define EFM32_LESENSE_DECCTRL_INTMAP_SHIFT       2
/** Enable decoder hysteresis on PRS0 output @multiple */
  #define EFM32_LESENSE_DECCTRL_HYSTPRS0           0x00000008
  #define EFM32_LESENSE_DECCTRL_HYSTPRS0_SHIFT     3
/** Enable decoder hysteresis on PRS1 output @multiple */
  #define EFM32_LESENSE_DECCTRL_HYSTPRS1           0x00000010
  #define EFM32_LESENSE_DECCTRL_HYSTPRS1_SHIFT     4
/** Enable decoder hysteresis on PRS2 output @multiple */
  #define EFM32_LESENSE_DECCTRL_HYSTPRS2           0x00000020
  #define EFM32_LESENSE_DECCTRL_HYSTPRS2_SHIFT     5
/** Enable decoder hysteresis on interrupt requests @multiple */
  #define EFM32_LESENSE_DECCTRL_HYSTIRQ            0x00000040
  #define EFM32_LESENSE_DECCTRL_HYSTIRQ_SHIFT      6
/** Enable count mode on decoder PRS channels 0 and 1 @multiple */
  #define EFM32_LESENSE_DECCTRL_PRSCNT             0x00000080
  #define EFM32_LESENSE_DECCTRL_PRSCNT_SHIFT       7
/** "" @multiple */
  #define EFM32_LESENSE_DECCTRL_INPUT              0x00000100
  #define EFM32_LESENSE_DECCTRL_INPUT_SHIFT        8
/** "" @multiple */
  #define EFM32_LESENSE_DECCTRL_PRSSEL0            0x00003c00
  #define EFM32_LESENSE_DECCTRL_PRSSEL0_SHIFT      10
  #define EFM32_LESENSE_DECCTRL_PRSSEL0_SHIFT_VAL(v) ((EFM32_LESENSE_DECCTRL_PRSSEL0_##v) << 10)
  #define EFM32_LESENSE_DECCTRL_PRSSEL0_SET(x, v)  do { (x) = (((x) & ~0x3c00) | ((EFM32_LESENSE_DECCTRL_PRSSEL0_##v) << 10)); } while(0)
  #define EFM32_LESENSE_DECCTRL_PRSSEL0_SETVAL(x, v) do { (x) = (((x) & ~0x3c00) | ((v) << 10)); } while(0)
  #define EFM32_LESENSE_DECCTRL_PRSSEL0_GET(x)     (((x) >> 10) & 0xf)
/** PRS Channel 0 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH0     0x00000000
/** PRS Channel 1 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH1     0x00000001
/** PRS Channel 2 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH2     0x00000002
/** PRS Channel 3 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH3     0x00000003
/** PRS Channel 4 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH4     0x00000004
/** PRS Channel 5 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH5     0x00000005
/** PRS Channel 6 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH6     0x00000006
/** PRS Channel 7 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH7     0x00000007
/** PRS Channel 8 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH8     0x00000008
/** PRS Channel 9 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH9     0x00000009
/** PRS Channel 10 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH10    0x0000000a
/** PRS Channel 11 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL0_PRSCH11    0x0000000b
/** "" @multiple */
  #define EFM32_LESENSE_DECCTRL_PRSSEL1            0x0003c000
  #define EFM32_LESENSE_DECCTRL_PRSSEL1_SHIFT      14
  #define EFM32_LESENSE_DECCTRL_PRSSEL1_SHIFT_VAL(v) ((EFM32_LESENSE_DECCTRL_PRSSEL1_##v) << 14)
  #define EFM32_LESENSE_DECCTRL_PRSSEL1_SET(x, v)  do { (x) = (((x) & ~0x3c000) | ((EFM32_LESENSE_DECCTRL_PRSSEL1_##v) << 14)); } while(0)
  #define EFM32_LESENSE_DECCTRL_PRSSEL1_SETVAL(x, v) do { (x) = (((x) & ~0x3c000) | ((v) << 14)); } while(0)
  #define EFM32_LESENSE_DECCTRL_PRSSEL1_GET(x)     (((x) >> 14) & 0xf)
/** PRS Channel 0 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH0     0x00000000
/** PRS Channel 1 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH1     0x00000001
/** PRS Channel 2 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH2     0x00000002
/** PRS Channel 3 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH3     0x00000003
/** PRS Channel 4 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH4     0x00000004
/** PRS Channel 5 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH5     0x00000005
/** PRS Channel 6 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH6     0x00000006
/** PRS Channel 7 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH7     0x00000007
/** PRS Channel 8 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH8     0x00000008
/** PRS Channel 9 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH9     0x00000009
/** PRS Channel 10 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH10    0x0000000a
/** PRS Channel 11 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL1_PRSCH11    0x0000000b
/** "" @multiple */
  #define EFM32_LESENSE_DECCTRL_PRSSEL2            0x003c0000
  #define EFM32_LESENSE_DECCTRL_PRSSEL2_SHIFT      18
  #define EFM32_LESENSE_DECCTRL_PRSSEL2_SHIFT_VAL(v) ((EFM32_LESENSE_DECCTRL_PRSSEL2_##v) << 18)
  #define EFM32_LESENSE_DECCTRL_PRSSEL2_SET(x, v)  do { (x) = (((x) & ~0x3c0000) | ((EFM32_LESENSE_DECCTRL_PRSSEL2_##v) << 18)); } while(0)
  #define EFM32_LESENSE_DECCTRL_PRSSEL2_SETVAL(x, v) do { (x) = (((x) & ~0x3c0000) | ((v) << 18)); } while(0)
  #define EFM32_LESENSE_DECCTRL_PRSSEL2_GET(x)     (((x) >> 18) & 0xf)
/** PRS Channel 0 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH0     0x00000000
/** PRS Channel 1 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH1     0x00000001
/** PRS Channel 2 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH2     0x00000002
/** PRS Channel 3 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH3     0x00000003
/** PRS Channel 4 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH4     0x00000004
/** PRS Channel 5 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH5     0x00000005
/** PRS Channel 6 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH6     0x00000006
/** PRS Channel 7 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH7     0x00000007
/** PRS Channel 8 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH8     0x00000008
/** PRS Channel 9 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH9     0x00000009
/** PRS Channel 10 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH10    0x0000000a
/** PRS Channel 11 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL2_PRSCH11    0x0000000b
/** "" @multiple */
  #define EFM32_LESENSE_DECCTRL_PRSSEL3            0x03c00000
  #define EFM32_LESENSE_DECCTRL_PRSSEL3_SHIFT      22
  #define EFM32_LESENSE_DECCTRL_PRSSEL3_SHIFT_VAL(v) ((EFM32_LESENSE_DECCTRL_PRSSEL3_##v) << 22)
  #define EFM32_LESENSE_DECCTRL_PRSSEL3_SET(x, v)  do { (x) = (((x) & ~0x3c00000) | ((EFM32_LESENSE_DECCTRL_PRSSEL3_##v) << 22)); } while(0)
  #define EFM32_LESENSE_DECCTRL_PRSSEL3_SETVAL(x, v) do { (x) = (((x) & ~0x3c00000) | ((v) << 22)); } while(0)
  #define EFM32_LESENSE_DECCTRL_PRSSEL3_GET(x)     (((x) >> 22) & 0xf)
/** PRS Channel 0 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH0     0x00000000
/** PRS Channel 1 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH1     0x00000001
/** PRS Channel 2 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH2     0x00000002
/** PRS Channel 3 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH3     0x00000003
/** PRS Channel 4 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH4     0x00000004
/** PRS Channel 5 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH5     0x00000005
/** PRS Channel 6 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH6     0x00000006
/** PRS Channel 7 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH7     0x00000007
/** PRS Channel 8 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH8     0x00000008
/** PRS Channel 9 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH9     0x00000009
/** PRS Channel 10 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH10    0x0000000a
/** PRS Channel 11 selected as input */
    #define EFM32_LESENSE_DECCTRL_PRSSEL3_PRSCH11    0x0000000b

/** Bias Control Register @multiple */
#define EFM32_LESENSE_BIASCTRL_ADDR                  0x00000010
#define EFM32_LESENSE_BIASCTRL_MASK                  0x00000003
/** Select bias mode @multiple */
  #define EFM32_LESENSE_BIASCTRL_BIASMODE          0x00000003
  #define EFM32_LESENSE_BIASCTRL_BIASMODE_SHIFT    0
  #define EFM32_LESENSE_BIASCTRL_BIASMODE_SHIFT_VAL(v) ((EFM32_LESENSE_BIASCTRL_BIASMODE_##v) << 0)
  #define EFM32_LESENSE_BIASCTRL_BIASMODE_SET(x, v) do { (x) = (((x) & ~0x3) | ((EFM32_LESENSE_BIASCTRL_BIASMODE_##v) << 0)); } while(0)
  #define EFM32_LESENSE_BIASCTRL_BIASMODE_SETVAL(x, v) do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_BIASCTRL_BIASMODE_GET(x)   (((x) >> 0) & 0x3)
/** Bias module duty cycled between low power and high accuracy mode */
    #define EFM32_LESENSE_BIASCTRL_BIASMODE_DUTYCYCLE 0x00000000
/** Bias module always in high accuracy mode */
    #define EFM32_LESENSE_BIASCTRL_BIASMODE_HIGHACC  0x00000001
/** Bias module not affected by LESENSE */
    #define EFM32_LESENSE_BIASCTRL_BIASMODE_DONTTOUCH 0x00000002

/** Command Register @multiple */
#define EFM32_LESENSE_CMD_ADDR                       0x00000014
#define EFM32_LESENSE_CMD_MASK                       0x0000000f
/** Start scanning of sensors @multiple */
  #define EFM32_LESENSE_CMD_START                  0x00000001
  #define EFM32_LESENSE_CMD_START_SHIFT            0
/** Stop scanning of sensors @multiple */
  #define EFM32_LESENSE_CMD_STOP                   0x00000002
  #define EFM32_LESENSE_CMD_STOP_SHIFT             1
/** Start decoder @multiple */
  #define EFM32_LESENSE_CMD_DECODE                 0x00000004
  #define EFM32_LESENSE_CMD_DECODE_SHIFT           2
/** Clear result buffer @multiple */
  #define EFM32_LESENSE_CMD_CLEARBUF               0x00000008
  #define EFM32_LESENSE_CMD_CLEARBUF_SHIFT         3

/** Channel enable Register @multiple */
#define EFM32_LESENSE_CHEN_ADDR                      0x00000018
#define EFM32_LESENSE_CHEN_MASK                      0x0000ffff
/** Enable scan channel @multiple */
  #define EFM32_LESENSE_CHEN_CHEN                  0x0000ffff
  #define EFM32_LESENSE_CHEN_CHEN_SHIFT            0
  #define EFM32_LESENSE_CHEN_CHEN_SHIFT_VAL(v)     ((v) << 0)
  #define EFM32_LESENSE_CHEN_CHEN_SET(x, v)        do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_CHEN_CHEN_GET(x)           (((x) >> 0) & 0xffff)

/** Scan result register @multiple */
#define EFM32_LESENSE_SCANRES_ADDR                   0x0000001c
#define EFM32_LESENSE_SCANRES_MASK                   0x0000ffff
/** Scan results @multiple */
  #define EFM32_LESENSE_SCANRES_SCANRES            0x0000ffff
  #define EFM32_LESENSE_SCANRES_SCANRES_SHIFT      0
  #define EFM32_LESENSE_SCANRES_SCANRES_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_SCANRES_SCANRES_SET(x, v)  do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_SCANRES_SCANRES_GET(x)     (((x) >> 0) & 0xffff)

/** Status Register @multiple */
#define EFM32_LESENSE_STATUS_ADDR                    0x00000020
#define EFM32_LESENSE_STATUS_MASK                    0x0000003f
/** Result data valid @multiple */
  #define EFM32_LESENSE_STATUS_BUFDATAV            0x00000001
  #define EFM32_LESENSE_STATUS_BUFDATAV_SHIFT      0
/** Result buffer half full @multiple */
  #define EFM32_LESENSE_STATUS_BUFHALFFULL         0x00000002
  #define EFM32_LESENSE_STATUS_BUFHALFFULL_SHIFT   1
/** Result buffer full @multiple */
  #define EFM32_LESENSE_STATUS_BUFFULL             0x00000004
  #define EFM32_LESENSE_STATUS_BUFFULL_SHIFT       2
/** LESENSE is active @multiple */
  #define EFM32_LESENSE_STATUS_RUNNING             0x00000008
  #define EFM32_LESENSE_STATUS_RUNNING_SHIFT       3
/** LESENSE is currently interfacing sensors @multiple */
  #define EFM32_LESENSE_STATUS_SCANACTIVE          0x00000010
  #define EFM32_LESENSE_STATUS_SCANACTIVE_SHIFT    4
/** LESENSE DAC interface is active @multiple */
  #define EFM32_LESENSE_STATUS_DACACTIVE           0x00000020
  #define EFM32_LESENSE_STATUS_DACACTIVE_SHIFT     5

/** Result buffer pointers @multiple */
#define EFM32_LESENSE_PTR_ADDR                       0x00000024
#define EFM32_LESENSE_PTR_MASK                       0x000001ef
/** Result buffer read pointer @multiple */
  #define EFM32_LESENSE_PTR_RD                     0x0000000f
  #define EFM32_LESENSE_PTR_RD_SHIFT               0
  #define EFM32_LESENSE_PTR_RD_SHIFT_VAL(v)        ((v) << 0)
  #define EFM32_LESENSE_PTR_RD_SET(x, v)           do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_PTR_RD_GET(x)              (((x) >> 0) & 0xf)
/** Result buffer write pointer @multiple */
  #define EFM32_LESENSE_PTR_WR                     0x000001e0
  #define EFM32_LESENSE_PTR_WR_SHIFT               5
  #define EFM32_LESENSE_PTR_WR_SHIFT_VAL(v)        ((v) << 5)
  #define EFM32_LESENSE_PTR_WR_SET(x, v)           do { (x) = (((x) & ~0x1e0) | ((v) << 5)); } while(0)
  #define EFM32_LESENSE_PTR_WR_GET(x)              (((x) >> 5) & 0xf)

/** Result buffer data register @multiple */
#define EFM32_LESENSE_BUFDATA_ADDR                   0x00000028
#define EFM32_LESENSE_BUFDATA_MASK                   0x0000ffff
/** Result data @multiple */
  #define EFM32_LESENSE_BUFDATA_BUFDATA            0x0000ffff
  #define EFM32_LESENSE_BUFDATA_BUFDATA_SHIFT      0
  #define EFM32_LESENSE_BUFDATA_BUFDATA_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_BUFDATA_BUFDATA_SET(x, v)  do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_BUFDATA_BUFDATA_GET(x)     (((x) >> 0) & 0xffff)

/** Current channel index @multiple */
#define EFM32_LESENSE_CURCH_ADDR                     0x0000002c
#define EFM32_LESENSE_CURCH_MASK                     0x0000000f
/** Shows the index of the current channel @multiple */
  #define EFM32_LESENSE_CURCH_CURCH                0x0000000f
  #define EFM32_LESENSE_CURCH_CURCH_SHIFT          0
  #define EFM32_LESENSE_CURCH_CURCH_SHIFT_VAL(v)   ((v) << 0)
  #define EFM32_LESENSE_CURCH_CURCH_SET(x, v)      do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_CURCH_CURCH_GET(x)         (((x) >> 0) & 0xf)

/** Current decoder state @multiple */
#define EFM32_LESENSE_DECSTATE_ADDR                  0x00000030
#define EFM32_LESENSE_DECSTATE_MASK                  0x0000000f
/** Shows the current decoder state @multiple */
  #define EFM32_LESENSE_DECSTATE_DECSTATE          0x0000000f
  #define EFM32_LESENSE_DECSTATE_DECSTATE_SHIFT    0
  #define EFM32_LESENSE_DECSTATE_DECSTATE_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_DECSTATE_DECSTATE_SET(x, v) do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_DECSTATE_DECSTATE_GET(x)   (((x) >> 0) & 0xf)

/** Decoder input register @multiple */
#define EFM32_LESENSE_SENSORSTATE_ADDR               0x00000034
#define EFM32_LESENSE_SENSORSTATE_MASK               0x0000000f
/** Shows the status of sensors chosen as input to the decoder @multiple */
  #define EFM32_LESENSE_SENSORSTATE_SENSORSTATE    0x0000000f
  #define EFM32_LESENSE_SENSORSTATE_SENSORSTATE_SHIFT 0
  #define EFM32_LESENSE_SENSORSTATE_SENSORSTATE_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_SENSORSTATE_SENSORSTATE_SET(x, v) do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_SENSORSTATE_SENSORSTATE_GET(x) (((x) >> 0) & 0xf)

/** GPIO Idle phase configuration @multiple */
#define EFM32_LESENSE_IDLECONF_ADDR                  0x00000038
#define EFM32_LESENSE_IDLECONF_MASK                  0xffffffff
/** Channel X idle phase configuration @multiple */
  #define EFM32_LESENSE_IDLECONF_CH_COUNT          16
  #define EFM32_LESENSE_IDLECONF_CH(fidx)          (0x00000003 << ((fidx) * 2))
  #define EFM32_LESENSE_IDLECONF_CH_SHIFT(fidx)    ((fidx) * 2 + 0)
  #define EFM32_LESENSE_IDLECONF_CH_SHIFT_VAL(fidx, v) ((EFM32_LESENSE_IDLECONF_CH_##v) << ((fidx) * 2 + 0))
  #define EFM32_LESENSE_IDLECONF_CH_SET(fidx, x, v) do { (x) = (((x) & ~(0x3 << ((fidx) * 2))) | ((EFM32_LESENSE_IDLECONF_CH_##v) << ((fidx) * 2 + 0))); } while(0)
  #define EFM32_LESENSE_IDLECONF_CH_SETVAL(fidx, x, v) do { (x) = (((x) & ~(0x3 << ((fidx) * 2))) | ((v) << ((fidx) * 2 + 0))); } while(0)
  #define EFM32_LESENSE_IDLECONF_CH_GET(fidx, x)   (((x) >> ((fidx) * 2 + 0)) & 0x3)
/** CHX output is disabled in idle phase */
    #define EFM32_LESENSE_IDLECONF_CH_DISABLE        0x00000000
/** CHX output is high in idle phase */
    #define EFM32_LESENSE_IDLECONF_CH_HIGH           0x00000001
/** CHX output is low in idle phase */
    #define EFM32_LESENSE_IDLECONF_CH_LOW            0x00000002
/** CHX output is connected to DAC CH0 output in idle phase */
    #define EFM32_LESENSE_IDLECONF_CH_DACCH0         0x00000003

/** Alternative excite pin configuration @multiple */
#define EFM32_LESENSE_ALTEXCONF_ADDR                 0x0000003c
#define EFM32_LESENSE_ALTEXCONF_MASK                 0x00ffffff
/** ALTEX0 idle phase configuration @multiple */
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF0        0x00000003
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF0_SHIFT  0
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF0_SHIFT_VAL(v) ((EFM32_LESENSE_ALTEXCONF_IDLECONF0_##v) << 0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF0_SET(x, v) do { (x) = (((x) & ~0x3) | ((EFM32_LESENSE_ALTEXCONF_IDLECONF0_##v) << 0)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF0_SETVAL(x, v) do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF0_GET(x) (((x) >> 0) & 0x3)
/** ALTEX0 output is disabled in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF0_DISABLE 0x00000000
/** ALTEX0 output is high in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF0_HIGH   0x00000001
/** ALTEX0 output is low in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF0_LOW    0x00000002
/** ALTEX1 idle phase configuration @multiple */
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF1        0x0000000c
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF1_SHIFT  2
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF1_SHIFT_VAL(v) ((EFM32_LESENSE_ALTEXCONF_IDLECONF1_##v) << 2)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF1_SET(x, v) do { (x) = (((x) & ~0xc) | ((EFM32_LESENSE_ALTEXCONF_IDLECONF1_##v) << 2)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF1_SETVAL(x, v) do { (x) = (((x) & ~0xc) | ((v) << 2)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF1_GET(x) (((x) >> 2) & 0x3)
/** ALTEX1 output is disabled in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF1_DISABLE 0x00000000
/** ALTEX1 output is high in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF1_HIGH   0x00000001
/** ALTEX1 output is low in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF1_LOW    0x00000002
/** ALTEX2 idle phase configuration @multiple */
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF2        0x00000030
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF2_SHIFT  4
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF2_SHIFT_VAL(v) ((EFM32_LESENSE_ALTEXCONF_IDLECONF2_##v) << 4)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF2_SET(x, v) do { (x) = (((x) & ~0x30) | ((EFM32_LESENSE_ALTEXCONF_IDLECONF2_##v) << 4)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF2_SETVAL(x, v) do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF2_GET(x) (((x) >> 4) & 0x3)
/** ALTEX2 output is disabled in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF2_DISABLE 0x00000000
/** ALTEX2 output is high in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF2_HIGH   0x00000001
/** ALTEX2 output is low in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF2_LOW    0x00000002
/** ALTEX3 idle phase configuration @multiple */
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF3        0x000000c0
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF3_SHIFT  6
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF3_SHIFT_VAL(v) ((EFM32_LESENSE_ALTEXCONF_IDLECONF3_##v) << 6)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF3_SET(x, v) do { (x) = (((x) & ~0xc0) | ((EFM32_LESENSE_ALTEXCONF_IDLECONF3_##v) << 6)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF3_SETVAL(x, v) do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF3_GET(x) (((x) >> 6) & 0x3)
/** ALTEX3 output is disabled in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF3_DISABLE 0x00000000
/** ALTEX3 output is high in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF3_HIGH   0x00000001
/** ALTEX3 output is low in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF3_LOW    0x00000002
/** ALTEX4 idle phase configuration @multiple */
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF4        0x00000300
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF4_SHIFT  8
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF4_SHIFT_VAL(v) ((EFM32_LESENSE_ALTEXCONF_IDLECONF4_##v) << 8)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF4_SET(x, v) do { (x) = (((x) & ~0x300) | ((EFM32_LESENSE_ALTEXCONF_IDLECONF4_##v) << 8)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF4_SETVAL(x, v) do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF4_GET(x) (((x) >> 8) & 0x3)
/** ALTEX4 output is disabled in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF4_DISABLE 0x00000000
/** ALTEX4 output is high in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF4_HIGH   0x00000001
/** ALTEX4 output is low in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF4_LOW    0x00000002
/** ALTEX5 idle phase configuration @multiple */
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF5        0x00000c00
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF5_SHIFT  10
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF5_SHIFT_VAL(v) ((EFM32_LESENSE_ALTEXCONF_IDLECONF5_##v) << 10)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF5_SET(x, v) do { (x) = (((x) & ~0xc00) | ((EFM32_LESENSE_ALTEXCONF_IDLECONF5_##v) << 10)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF5_SETVAL(x, v) do { (x) = (((x) & ~0xc00) | ((v) << 10)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF5_GET(x) (((x) >> 10) & 0x3)
/** ALTEX5 output is disabled in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF5_DISABLE 0x00000000
/** ALTEX5 output is high in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF5_HIGH   0x00000001
/** ALTEX5 output is low in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF5_LOW    0x00000002
/** ALTEX6 idle phase configuration @multiple */
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF6        0x00003000
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF6_SHIFT  12
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF6_SHIFT_VAL(v) ((EFM32_LESENSE_ALTEXCONF_IDLECONF6_##v) << 12)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF6_SET(x, v) do { (x) = (((x) & ~0x3000) | ((EFM32_LESENSE_ALTEXCONF_IDLECONF6_##v) << 12)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF6_SETVAL(x, v) do { (x) = (((x) & ~0x3000) | ((v) << 12)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF6_GET(x) (((x) >> 12) & 0x3)
/** ALTEX6 output is disabled in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF6_DISABLE 0x00000000
/** ALTEX6 output is high in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF6_HIGH   0x00000001
/** ALTEX6 output is low in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF6_LOW    0x00000002
/** ALTEX7 idle phase configuration @multiple */
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF7        0x0000c000
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF7_SHIFT  14
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF7_SHIFT_VAL(v) ((EFM32_LESENSE_ALTEXCONF_IDLECONF7_##v) << 14)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF7_SET(x, v) do { (x) = (((x) & ~0xc000) | ((EFM32_LESENSE_ALTEXCONF_IDLECONF7_##v) << 14)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF7_SETVAL(x, v) do { (x) = (((x) & ~0xc000) | ((v) << 14)); } while(0)
  #define EFM32_LESENSE_ALTEXCONF_IDLECONF7_GET(x) (((x) >> 14) & 0x3)
/** ALTEX7 output is disabled in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF7_DISABLE 0x00000000
/** ALTEX7 output is high in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF7_HIGH   0x00000001
/** ALTEX7 output is low in idle phase */
    #define EFM32_LESENSE_ALTEXCONF_IDLECONF7_LOW    0x00000002
/** ALTEX0 always excite enable @multiple */
  #define EFM32_LESENSE_ALTEXCONF_AEX0             0x00010000
  #define EFM32_LESENSE_ALTEXCONF_AEX0_SHIFT       16
/** ALTEX1 always excite enable @multiple */
  #define EFM32_LESENSE_ALTEXCONF_AEX1             0x00020000
  #define EFM32_LESENSE_ALTEXCONF_AEX1_SHIFT       17
/** ALTEX2 always excite enable @multiple */
  #define EFM32_LESENSE_ALTEXCONF_AEX2             0x00040000
  #define EFM32_LESENSE_ALTEXCONF_AEX2_SHIFT       18
/** ALTEX3 always excite enable @multiple */
  #define EFM32_LESENSE_ALTEXCONF_AEX3             0x00080000
  #define EFM32_LESENSE_ALTEXCONF_AEX3_SHIFT       19
/** ALTEX4 always excite enable @multiple */
  #define EFM32_LESENSE_ALTEXCONF_AEX4             0x00100000
  #define EFM32_LESENSE_ALTEXCONF_AEX4_SHIFT       20
/** ALTEX5 always excite enable @multiple */
  #define EFM32_LESENSE_ALTEXCONF_AEX5             0x00200000
  #define EFM32_LESENSE_ALTEXCONF_AEX5_SHIFT       21
/** ALTEX6 always excite enable @multiple */
  #define EFM32_LESENSE_ALTEXCONF_AEX6             0x00400000
  #define EFM32_LESENSE_ALTEXCONF_AEX6_SHIFT       22
/** ALTEX7 always excite enable @multiple */
  #define EFM32_LESENSE_ALTEXCONF_AEX7             0x00800000
  #define EFM32_LESENSE_ALTEXCONF_AEX7_SHIFT       23

/** Interrupt Flag Register @multiple */
#define EFM32_LESENSE_IF_ADDR                        0x00000040
#define EFM32_LESENSE_IF_MASK                        0x007fffff
  #define EFM32_LESENSE_IF_CHX_COUNT               16
  #define EFM32_LESENSE_IF_CHX(fidx)               (0x00000001 << ((fidx)))
  #define EFM32_LESENSE_IF_CHX_SHIFT(fidx)         ((fidx) + 0)
/** "" @multiple */
  #define EFM32_LESENSE_IF_SCANCOMPLETE            0x00010000
  #define EFM32_LESENSE_IF_SCANCOMPLETE_SHIFT      16
/** "" @multiple */
  #define EFM32_LESENSE_IF_DEC                     0x00020000
  #define EFM32_LESENSE_IF_DEC_SHIFT               17
/** "" @multiple */
  #define EFM32_LESENSE_IF_DECERR                  0x00040000
  #define EFM32_LESENSE_IF_DECERR_SHIFT            18
/** "" @multiple */
  #define EFM32_LESENSE_IF_BUFDATAV                0x00080000
  #define EFM32_LESENSE_IF_BUFDATAV_SHIFT          19
/** "" @multiple */
  #define EFM32_LESENSE_IF_BUFLEVEL                0x00100000
  #define EFM32_LESENSE_IF_BUFLEVEL_SHIFT          20
/** "" @multiple */
  #define EFM32_LESENSE_IF_BUFOF                   0x00200000
  #define EFM32_LESENSE_IF_BUFOF_SHIFT             21
/** "" @multiple */
  #define EFM32_LESENSE_IF_CNTOF                   0x00400000
  #define EFM32_LESENSE_IF_CNTOF_SHIFT             22

/** Interrupt Flag Clear Register @multiple */
#define EFM32_LESENSE_IFC_ADDR                       0x00000044
#define EFM32_LESENSE_IFC_MASK                       0x007fffff
  #define EFM32_LESENSE_IFC_CHX_COUNT              16
  #define EFM32_LESENSE_IFC_CHX(fidx)              (0x00000001 << ((fidx)))
  #define EFM32_LESENSE_IFC_CHX_SHIFT(fidx)        ((fidx) + 0)
/** "" @multiple */
  #define EFM32_LESENSE_IFC_SCANCOMPLETE           0x00010000
  #define EFM32_LESENSE_IFC_SCANCOMPLETE_SHIFT     16
/** "" @multiple */
  #define EFM32_LESENSE_IFC_DEC                    0x00020000
  #define EFM32_LESENSE_IFC_DEC_SHIFT              17
/** "" @multiple */
  #define EFM32_LESENSE_IFC_DECERR                 0x00040000
  #define EFM32_LESENSE_IFC_DECERR_SHIFT           18
/** "" @multiple */
  #define EFM32_LESENSE_IFC_BUFDATAV               0x00080000
  #define EFM32_LESENSE_IFC_BUFDATAV_SHIFT         19
/** "" @multiple */
  #define EFM32_LESENSE_IFC_BUFLEVEL               0x00100000
  #define EFM32_LESENSE_IFC_BUFLEVEL_SHIFT         20
/** "" @multiple */
  #define EFM32_LESENSE_IFC_BUFOF                  0x00200000
  #define EFM32_LESENSE_IFC_BUFOF_SHIFT            21
/** "" @multiple */
  #define EFM32_LESENSE_IFC_CNTOF                  0x00400000
  #define EFM32_LESENSE_IFC_CNTOF_SHIFT            22

/** Interrupt Flag Set Register @multiple */
#define EFM32_LESENSE_IFS_ADDR                       0x00000048
#define EFM32_LESENSE_IFS_MASK                       0x007fffff
  #define EFM32_LESENSE_IFS_CHX_COUNT              16
  #define EFM32_LESENSE_IFS_CHX(fidx)              (0x00000001 << ((fidx)))
  #define EFM32_LESENSE_IFS_CHX_SHIFT(fidx)        ((fidx) + 0)
/** "" @multiple */
  #define EFM32_LESENSE_IFS_SCANCOMPLETE           0x00010000
  #define EFM32_LESENSE_IFS_SCANCOMPLETE_SHIFT     16
/** "" @multiple */
  #define EFM32_LESENSE_IFS_DEC                    0x00020000
  #define EFM32_LESENSE_IFS_DEC_SHIFT              17
/** "" @multiple */
  #define EFM32_LESENSE_IFS_DECERR                 0x00040000
  #define EFM32_LESENSE_IFS_DECERR_SHIFT           18
/** "" @multiple */
  #define EFM32_LESENSE_IFS_BUFDATAV               0x00080000
  #define EFM32_LESENSE_IFS_BUFDATAV_SHIFT         19
/** "" @multiple */
  #define EFM32_LESENSE_IFS_BUFLEVEL               0x00100000
  #define EFM32_LESENSE_IFS_BUFLEVEL_SHIFT         20
/** "" @multiple */
  #define EFM32_LESENSE_IFS_BUFOF                  0x00200000
  #define EFM32_LESENSE_IFS_BUFOF_SHIFT            21
/** "" @multiple */
  #define EFM32_LESENSE_IFS_CNTOF                  0x00400000
  #define EFM32_LESENSE_IFS_CNTOF_SHIFT            22

/** Interrupt Enable Register @multiple */
#define EFM32_LESENSE_IEN_ADDR                       0x0000004c
#define EFM32_LESENSE_IEN_MASK                       0x007fffff
/** "" @multiple */
  #define EFM32_LESENSE_IEN_CHX_COUNT              16
  #define EFM32_LESENSE_IEN_CHX(fidx)              (0x00000001 << ((fidx)))
  #define EFM32_LESENSE_IEN_CHX_SHIFT(fidx)        ((fidx) + 0)
/** "" @multiple */
  #define EFM32_LESENSE_IEN_SCANCOMPLETE           0x00010000
  #define EFM32_LESENSE_IEN_SCANCOMPLETE_SHIFT     16
/** "" @multiple */
  #define EFM32_LESENSE_IEN_DEC                    0x00020000
  #define EFM32_LESENSE_IEN_DEC_SHIFT              17
/** "" @multiple */
  #define EFM32_LESENSE_IEN_DECERR                 0x00040000
  #define EFM32_LESENSE_IEN_DECERR_SHIFT           18
/** "" @multiple */
  #define EFM32_LESENSE_IEN_BUFDATAV               0x00080000
  #define EFM32_LESENSE_IEN_BUFDATAV_SHIFT         19
/** "" @multiple */
  #define EFM32_LESENSE_IEN_BUFLEVEL               0x00100000
  #define EFM32_LESENSE_IEN_BUFLEVEL_SHIFT         20
/** "" @multiple */
  #define EFM32_LESENSE_IEN_BUFOF                  0x00200000
  #define EFM32_LESENSE_IEN_BUFOF_SHIFT            21
/** "" @multiple */
  #define EFM32_LESENSE_IEN_CNTOF                  0x00400000
  #define EFM32_LESENSE_IEN_CNTOF_SHIFT            22

/** Synchronization Busy Register @multiple */
#define EFM32_LESENSE_SYNCBUSY_ADDR                  0x00000050
#define EFM32_LESENSE_SYNCBUSY_MASK                  0x07e3ffff
/** LESENSE_CTRL Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_CTRL              0x00000001
  #define EFM32_LESENSE_SYNCBUSY_CTRL_SHIFT        0
/** LESENSE_TIMCTRL Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_TIMCTRL           0x00000002
  #define EFM32_LESENSE_SYNCBUSY_TIMCTRL_SHIFT     1
/** LESENSE_PERCTRL Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_PERCTRL           0x00000004
  #define EFM32_LESENSE_SYNCBUSY_PERCTRL_SHIFT     2
/** LESENSE_DECCTRL Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_DECCTRL           0x00000008
  #define EFM32_LESENSE_SYNCBUSY_DECCTRL_SHIFT     3
/** LESENSE_BIASCTRL Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_BIASCTRL          0x00000010
  #define EFM32_LESENSE_SYNCBUSY_BIASCTRL_SHIFT    4
/** LESENSE_CMD Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_CMD               0x00000020
  #define EFM32_LESENSE_SYNCBUSY_CMD_SHIFT         5
/** LESENSE_CHEN Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_CHEN              0x00000040
  #define EFM32_LESENSE_SYNCBUSY_CHEN_SHIFT        6
/** LESENSE_SCANRES Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_SCANRES           0x00000080
  #define EFM32_LESENSE_SYNCBUSY_SCANRES_SHIFT     7
/** LESENSE_STATUS Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_STATUS            0x00000100
  #define EFM32_LESENSE_SYNCBUSY_STATUS_SHIFT      8
/** LESENSE_PTR Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_PTR               0x00000200
  #define EFM32_LESENSE_SYNCBUSY_PTR_SHIFT         9
/** LESENSE_BUFDATA Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_BUFDATA           0x00000400
  #define EFM32_LESENSE_SYNCBUSY_BUFDATA_SHIFT     10
/** LESENSE_CURCH Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_CURCH             0x00000800
  #define EFM32_LESENSE_SYNCBUSY_CURCH_SHIFT       11
/** LESENSE_DECSTATE Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_DECSTATE          0x00001000
  #define EFM32_LESENSE_SYNCBUSY_DECSTATE_SHIFT    12
/** LESENSE_SENSORSTATE Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_SENSORSTATE       0x00002000
  #define EFM32_LESENSE_SYNCBUSY_SENSORSTATE_SHIFT 13
/** LESENSE_IDLECONF Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_IDLECONF          0x00004000
  #define EFM32_LESENSE_SYNCBUSY_IDLECONF_SHIFT    14
/** LESENSE_ALTEXCONF Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_ALTEXCONF         0x00008000
  #define EFM32_LESENSE_SYNCBUSY_ALTEXCONF_SHIFT   15
/** LESENSE_ROUTE Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_ROUTE             0x00010000
  #define EFM32_LESENSE_SYNCBUSY_ROUTE_SHIFT       16
/** LESENSE_POWERDOWN Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_POWERDOWN         0x00020000
  #define EFM32_LESENSE_SYNCBUSY_POWERDOWN_SHIFT   17
/** LESENSE_STx_TCONFA Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_TCONFA            0x00200000
  #define EFM32_LESENSE_SYNCBUSY_TCONFA_SHIFT      21
/** LESENSE_STx_TCONFB Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_TCONFB            0x00400000
  #define EFM32_LESENSE_SYNCBUSY_TCONFB_SHIFT      22
/** LESENSE_BUFx_DATA Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_DATA              0x00800000
  #define EFM32_LESENSE_SYNCBUSY_DATA_SHIFT        23
/** LESENSE_CHx_TIMING Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_TIMING            0x01000000
  #define EFM32_LESENSE_SYNCBUSY_TIMING_SHIFT      24
/** LESENSE_CHx_INTERACT Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_INTERACT          0x02000000
  #define EFM32_LESENSE_SYNCBUSY_INTERACT_SHIFT    25
/** LESENSE_CHx_EVAL Register Busy @multiple */
  #define EFM32_LESENSE_SYNCBUSY_EVAL              0x04000000
  #define EFM32_LESENSE_SYNCBUSY_EVAL_SHIFT        26

/** I/O Routing Register @multiple */
#define EFM32_LESENSE_ROUTE_ADDR                     0x00000054
#define EFM32_LESENSE_ROUTE_MASK                     0x00ffffff
/** CHX Pin Enable @multiple */
  #define EFM32_LESENSE_ROUTE_CHXPEN_COUNT         16
  #define EFM32_LESENSE_ROUTE_CHXPEN(fidx)         (0x00000001 << ((fidx)))
  #define EFM32_LESENSE_ROUTE_CHXPEN_SHIFT(fidx)   ((fidx) + 0)
/** ALTEXX Pin Enable @multiple */
  #define EFM32_LESENSE_ROUTE_ALTEXXPEN_COUNT      8
  #define EFM32_LESENSE_ROUTE_ALTEXXPEN(fidx)      (0x00010000 << ((fidx)))
  #define EFM32_LESENSE_ROUTE_ALTEXXPEN_SHIFT(fidx) ((fidx) + 16)

/** LESENSE RAM power-down register @multiple */
#define EFM32_LESENSE_POWERDOWN_ADDR                 0x00000058
#define EFM32_LESENSE_POWERDOWN_MASK                 0x00000001
/** LESENSE RAM power-down @multiple */
  #define EFM32_LESENSE_POWERDOWN_RAM              0x00000001
  #define EFM32_LESENSE_POWERDOWN_RAM_SHIFT        0

/** State transition configuration A @multiple */
#define EFM32_LESENSE_STX_TCONFA_ADDR(ridx)          (0x00000200 + (ridx) * 8)
#define EFM32_LESENSE_STX_TCONFA_COUNT               16
#define EFM32_LESENSE_STX_TCONFA_MASK                0x00057fff
/** Sensor compare value @multiple */
  #define EFM32_LESENSE_STX_TCONFA_COMP            0x0000000f
  #define EFM32_LESENSE_STX_TCONFA_COMP_SHIFT      0
  #define EFM32_LESENSE_STX_TCONFA_COMP_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_STX_TCONFA_COMP_SET(x, v)  do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_STX_TCONFA_COMP_GET(x)     (((x) >> 0) & 0xf)
/** Sensor mask @multiple */
  #define EFM32_LESENSE_STX_TCONFA_MSK             0x000000f0
  #define EFM32_LESENSE_STX_TCONFA_MSK_SHIFT       4
  #define EFM32_LESENSE_STX_TCONFA_MSK_SHIFT_VAL(v) ((v) << 4)
  #define EFM32_LESENSE_STX_TCONFA_MSK_SET(x, v)   do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define EFM32_LESENSE_STX_TCONFA_MSK_GET(x)      (((x) >> 4) & 0xf)
/** Next state index @multiple */
  #define EFM32_LESENSE_STX_TCONFA_NEXTSTATE       0x00000f00
  #define EFM32_LESENSE_STX_TCONFA_NEXTSTATE_SHIFT 8
  #define EFM32_LESENSE_STX_TCONFA_NEXTSTATE_SHIFT_VAL(v) ((v) << 8)
  #define EFM32_LESENSE_STX_TCONFA_NEXTSTATE_SET(x, v) do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFM32_LESENSE_STX_TCONFA_NEXTSTATE_GET(x) (((x) >> 8) & 0xf)
/** Configure transition action @multiple */
  #define EFM32_LESENSE_STX_TCONFA_PRSACT          0x00007000
  #define EFM32_LESENSE_STX_TCONFA_PRSACT_SHIFT    12
  #define EFM32_LESENSE_STX_TCONFA_PRSACT_SHIFT_VAL(v) ((v) << 12)
  #define EFM32_LESENSE_STX_TCONFA_PRSACT_SET(x, v) do { (x) = (((x) & ~0x7000) | ((v) << 12)); } while(0)
  #define EFM32_LESENSE_STX_TCONFA_PRSACT_GET(x)   (((x) >> 12) & 0x7)
/** Set interrupt flag enable @multiple */
  #define EFM32_LESENSE_STX_TCONFA_SETIF           0x00010000
  #define EFM32_LESENSE_STX_TCONFA_SETIF_SHIFT     16
/** Enable state descriptor chaining @multiple */
  #define EFM32_LESENSE_STX_TCONFA_CHAIN           0x00040000
  #define EFM32_LESENSE_STX_TCONFA_CHAIN_SHIFT     18

/** State transition configuration B @multiple */
#define EFM32_LESENSE_STX_TCONFB_ADDR(ridx)          (0x00000204 + (ridx) * 8)
#define EFM32_LESENSE_STX_TCONFB_COUNT               16
#define EFM32_LESENSE_STX_TCONFB_MASK                0x00017fff
/** Sensor compare value @multiple */
  #define EFM32_LESENSE_STX_TCONFB_COMP            0x0000000f
  #define EFM32_LESENSE_STX_TCONFB_COMP_SHIFT      0
  #define EFM32_LESENSE_STX_TCONFB_COMP_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_STX_TCONFB_COMP_SET(x, v)  do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_STX_TCONFB_COMP_GET(x)     (((x) >> 0) & 0xf)
/** Sensor mask @multiple */
  #define EFM32_LESENSE_STX_TCONFB_MSK             0x000000f0
  #define EFM32_LESENSE_STX_TCONFB_MSK_SHIFT       4
  #define EFM32_LESENSE_STX_TCONFB_MSK_SHIFT_VAL(v) ((v) << 4)
  #define EFM32_LESENSE_STX_TCONFB_MSK_SET(x, v)   do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define EFM32_LESENSE_STX_TCONFB_MSK_GET(x)      (((x) >> 4) & 0xf)
/** Next state index @multiple */
  #define EFM32_LESENSE_STX_TCONFB_NEXTSTATE       0x00000f00
  #define EFM32_LESENSE_STX_TCONFB_NEXTSTATE_SHIFT 8
  #define EFM32_LESENSE_STX_TCONFB_NEXTSTATE_SHIFT_VAL(v) ((v) << 8)
  #define EFM32_LESENSE_STX_TCONFB_NEXTSTATE_SET(x, v) do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFM32_LESENSE_STX_TCONFB_NEXTSTATE_GET(x) (((x) >> 8) & 0xf)
/** Configure transition action @multiple */
  #define EFM32_LESENSE_STX_TCONFB_PRSACT          0x00007000
  #define EFM32_LESENSE_STX_TCONFB_PRSACT_SHIFT    12
  #define EFM32_LESENSE_STX_TCONFB_PRSACT_SHIFT_VAL(v) ((v) << 12)
  #define EFM32_LESENSE_STX_TCONFB_PRSACT_SET(x, v) do { (x) = (((x) & ~0x7000) | ((v) << 12)); } while(0)
  #define EFM32_LESENSE_STX_TCONFB_PRSACT_GET(x)   (((x) >> 12) & 0x7)
/** Set interrupt flag @multiple */
  #define EFM32_LESENSE_STX_TCONFB_SETIF           0x00010000
  #define EFM32_LESENSE_STX_TCONFB_SETIF_SHIFT     16

/** Scan results @multiple */
#define EFM32_LESENSE_BUFX_DATA_ADDR(ridx)           (0x00000280 + (ridx) * 4)
#define EFM32_LESENSE_BUFX_DATA_COUNT                16
#define EFM32_LESENSE_BUFX_DATA_MASK                 0x0000ffff
/** Scan result buffer @multiple */
  #define EFM32_LESENSE_BUFX_DATA_DATA             0x0000ffff
  #define EFM32_LESENSE_BUFX_DATA_DATA_SHIFT       0
  #define EFM32_LESENSE_BUFX_DATA_DATA_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_BUFX_DATA_DATA_SET(x, v)   do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_BUFX_DATA_DATA_GET(x)      (((x) >> 0) & 0xffff)

/** Scan configuration @multiple */
#define EFM32_LESENSE_CHX_TIMING_ADDR(ridx)          (0x000002c0 + (ridx) * 16)
#define EFM32_LESENSE_CHX_TIMING_COUNT               16
#define EFM32_LESENSE_CHX_TIMING_MASK                0x000fffff
/** Set excitation time @multiple */
  #define EFM32_LESENSE_CHX_TIMING_EXTIME          0x0000003f
  #define EFM32_LESENSE_CHX_TIMING_EXTIME_SHIFT    0
  #define EFM32_LESENSE_CHX_TIMING_EXTIME_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_CHX_TIMING_EXTIME_SET(x, v) do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_CHX_TIMING_EXTIME_GET(x)   (((x) >> 0) & 0x3f)
/** Set sample delay @multiple */
  #define EFM32_LESENSE_CHX_TIMING_SAMPLEDLY       0x00001fc0
  #define EFM32_LESENSE_CHX_TIMING_SAMPLEDLY_SHIFT 6
  #define EFM32_LESENSE_CHX_TIMING_SAMPLEDLY_SHIFT_VAL(v) ((v) << 6)
  #define EFM32_LESENSE_CHX_TIMING_SAMPLEDLY_SET(x, v) do { (x) = (((x) & ~0x1fc0) | ((v) << 6)); } while(0)
  #define EFM32_LESENSE_CHX_TIMING_SAMPLEDLY_GET(x) (((x) >> 6) & 0x7f)
/** Set measure delay @multiple */
  #define EFM32_LESENSE_CHX_TIMING_MEASUREDLY      0x000fe000
  #define EFM32_LESENSE_CHX_TIMING_MEASUREDLY_SHIFT 13
  #define EFM32_LESENSE_CHX_TIMING_MEASUREDLY_SHIFT_VAL(v) ((v) << 13)
  #define EFM32_LESENSE_CHX_TIMING_MEASUREDLY_SET(x, v) do { (x) = (((x) & ~0xfe000) | ((v) << 13)); } while(0)
  #define EFM32_LESENSE_CHX_TIMING_MEASUREDLY_GET(x) (((x) >> 13) & 0x7f)

/** Scan configuration @multiple */
#define EFM32_LESENSE_CHX_INTERACT_ADDR(ridx)        (0x000002c4 + (ridx) * 16)
#define EFM32_LESENSE_CHX_INTERACT_COUNT             16
#define EFM32_LESENSE_CHX_INTERACT_MASK              0x000fffff
/** Set ACMP threshold @multiple */
  #define EFM32_LESENSE_CHX_INTERACT_ACMPTHRES     0x00000fff
  #define EFM32_LESENSE_CHX_INTERACT_ACMPTHRES_SHIFT 0
  #define EFM32_LESENSE_CHX_INTERACT_ACMPTHRES_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_CHX_INTERACT_ACMPTHRES_SET(x, v) do { (x) = (((x) & ~0xfff) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_CHX_INTERACT_ACMPTHRES_GET(x) (((x) >> 0) & 0xfff)
/** Select sample mode @multiple */
  #define EFM32_LESENSE_CHX_INTERACT_SAMPLE        0x00001000
  #define EFM32_LESENSE_CHX_INTERACT_SAMPLE_SHIFT  12
/** Enable interrupt generation @multiple */
  #define EFM32_LESENSE_CHX_INTERACT_SETIF         0x00006000
  #define EFM32_LESENSE_CHX_INTERACT_SETIF_SHIFT   13
  #define EFM32_LESENSE_CHX_INTERACT_SETIF_SHIFT_VAL(v) ((EFM32_LESENSE_CHX_INTERACT_SETIF_##v) << 13)
  #define EFM32_LESENSE_CHX_INTERACT_SETIF_SET(x, v) do { (x) = (((x) & ~0x6000) | ((EFM32_LESENSE_CHX_INTERACT_SETIF_##v) << 13)); } while(0)
  #define EFM32_LESENSE_CHX_INTERACT_SETIF_SETVAL(x, v) do { (x) = (((x) & ~0x6000) | ((v) << 13)); } while(0)
  #define EFM32_LESENSE_CHX_INTERACT_SETIF_GET(x)  (((x) >> 13) & 0x3)
/** No interrupt is generated */
    #define EFM32_LESENSE_CHX_INTERACT_SETIF_NONE    0x00000000
/** Set interrupt flag if the sensor triggers */
    #define EFM32_LESENSE_CHX_INTERACT_SETIF_LEVEL   0x00000001
/** Set interrupt flag on positive edge on the sensor state */
    #define EFM32_LESENSE_CHX_INTERACT_SETIF_POSEDGE 0x00000002
/** Set interrupt flag on negative edge on the sensor state */
    #define EFM32_LESENSE_CHX_INTERACT_SETIF_NEGEDGE 0x00000003
/** Set GPIO mode @multiple */
  #define EFM32_LESENSE_CHX_INTERACT_EXMODE        0x00018000
  #define EFM32_LESENSE_CHX_INTERACT_EXMODE_SHIFT  15
  #define EFM32_LESENSE_CHX_INTERACT_EXMODE_SHIFT_VAL(v) ((EFM32_LESENSE_CHX_INTERACT_EXMODE_##v) << 15)
  #define EFM32_LESENSE_CHX_INTERACT_EXMODE_SET(x, v) do { (x) = (((x) & ~0x18000) | ((EFM32_LESENSE_CHX_INTERACT_EXMODE_##v) << 15)); } while(0)
  #define EFM32_LESENSE_CHX_INTERACT_EXMODE_SETVAL(x, v) do { (x) = (((x) & ~0x18000) | ((v) << 15)); } while(0)
  #define EFM32_LESENSE_CHX_INTERACT_EXMODE_GET(x) (((x) >> 15) & 0x3)
/** Disabled */
    #define EFM32_LESENSE_CHX_INTERACT_EXMODE_DISABLE 0x00000000
/** Push Pull, GPIO is driven high */
    #define EFM32_LESENSE_CHX_INTERACT_EXMODE_HIGH   0x00000001
/** Push Pull, GPIO is driven low */
    #define EFM32_LESENSE_CHX_INTERACT_EXMODE_LOW    0x00000002
/** DAC output */
    #define EFM32_LESENSE_CHX_INTERACT_EXMODE_DACOUT 0x00000003
/** Select clock used for excitation timing @multiple */
  #define EFM32_LESENSE_CHX_INTERACT_EXCLK         0x00020000
  #define EFM32_LESENSE_CHX_INTERACT_EXCLK_SHIFT   17
/** Select clock used for timing of sample delay @multiple */
  #define EFM32_LESENSE_CHX_INTERACT_SAMPLECLK     0x00040000
  #define EFM32_LESENSE_CHX_INTERACT_SAMPLECLK_SHIFT 18
/** Use alternative excite pin @multiple */
  #define EFM32_LESENSE_CHX_INTERACT_ALTEX         0x00080000
  #define EFM32_LESENSE_CHX_INTERACT_ALTEX_SHIFT   19

/** Scan configuration @multiple */
#define EFM32_LESENSE_CHX_EVAL_ADDR(ridx)            (0x000002c8 + (ridx) * 16)
#define EFM32_LESENSE_CHX_EVAL_COUNT                 16
#define EFM32_LESENSE_CHX_EVAL_MASK                  0x000fffff
/** Decision threshold for counter @multiple */
  #define EFM32_LESENSE_CHX_EVAL_COMPTHRES         0x0000ffff
  #define EFM32_LESENSE_CHX_EVAL_COMPTHRES_SHIFT   0
  #define EFM32_LESENSE_CHX_EVAL_COMPTHRES_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_LESENSE_CHX_EVAL_COMPTHRES_SET(x, v) do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_LESENSE_CHX_EVAL_COMPTHRES_GET(x)  (((x) >> 0) & 0xffff)
/** Select mode for counter comparison @multiple */
  #define EFM32_LESENSE_CHX_EVAL_COMP              0x00010000
  #define EFM32_LESENSE_CHX_EVAL_COMP_SHIFT        16
/** Send result to decoder @multiple */
  #define EFM32_LESENSE_CHX_EVAL_DECODE            0x00020000
  #define EFM32_LESENSE_CHX_EVAL_DECODE_SHIFT      17
/** Select if counter result should be stored @multiple */
  #define EFM32_LESENSE_CHX_EVAL_STRSAMPLE         0x00040000
  #define EFM32_LESENSE_CHX_EVAL_STRSAMPLE_SHIFT   18
/** Enable inversion of result @multiple */
  #define EFM32_LESENSE_CHX_EVAL_SCANRESINV        0x00080000
  #define EFM32_LESENSE_CHX_EVAL_SCANRESINV_SHIFT  19

#endif

