/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1                \
     -I /opt/bfgen/defs/efm32/efm32_adc.bf cdefs_use_field_shift=1             \
     cdefs_use_field_shifted_mask=1 cdefs_sfx_field_shifter=_SHIFT_VAL
*/

#ifndef _EFM32_ADC_BFGEN_DEFS_
#define _EFM32_ADC_BFGEN_DEFS_

#define EFM32_ADC_CTRL_ADDR                          0x00000000
#define EFM32_ADC_CTRL_MASK                          0x1f7f7f3b
/** Select Warm-up Mode for ADC. @multiple */
  #define EFM32_ADC_CTRL_WARMUPMODE                0x00000003
  #define EFM32_ADC_CTRL_WARMUPMODE_SHIFT          0
  #define EFM32_ADC_CTRL_WARMUPMODE_SHIFT_VAL(v)   ((EFM32_ADC_CTRL_WARMUPMODE_##v) << 0)
  #define EFM32_ADC_CTRL_WARMUPMODE_SET(x, v)      do { (x) = (((x) & ~0x3) | ((EFM32_ADC_CTRL_WARMUPMODE_##v) << 0)); } while(0)
  #define EFM32_ADC_CTRL_WARMUPMODE_SETVAL(x, v)   do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define EFM32_ADC_CTRL_WARMUPMODE_GET(x)         (((x) >> 0) & 0x3)
    #define EFM32_ADC_CTRL_WARMUPMODE_NORMAL         0x00000000
    #define EFM32_ADC_CTRL_WARMUPMODE_FASTBG         0x00000001
    #define EFM32_ADC_CTRL_WARMUPMODE_KEEPSCANREFWARM 0x00000002
    #define EFM32_ADC_CTRL_WARMUPMODE_KEEPADCWARM    0x00000003
/** Enable/disable conversion tailgating. @multiple */
  #define EFM32_ADC_CTRL_TAILGATE                  0x00000008
  #define EFM32_ADC_CTRL_TAILGATE_SHIFT            3
/** These bits control the filtering of the ADC input. Details on the filter
   characteristics can be found in the device datasheets. @multiple */
  #define EFM32_ADC_CTRL_LPFMODE                   0x00000030
  #define EFM32_ADC_CTRL_LPFMODE_SHIFT             4
  #define EFM32_ADC_CTRL_LPFMODE_SHIFT_VAL(v)      ((v) << 4)
  #define EFM32_ADC_CTRL_LPFMODE_SET(x, v)         do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define EFM32_ADC_CTRL_LPFMODE_GET(x)            (((x) >> 4) & 0x3)
/** Select clock division factor. @multiple */
  #define EFM32_ADC_CTRL_PRESC                     0x00007f00
  #define EFM32_ADC_CTRL_PRESC_SHIFT               8
  #define EFM32_ADC_CTRL_PRESC_SHIFT_VAL(v)        ((v) << 8)
  #define EFM32_ADC_CTRL_PRESC_SET(x, v)           do { (x) = (((x) & ~0x7f00) | ((v) << 8)); } while(0)
  #define EFM32_ADC_CTRL_PRESC_GET(x)              (((x) >> 8) & 0x7f)
/** Set time base used for ADC warm up sequence according to the HFPERCLK
   frequency. The time base is defined as a number of HFPERCLK cycles which
   should be set equal to or higher than 1us. @multiple */
  #define EFM32_ADC_CTRL_TIMEBASE                  0x007f0000
  #define EFM32_ADC_CTRL_TIMEBASE_SHIFT            16
  #define EFM32_ADC_CTRL_TIMEBASE_SHIFT_VAL(v)     ((v) << 16)
  #define EFM32_ADC_CTRL_TIMEBASE_SET(x, v)        do { (x) = (((x) & ~0x7f0000) | ((v) << 16)); } while(0)
  #define EFM32_ADC_CTRL_TIMEBASE_GET(x)           (((x) >> 16) & 0x7f)
/** Select oversampling rate. Oversampling must be enabled for each mode for this
   setting to take effect. @multiple */
  #define EFM32_ADC_CTRL_OVRSEL                    0x0f000000
  #define EFM32_ADC_CTRL_OVRSEL_SHIFT              24
  #define EFM32_ADC_CTRL_OVRSEL_SHIFT_VAL(v)       ((EFM32_ADC_CTRL_OVRSEL_##v) << 24)
  #define EFM32_ADC_CTRL_OVRSEL_SET(x, v)          do { (x) = (((x) & ~0xf000000) | ((EFM32_ADC_CTRL_OVRSEL_##v) << 24)); } while(0)
  #define EFM32_ADC_CTRL_OVRSEL_SETVAL(x, v)       do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define EFM32_ADC_CTRL_OVRSEL_GET(x)             (((x) >> 24) & 0xf)
    #define EFM32_ADC_CTRL_OVRSEL_X2                 0x00000000
    #define EFM32_ADC_CTRL_OVRSEL_X4                 0x00000001
    #define EFM32_ADC_CTRL_OVRSEL_X8                 0x00000002
    #define EFM32_ADC_CTRL_OVRSEL_X16                0x00000003
    #define EFM32_ADC_CTRL_OVRSEL_X32                0x00000004
    #define EFM32_ADC_CTRL_OVRSEL_X64                0x00000005
    #define EFM32_ADC_CTRL_OVRSEL_X128               0x00000006
    #define EFM32_ADC_CTRL_OVRSEL_X256               0x00000007
    #define EFM32_ADC_CTRL_OVRSEL_X512               0x00000008
    #define EFM32_ADC_CTRL_OVRSEL_X1024              0x00000009
    #define EFM32_ADC_CTRL_OVRSEL_X2048              0x0000000a
    #define EFM32_ADC_CTRL_OVRSEL_X4096              0x0000000b
/** Input channel Preference @multiple */
  #define EFM32_ADC_CTRL_CHCONIDLE                 0x10000000
  #define EFM32_ADC_CTRL_CHCONIDLE_SHIFT           28
  #define EFM32_ADC_CTRL_CHCONIDLE_SHIFT_VAL(v)    ((EFM32_ADC_CTRL_CHCONIDLE_##v) << 28)
  #define EFM32_ADC_CTRL_CHCONIDLE_SET(x, v)       do { (x) = (((x) & ~0x10000000) | ((EFM32_ADC_CTRL_CHCONIDLE_##v) << 28)); } while(0)
  #define EFM32_ADC_CTRL_CHCONIDLE_SETVAL(x, v)    do { (x) = (((x) & ~0x10000000) | ((v) << 28)); } while(0)
  #define EFM32_ADC_CTRL_CHCONIDLE_GET(x)          (((x) >> 28) & 0x1)
    #define EFM32_ADC_CTRL_CHCONIDLE_DISCONNECT      0x00000000
    #define EFM32_ADC_CTRL_CHCONIDLE_KEEPCON         0x00000001

#define EFM32_ADC_CMD_ADDR                           0x00000004
#define EFM32_ADC_CMD_MASK                           0x0000000f
/** Write to 1 to start single conversion. @multiple */
  #define EFM32_ADC_CMD_SINGLESTART                0x00000001
  #define EFM32_ADC_CMD_SINGLESTART_SHIFT          0
/** Write to 1 to stop single conversion. @multiple */
  #define EFM32_ADC_CMD_SINGLESTOP                 0x00000002
  #define EFM32_ADC_CMD_SINGLESTOP_SHIFT           1
/** Write to 1 to start scan sequence. @multiple */
  #define EFM32_ADC_CMD_SCANSTART                  0x00000004
  #define EFM32_ADC_CMD_SCANSTART_SHIFT            2
/** Write to 1 to stop scan sequence. @multiple */
  #define EFM32_ADC_CMD_SCANSTOP                   0x00000008
  #define EFM32_ADC_CMD_SCANSTOP_SHIFT             3

#define EFM32_ADC_STATUS_ADDR                        0x00000008
#define EFM32_ADC_STATUS_MASK                        0x07031303
/** Single conversion is active or has pending conversions. @multiple */
  #define EFM32_ADC_STATUS_SINGLEACT               0x00000001
  #define EFM32_ADC_STATUS_SINGLEACT_SHIFT         0
/** Scan sequence is active or has pending conversions. @multiple */
  #define EFM32_ADC_STATUS_SCANACT                 0x00000002
  #define EFM32_ADC_STATUS_SCANACT_SHIFT           1
/** Reference selected for single mode is warmed up. @multiple */
  #define EFM32_ADC_STATUS_SINGLEREFWARM           0x00000100
  #define EFM32_ADC_STATUS_SINGLEREFWARM_SHIFT     8
/** Reference selected for scan mode is warmed up. @multiple */
  #define EFM32_ADC_STATUS_SCANREFWARM             0x00000200
  #define EFM32_ADC_STATUS_SCANREFWARM_SHIFT       9
/** ADC is warmed up. @multiple */
  #define EFM32_ADC_STATUS_WARM                    0x00001000
  #define EFM32_ADC_STATUS_WARM_SHIFT              12
/** Single conversion data is valid. @multiple */
  #define EFM32_ADC_STATUS_SINGLEDV                0x00010000
  #define EFM32_ADC_STATUS_SINGLEDV_SHIFT          16
/** Scan conversion data is valid. @multiple */
  #define EFM32_ADC_STATUS_SCANDV                  0x00020000
  #define EFM32_ADC_STATUS_SCANDV_SHIFT            17
/** This value indicates from which input channel the results in the
   ADCn_SCANDATA register originates. @multiple */
  #define EFM32_ADC_STATUS_SCANDATASRC             0x07000000
  #define EFM32_ADC_STATUS_SCANDATASRC_SHIFT       24
  #define EFM32_ADC_STATUS_SCANDATASRC_SHIFT_VAL(v) ((v) << 24)
  #define EFM32_ADC_STATUS_SCANDATASRC_SET(x, v)   do { (x) = (((x) & ~0x7000000) | ((v) << 24)); } while(0)
  #define EFM32_ADC_STATUS_SCANDATASRC_GET(x)      (((x) >> 24) & 0x7)

#define EFM32_ADC_SINGLECTRL_ADDR                    0x0000000c
#define EFM32_ADC_SINGLECTRL_MASK                    0x71f70f37
/** Enable/disable repetitive single samples. @multiple */
  #define EFM32_ADC_SINGLECTRL_REP                 0x00000001
  #define EFM32_ADC_SINGLECTRL_REP_SHIFT           0
/** Select single ended or differential input. @multiple */
  #define EFM32_ADC_SINGLECTRL_DIFF                0x00000002
  #define EFM32_ADC_SINGLECTRL_DIFF_SHIFT          1
/** Select single sample result adjustment. @multiple */
  #define EFM32_ADC_SINGLECTRL_ADJ                 0x00000004
  #define EFM32_ADC_SINGLECTRL_ADJ_SHIFT           2
/** Select single sample conversion resolution. @multiple */
  #define EFM32_ADC_SINGLECTRL_RES                 0x00000030
  #define EFM32_ADC_SINGLECTRL_RES_SHIFT           4
  #define EFM32_ADC_SINGLECTRL_RES_SHIFT_VAL(v)    ((EFM32_ADC_SINGLECTRL_RES_##v) << 4)
  #define EFM32_ADC_SINGLECTRL_RES_SET(x, v)       do { (x) = (((x) & ~0x30) | ((EFM32_ADC_SINGLECTRL_RES_##v) << 4)); } while(0)
  #define EFM32_ADC_SINGLECTRL_RES_SETVAL(x, v)    do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define EFM32_ADC_SINGLECTRL_RES_GET(x)          (((x) >> 4) & 0x3)
    #define EFM32_ADC_SINGLECTRL_RES_12BITS          0x00000000
    #define EFM32_ADC_SINGLECTRL_RES_8BITS           0x00000001
    #define EFM32_ADC_SINGLECTRL_RES_6BITS           0x00000002
    #define EFM32_ADC_SINGLECTRL_RES_OVS             0x00000003
/** Select input to ADC single sample mode in either single ended mode or
   differential mode. @multiple */
  #define EFM32_ADC_SINGLECTRL_INPUTSEL            0x00000f00
  #define EFM32_ADC_SINGLECTRL_INPUTSEL_SHIFT      8
  #define EFM32_ADC_SINGLECTRL_INPUTSEL_SHIFT_VAL(v) ((EFM32_ADC_SINGLECTRL_INPUTSEL_##v) << 8)
  #define EFM32_ADC_SINGLECTRL_INPUTSEL_SET(x, v)  do { (x) = (((x) & ~0xf00) | ((EFM32_ADC_SINGLECTRL_INPUTSEL_##v) << 8)); } while(0)
  #define EFM32_ADC_SINGLECTRL_INPUTSEL_SETVAL(x, v) do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFM32_ADC_SINGLECTRL_INPUTSEL_GET(x)     (((x) >> 8) & 0xf)
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_CH0_CH0CH1 0x00000000
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_CH1_CH2CH3 0x00000001
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_CH2_CH4CH5 0x00000002
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_CH3_CH6CH7 0x00000003
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_CH4_DIFF0  0x00000004
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_CH5        0x00000005
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_CH6        0x00000006
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_CH7        0x00000007
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_TEMP       0x00000008
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_VDDDIV3    0x00000009
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_VDD        0x0000000a
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_VSS        0x0000000b
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_VREFDIV2   0x0000000c
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_DAC0OUT0   0x0000000d
    #define EFM32_ADC_SINGLECTRL_INPUTSEL_DAC0OUT1   0x0000000e
/** Select reference to ADC single sample mode. @multiple */
  #define EFM32_ADC_SINGLECTRL_REF                 0x00070000
  #define EFM32_ADC_SINGLECTRL_REF_SHIFT           16
  #define EFM32_ADC_SINGLECTRL_REF_SHIFT_VAL(v)    ((EFM32_ADC_SINGLECTRL_REF_##v) << 16)
  #define EFM32_ADC_SINGLECTRL_REF_SET(x, v)       do { (x) = (((x) & ~0x70000) | ((EFM32_ADC_SINGLECTRL_REF_##v) << 16)); } while(0)
  #define EFM32_ADC_SINGLECTRL_REF_SETVAL(x, v)    do { (x) = (((x) & ~0x70000) | ((v) << 16)); } while(0)
  #define EFM32_ADC_SINGLECTRL_REF_GET(x)          (((x) >> 16) & 0x7)
    #define EFM32_ADC_SINGLECTRL_REF_1V25            0x00000000
    #define EFM32_ADC_SINGLECTRL_REF_2V5             0x00000001
    #define EFM32_ADC_SINGLECTRL_REF_VDD             0x00000002
    #define EFM32_ADC_SINGLECTRL_REF_5VDIFF          0x00000003
    #define EFM32_ADC_SINGLECTRL_REF_EXTSINGLE       0x00000004
    #define EFM32_ADC_SINGLECTRL_REF_2XEXTDIFF       0x00000005
    #define EFM32_ADC_SINGLECTRL_REF_2XVDD           0x00000006
/** Select the acquisition time for single sample. @multiple */
  #define EFM32_ADC_SINGLECTRL_AT                  0x00f00000
  #define EFM32_ADC_SINGLECTRL_AT_SHIFT            20
  #define EFM32_ADC_SINGLECTRL_AT_SHIFT_VAL(v)     ((EFM32_ADC_SINGLECTRL_AT_##v) << 20)
  #define EFM32_ADC_SINGLECTRL_AT_SET(x, v)        do { (x) = (((x) & ~0xf00000) | ((EFM32_ADC_SINGLECTRL_AT_##v) << 20)); } while(0)
  #define EFM32_ADC_SINGLECTRL_AT_SETVAL(x, v)     do { (x) = (((x) & ~0xf00000) | ((v) << 20)); } while(0)
  #define EFM32_ADC_SINGLECTRL_AT_GET(x)           (((x) >> 20) & 0xf)
    #define EFM32_ADC_SINGLECTRL_AT_1CYCLE           0x00000000
    #define EFM32_ADC_SINGLECTRL_AT_2CYCLES          0x00000001
    #define EFM32_ADC_SINGLECTRL_AT_4CYCLES          0x00000002
    #define EFM32_ADC_SINGLECTRL_AT_8CYCLES          0x00000003
    #define EFM32_ADC_SINGLECTRL_AT_16CYCLES         0x00000004
    #define EFM32_ADC_SINGLECTRL_AT_32CYCLES         0x00000005
    #define EFM32_ADC_SINGLECTRL_AT_64CYCLES         0x00000006
    #define EFM32_ADC_SINGLECTRL_AT_128CYCLES        0x00000007
    #define EFM32_ADC_SINGLECTRL_AT_256CYCLES        0x00000008
/** Enabled/disable PRS trigger of single sample. @multiple */
  #define EFM32_ADC_SINGLECTRL_PRSEN               0x01000000
  #define EFM32_ADC_SINGLECTRL_PRSEN_SHIFT         24
/** Select PRS trigger for single sample. @multiple */
  #define EFM32_ADC_SINGLECTRL_PRSSEL              0x70000000
  #define EFM32_ADC_SINGLECTRL_PRSSEL_SHIFT        28
  #define EFM32_ADC_SINGLECTRL_PRSSEL_SHIFT_VAL(v) ((EFM32_ADC_SINGLECTRL_PRSSEL_##v) << 28)
  #define EFM32_ADC_SINGLECTRL_PRSSEL_SET(x, v)    do { (x) = (((x) & ~0x70000000) | ((EFM32_ADC_SINGLECTRL_PRSSEL_##v) << 28)); } while(0)
  #define EFM32_ADC_SINGLECTRL_PRSSEL_SETVAL(x, v) do { (x) = (((x) & ~0x70000000) | ((v) << 28)); } while(0)
  #define EFM32_ADC_SINGLECTRL_PRSSEL_GET(x)       (((x) >> 28) & 0x7)
    #define EFM32_ADC_SINGLECTRL_PRSSEL_PRSCH0       0x00000000
    #define EFM32_ADC_SINGLECTRL_PRSSEL_PRSCH1       0x00000001
    #define EFM32_ADC_SINGLECTRL_PRSSEL_PRSCH2       0x00000002
    #define EFM32_ADC_SINGLECTRL_PRSSEL_PRSCH3       0x00000003
    #define EFM32_ADC_SINGLECTRL_PRSSEL_PRSCH4       0x00000004
    #define EFM32_ADC_SINGLECTRL_PRSSEL_PRSCH5       0x00000005

#define EFM32_ADC_SCANCTRL_ADDR                      0x00000010
#define EFM32_ADC_SCANCTRL_MASK                      0x71f7ff37
/** Enable/disable repetitive scan sequence. @multiple */
  #define EFM32_ADC_SCANCTRL_REP                   0x00000001
  #define EFM32_ADC_SCANCTRL_REP_SHIFT             0
/** Select single ended or differential input. @multiple */
  #define EFM32_ADC_SCANCTRL_DIFF                  0x00000002
  #define EFM32_ADC_SCANCTRL_DIFF_SHIFT            1
/** Select scan sequence result adjustment. @multiple */
  #define EFM32_ADC_SCANCTRL_ADJ                   0x00000004
  #define EFM32_ADC_SCANCTRL_ADJ_SHIFT             2
/** Select scan sequence conversion resolution. @multiple */
  #define EFM32_ADC_SCANCTRL_RES                   0x00000030
  #define EFM32_ADC_SCANCTRL_RES_SHIFT             4
  #define EFM32_ADC_SCANCTRL_RES_SHIFT_VAL(v)      ((EFM32_ADC_SCANCTRL_RES_##v) << 4)
  #define EFM32_ADC_SCANCTRL_RES_SET(x, v)         do { (x) = (((x) & ~0x30) | ((EFM32_ADC_SCANCTRL_RES_##v) << 4)); } while(0)
  #define EFM32_ADC_SCANCTRL_RES_SETVAL(x, v)      do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define EFM32_ADC_SCANCTRL_RES_GET(x)            (((x) >> 4) & 0x3)
    #define EFM32_ADC_SCANCTRL_RES_12BITS            0x00000000
    #define EFM32_ADC_SCANCTRL_RES_8BITS             0x00000001
    #define EFM32_ADC_SCANCTRL_RES_6BITS             0x00000002
    #define EFM32_ADC_SCANCTRL_RES_OVS               0x00000003
/** Set one or more bits in this mask to select which inputs are included the
   scan sequence in either single ended or differential mode. @multiple */
  #define EFM32_ADC_SCANCTRL_INPUTMASK             0x0000ff00
  #define EFM32_ADC_SCANCTRL_INPUTMASK_SHIFT       8
  #define EFM32_ADC_SCANCTRL_INPUTMASK_SHIFT_VAL(v) ((EFM32_ADC_SCANCTRL_INPUTMASK_##v) << 8)
  #define EFM32_ADC_SCANCTRL_INPUTMASK_SET(x, v)   do { (x) = (((x) & ~0xff00) | ((EFM32_ADC_SCANCTRL_INPUTMASK_##v) << 8)); } while(0)
  #define EFM32_ADC_SCANCTRL_INPUTMASK_SETVAL(x, v) do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define EFM32_ADC_SCANCTRL_INPUTMASK_GET(x)      (((x) >> 8) & 0xff)
    #define EFM32_ADC_SCANCTRL_INPUTMASK_CH0_CH0CH1  0x00000001
    #define EFM32_ADC_SCANCTRL_INPUTMASK_CH1_CH2CH3  0x00000002
    #define EFM32_ADC_SCANCTRL_INPUTMASK_CH2_CH4CH5  0x00000004
    #define EFM32_ADC_SCANCTRL_INPUTMASK_CH3_CH6CH7  0x00000008
    #define EFM32_ADC_SCANCTRL_INPUTMASK_CH4_DIFF0   0x00000010
    #define EFM32_ADC_SCANCTRL_INPUTMASK_CH5         0x00000020
    #define EFM32_ADC_SCANCTRL_INPUTMASK_CH6         0x00000040
    #define EFM32_ADC_SCANCTRL_INPUTMASK_CH7         0x00000080
/** Select reference to ADC scan sequence. @multiple */
  #define EFM32_ADC_SCANCTRL_REF                   0x00070000
  #define EFM32_ADC_SCANCTRL_REF_SHIFT             16
  #define EFM32_ADC_SCANCTRL_REF_SHIFT_VAL(v)      ((EFM32_ADC_SCANCTRL_REF_##v) << 16)
  #define EFM32_ADC_SCANCTRL_REF_SET(x, v)         do { (x) = (((x) & ~0x70000) | ((EFM32_ADC_SCANCTRL_REF_##v) << 16)); } while(0)
  #define EFM32_ADC_SCANCTRL_REF_SETVAL(x, v)      do { (x) = (((x) & ~0x70000) | ((v) << 16)); } while(0)
  #define EFM32_ADC_SCANCTRL_REF_GET(x)            (((x) >> 16) & 0x7)
    #define EFM32_ADC_SCANCTRL_REF_1V25              0x00000000
    #define EFM32_ADC_SCANCTRL_REF_2V5               0x00000001
    #define EFM32_ADC_SCANCTRL_REF_VDD               0x00000002
    #define EFM32_ADC_SCANCTRL_REF_5VDIFF            0x00000003
    #define EFM32_ADC_SCANCTRL_REF_EXTSINGLE         0x00000004
    #define EFM32_ADC_SCANCTRL_REF_2XEXTDIFF         0x00000005
    #define EFM32_ADC_SCANCTRL_REF_2XVDD             0x00000006
/** Select the acquisition time for scan sample. @multiple */
  #define EFM32_ADC_SCANCTRL_AT                    0x00f00000
  #define EFM32_ADC_SCANCTRL_AT_SHIFT              20
  #define EFM32_ADC_SCANCTRL_AT_SHIFT_VAL(v)       ((EFM32_ADC_SCANCTRL_AT_##v) << 20)
  #define EFM32_ADC_SCANCTRL_AT_SET(x, v)          do { (x) = (((x) & ~0xf00000) | ((EFM32_ADC_SCANCTRL_AT_##v) << 20)); } while(0)
  #define EFM32_ADC_SCANCTRL_AT_SETVAL(x, v)       do { (x) = (((x) & ~0xf00000) | ((v) << 20)); } while(0)
  #define EFM32_ADC_SCANCTRL_AT_GET(x)             (((x) >> 20) & 0xf)
    #define EFM32_ADC_SCANCTRL_AT_1CYCLE             0x00000000
    #define EFM32_ADC_SCANCTRL_AT_2CYCLES            0x00000001
    #define EFM32_ADC_SCANCTRL_AT_4CYCLES            0x00000002
    #define EFM32_ADC_SCANCTRL_AT_8CYCLES            0x00000003
    #define EFM32_ADC_SCANCTRL_AT_16CYCLES           0x00000004
    #define EFM32_ADC_SCANCTRL_AT_32CYCLES           0x00000005
    #define EFM32_ADC_SCANCTRL_AT_64CYCLES           0x00000006
    #define EFM32_ADC_SCANCTRL_AT_128CYCLES          0x00000007
    #define EFM32_ADC_SCANCTRL_AT_256CYCLES          0x00000008
/** Enabled/disable PRS trigger of scan sequence. @multiple */
  #define EFM32_ADC_SCANCTRL_PRSEN                 0x01000000
  #define EFM32_ADC_SCANCTRL_PRSEN_SHIFT           24
/** Select PRS trigger for scan sequence. @multiple */
  #define EFM32_ADC_SCANCTRL_PRSSEL                0x70000000
  #define EFM32_ADC_SCANCTRL_PRSSEL_SHIFT          28
  #define EFM32_ADC_SCANCTRL_PRSSEL_SHIFT_VAL(v)   ((EFM32_ADC_SCANCTRL_PRSSEL_##v) << 28)
  #define EFM32_ADC_SCANCTRL_PRSSEL_SET(x, v)      do { (x) = (((x) & ~0x70000000) | ((EFM32_ADC_SCANCTRL_PRSSEL_##v) << 28)); } while(0)
  #define EFM32_ADC_SCANCTRL_PRSSEL_SETVAL(x, v)   do { (x) = (((x) & ~0x70000000) | ((v) << 28)); } while(0)
  #define EFM32_ADC_SCANCTRL_PRSSEL_GET(x)         (((x) >> 28) & 0x7)
    #define EFM32_ADC_SCANCTRL_PRSSEL_PRSCH0         0x00000000
    #define EFM32_ADC_SCANCTRL_PRSSEL_PRSCH1         0x00000001
    #define EFM32_ADC_SCANCTRL_PRSSEL_PRSCH2         0x00000002
    #define EFM32_ADC_SCANCTRL_PRSSEL_PRSCH3         0x00000003
    #define EFM32_ADC_SCANCTRL_PRSSEL_PRSCH4         0x00000004
    #define EFM32_ADC_SCANCTRL_PRSSEL_PRSCH5         0x00000005

#define EFM32_ADC_IEN_ADDR                           0x00000014
#define EFM32_ADC_IEN_MASK                           0x00000303
/** Enable/disable single conversion complete interrupt. @multiple */
  #define EFM32_ADC_IEN_SINGLE                     0x00000001
  #define EFM32_ADC_IEN_SINGLE_SHIFT               0
/** Enable/disable scan conversion complete interrupt. @multiple */
  #define EFM32_ADC_IEN_SCAN                       0x00000002
  #define EFM32_ADC_IEN_SCAN_SHIFT                 1
/** Enable/disable single result overflow interrupt. @multiple */
  #define EFM32_ADC_IEN_SINGLEOF                   0x00000100
  #define EFM32_ADC_IEN_SINGLEOF_SHIFT             8
/** Enable/disable scan result overflow interrupt. @multiple */
  #define EFM32_ADC_IEN_SCANOF                     0x00000200
  #define EFM32_ADC_IEN_SCANOF_SHIFT               9

#define EFM32_ADC_IF_ADDR                            0x00000018
#define EFM32_ADC_IF_MASK                            0x00000303
/** Indicates single conversion complete when this bit is set. @multiple */
  #define EFM32_ADC_IF_SINGLE                      0x00000001
  #define EFM32_ADC_IF_SINGLE_SHIFT                0
/** Indicates scan conversion complete when this bit is set. @multiple */
  #define EFM32_ADC_IF_SCAN                        0x00000002
  #define EFM32_ADC_IF_SCAN_SHIFT                  1
/** Indicates single result overflow when this bit is set. @multiple */
  #define EFM32_ADC_IF_SINGLEOF                    0x00000100
  #define EFM32_ADC_IF_SINGLEOF_SHIFT              8
/** Indicates scan result overflow when this bit is set. @multiple */
  #define EFM32_ADC_IF_SCANOF                      0x00000200
  #define EFM32_ADC_IF_SCANOF_SHIFT                9

#define EFM32_ADC_IFS_ADDR                           0x0000001c
#define EFM32_ADC_IFS_MASK                           0x00000303
/** Write to 1 to set single conversion complete interrupt flag. @multiple */
  #define EFM32_ADC_IFS_SINGLE                     0x00000001
  #define EFM32_ADC_IFS_SINGLE_SHIFT               0
/** Write to 1 to set scan conversion complete interrupt flag. @multiple */
  #define EFM32_ADC_IFS_SCAN                       0x00000002
  #define EFM32_ADC_IFS_SCAN_SHIFT                 1
/** Write to 1 to set single result overflow interrupt flag. @multiple */
  #define EFM32_ADC_IFS_SINGLEOF                   0x00000100
  #define EFM32_ADC_IFS_SINGLEOF_SHIFT             8
/** Write to 1 to set scan result overflow interrupt flag. @multiple */
  #define EFM32_ADC_IFS_SCANOF                     0x00000200
  #define EFM32_ADC_IFS_SCANOF_SHIFT               9

#define EFM32_ADC_IFC_ADDR                           0x00000020
#define EFM32_ADC_IFC_MASK                           0x00000303
/** Write to 1 to clear single conversion complete interrupt flag. @multiple */
  #define EFM32_ADC_IFC_SINGLE                     0x00000001
  #define EFM32_ADC_IFC_SINGLE_SHIFT               0
/** Write to 1 to clear scan conversion complete interrupt flag. @multiple */
  #define EFM32_ADC_IFC_SCAN                       0x00000002
  #define EFM32_ADC_IFC_SCAN_SHIFT                 1
/** Write to 1 to clear single result overflow interrupt flag. @multiple */
  #define EFM32_ADC_IFC_SINGLEOF                   0x00000100
  #define EFM32_ADC_IFC_SINGLEOF_SHIFT             8
/** Write to 1 to clear scan result overflow interrupt flag. @multiple */
  #define EFM32_ADC_IFC_SCANOF                     0x00000200
  #define EFM32_ADC_IFC_SCANOF_SHIFT               9

#define EFM32_ADC_SINGLEDATA_ADDR                    0x00000024
#define EFM32_ADC_SINGLEDATA_MASK                    0xffffffff
  #define EFM32_ADC_SINGLEDATA_VAL                 0xffffffff
  #define EFM32_ADC_SINGLEDATA_VAL_SHIFT           0
  #define EFM32_ADC_SINGLEDATA_VAL_SHIFT_VAL(v)    ((v) << 0)
  #define EFM32_ADC_SINGLEDATA_VAL_SET(x, v)       do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFM32_ADC_SINGLEDATA_VAL_GET(x)          (((x) >> 0) & 0xffffffff)

#define EFM32_ADC_SCANDATA_ADDR                      0x00000028
#define EFM32_ADC_SCANDATA_MASK                      0xffffffff
  #define EFM32_ADC_SCANDATA_VAL                   0xffffffff
  #define EFM32_ADC_SCANDATA_VAL_SHIFT             0
  #define EFM32_ADC_SCANDATA_VAL_SHIFT_VAL(v)      ((v) << 0)
  #define EFM32_ADC_SCANDATA_VAL_SET(x, v)         do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFM32_ADC_SCANDATA_VAL_GET(x)            (((x) >> 0) & 0xffffffff)

#define EFM32_ADC_SINGLEDATAP_ADDR                   0x0000002c
#define EFM32_ADC_SINGLEDATAP_MASK                   0xffffffff
  #define EFM32_ADC_SINGLEDATAP_VAL                0xffffffff
  #define EFM32_ADC_SINGLEDATAP_VAL_SHIFT          0
  #define EFM32_ADC_SINGLEDATAP_VAL_SHIFT_VAL(v)   ((v) << 0)
  #define EFM32_ADC_SINGLEDATAP_VAL_SET(x, v)      do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFM32_ADC_SINGLEDATAP_VAL_GET(x)         (((x) >> 0) & 0xffffffff)

#define EFM32_ADC_SCANDATAP_ADDR                     0x00000030
#define EFM32_ADC_SCANDATAP_MASK                     0xffffffff
  #define EFM32_ADC_SCANDATAP_VAL                  0xffffffff
  #define EFM32_ADC_SCANDATAP_VAL_SHIFT            0
  #define EFM32_ADC_SCANDATAP_VAL_SHIFT_VAL(v)     ((v) << 0)
  #define EFM32_ADC_SCANDATAP_VAL_SET(x, v)        do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFM32_ADC_SCANDATAP_VAL_GET(x)           (((x) >> 0) & 0xffffffff)

#define EFM32_ADC_CAL_ADDR                           0x00000034
#define EFM32_ADC_CAL_MASK                           0x7f7f7f7f
/** This register contains the offset calibration value used with single
   conversions. This field is set to the production offset calibration value for
   the 1V25 internal reference during reset, hence the reset value might differ
   from device to device. The field is encoded as a signed 2's complement number.
   Higher values lead to lower ADC results. @multiple */
  #define EFM32_ADC_CAL_SINGLEOFFSET               0x0000007f
  #define EFM32_ADC_CAL_SINGLEOFFSET_SHIFT         0
  #define EFM32_ADC_CAL_SINGLEOFFSET_SHIFT_VAL(v)  ((v) << 0)
  #define EFM32_ADC_CAL_SINGLEOFFSET_SET(x, v)     do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define EFM32_ADC_CAL_SINGLEOFFSET_GET(x)        (((x) >> 0) & 0x7f)
/** This register contains the gain calibration value used with single
   conversions. This field is set to the production gain calibration value for
   the 1V25 internal reference during reset, hence the reset value might differ
   from device to device. The field is unsigned. Higher values lead to higher ADC
   results. @multiple */
  #define EFM32_ADC_CAL_SINGLEGAIN                 0x00007f00
  #define EFM32_ADC_CAL_SINGLEGAIN_SHIFT           8
  #define EFM32_ADC_CAL_SINGLEGAIN_SHIFT_VAL(v)    ((v) << 8)
  #define EFM32_ADC_CAL_SINGLEGAIN_SET(x, v)       do { (x) = (((x) & ~0x7f00) | ((v) << 8)); } while(0)
  #define EFM32_ADC_CAL_SINGLEGAIN_GET(x)          (((x) >> 8) & 0x7f)
/** This register contains the offset calibration value used with scan
   conversions. This field is set to the production offset calibration value for
   the 1V25 internal reference during reset, hence the reset value might differ
   from device to device. The field is encoded as a signed 2's complement number.
   Higher values lead to lower ADC results. @multiple */
  #define EFM32_ADC_CAL_SCANOFFSET                 0x007f0000
  #define EFM32_ADC_CAL_SCANOFFSET_SHIFT           16
  #define EFM32_ADC_CAL_SCANOFFSET_SHIFT_VAL(v)    ((v) << 16)
  #define EFM32_ADC_CAL_SCANOFFSET_SET(x, v)       do { (x) = (((x) & ~0x7f0000) | ((v) << 16)); } while(0)
  #define EFM32_ADC_CAL_SCANOFFSET_GET(x)          (((x) >> 16) & 0x7f)
/** This register contains the gain calibration value used with scan conversions.
   This field is set to the production gain calibration value for the 1V25
   internal reference during reset, hence the reset value might differ from
   device to device. The field is unsigned. Higher values lead to higher ADC
   results. @multiple */
  #define EFM32_ADC_CAL_SCANGAIN                   0x7f000000
  #define EFM32_ADC_CAL_SCANGAIN_SHIFT             24
  #define EFM32_ADC_CAL_SCANGAIN_SHIFT_VAL(v)      ((v) << 24)
  #define EFM32_ADC_CAL_SCANGAIN_SET(x, v)         do { (x) = (((x) & ~0x7f000000) | ((v) << 24)); } while(0)
  #define EFM32_ADC_CAL_SCANGAIN_GET(x)            (((x) >> 24) & 0x7f)

#define EFM32_ADC_BIASPROG_ADDR                      0x00000038
#define EFM32_ADC_BIASPROG_MASK                      0x00000f4f
/** These bits are used to adjust the bias current. @multiple */
  #define EFM32_ADC_BIASPROG_BIASPROG              0x0000000f
  #define EFM32_ADC_BIASPROG_BIASPROG_SHIFT        0
  #define EFM32_ADC_BIASPROG_BIASPROG_SHIFT_VAL(v) ((v) << 0)
  #define EFM32_ADC_BIASPROG_BIASPROG_SET(x, v)    do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFM32_ADC_BIASPROG_BIASPROG_GET(x)       (((x) >> 0) & 0xf)
/** Set this bit to halve the bias current. @multiple */
  #define EFM32_ADC_BIASPROG_HALFBIAS              0x00000040
  #define EFM32_ADC_BIASPROG_HALFBIAS_SHIFT        6
/** These bits are used to adjust the bias current to the ADC Comparator.
   @multiple */
  #define EFM32_ADC_BIASPROG_COMPBIAS              0x00000f00
  #define EFM32_ADC_BIASPROG_COMPBIAS_SHIFT        8
  #define EFM32_ADC_BIASPROG_COMPBIAS_SHIFT_VAL(v) ((v) << 8)
  #define EFM32_ADC_BIASPROG_COMPBIAS_SET(x, v)    do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define EFM32_ADC_BIASPROG_COMPBIAS_GET(x)       (((x) >> 8) & 0xf)

#endif

