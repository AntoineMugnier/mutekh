/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs -I /opt/bfgen/defs/efm32/efm32_acmp.bf cdefs_use_reg_mask=1
*/

#ifndef _EFM32_ACMP_BFGEN_DEFS_
#define _EFM32_ACMP_BFGEN_DEFS_

#define EFM32_ACMP_CTRL_ADDR                         0x00000000
#define EFM32_ACMP_CTRL_MASK                         0xcf03077f
/** Enable/disable analog comparator. @multiple */
  #define EFM32_ACMP_CTRL_ENABLE                   0x00000001
/** Enable Input Mux. Setting the EN bit will also enable the input mux.
   @multiple */
  #define EFM32_ACMP_CTRL_MUXEN                    0x00000002
/** The value of this bit is used as the comparator output when the comparator is
   inactive. @multiple */
  #define EFM32_ACMP_CTRL_INACTVAL(v)              ((EFM32_ACMP_CTRL_INACTVAL_##v) << 2)
  #define EFM32_ACMP_CTRL_INACTVAL_SET(x, v)       do { (x) = (((x) & ~0x4) | ((EFM32_ACMP_CTRL_INACTVAL_##v) << 2)); } while(0)
  #define EFM32_ACMP_CTRL_INACTVAL_GET(x)          (((x) >> 2) & 0x1)
    #define EFM32_ACMP_CTRL_INACTVAL_LOW             0x00000000
    #define EFM32_ACMP_CTRL_INACTVAL_HIGH            0x00000001
/** Set this bit to 1 to invert the comparator alternate function output to GPIO
   @multiple */
  #define EFM32_ACMP_CTRL_GPIOINV(v)               ((EFM32_ACMP_CTRL_GPIOINV_##v) << 3)
  #define EFM32_ACMP_CTRL_GPIOINV_SET(x, v)        do { (x) = (((x) & ~0x8) | ((EFM32_ACMP_CTRL_GPIOINV_##v) << 3)); } while(0)
  #define EFM32_ACMP_CTRL_GPIOINV_GET(x)           (((x) >> 3) & 0x1)
    #define EFM32_ACMP_CTRL_GPIOINV_NOTINV           0x00000000
    #define EFM32_ACMP_CTRL_GPIOINV_INV              0x00000001
/** Select hysteresis level. The hysteresis levels can vary, please see the
   electrical characteristics for the device for more information. @multiple */
  #define EFM32_ACMP_CTRL_HYSTSEL(v)               ((EFM32_ACMP_CTRL_HYSTSEL_##v) << 4)
  #define EFM32_ACMP_CTRL_HYSTSEL_SET(x, v)        do { (x) = (((x) & ~0x70) | ((EFM32_ACMP_CTRL_HYSTSEL_##v) << 4)); } while(0)
  #define EFM32_ACMP_CTRL_HYSTSEL_GET(x)           (((x) >> 4) & 0x7)
    #define EFM32_ACMP_CTRL_HYSTSEL_NO_HYST          0x00000000
    #define EFM32_ACMP_CTRL_HYSTSEL_HYST_15          0x00000001
    #define EFM32_ACMP_CTRL_HYSTSEL_HYST_22          0x00000002
    #define EFM32_ACMP_CTRL_HYSTSEL_HYST_29          0x00000003
    #define EFM32_ACMP_CTRL_HYSTSEL_HYST_36          0x00000004
    #define EFM32_ACMP_CTRL_HYSTSEL_HYST_43          0x00000005
    #define EFM32_ACMP_CTRL_HYSTSEL_HYST_50          0x00000006
    #define EFM32_ACMP_CTRL_HYSTSEL_HYST_57          0x00000007
/** Set analog comparator warm-up time. @multiple */
  #define EFM32_ACMP_CTRL_WARMTIME(v)              ((EFM32_ACMP_CTRL_WARMTIME_##v) << 8)
  #define EFM32_ACMP_CTRL_WARMTIME_SET(x, v)       do { (x) = (((x) & ~0x700) | ((EFM32_ACMP_CTRL_WARMTIME_##v) << 8)); } while(0)
  #define EFM32_ACMP_CTRL_WARMTIME_GET(x)          (((x) >> 8) & 0x7)
    #define EFM32_ACMP_CTRL_WARMTIME_4CYCLES         0x00000000
    #define EFM32_ACMP_CTRL_WARMTIME_8CYCLES         0x00000001
    #define EFM32_ACMP_CTRL_WARMTIME_16CYCLES        0x00000002
    #define EFM32_ACMP_CTRL_WARMTIME_32CYCLES        0x00000003
    #define EFM32_ACMP_CTRL_WARMTIME_64CYCLES        0x00000004
    #define EFM32_ACMP_CTRL_WARMTIME_128CYCLES       0x00000005
    #define EFM32_ACMP_CTRL_WARMTIME_256CYCLES       0x00000006
    #define EFM32_ACMP_CTRL_WARMTIME_512CYCLES       0x00000007
/** Set this bit to 1 to set the EDGE interrupt flag on rising edges of
   comparator output. @multiple */
  #define EFM32_ACMP_CTRL_IRISE                    0x00010000
/** Set this bit to 1 to set the EDGE interrupt flag on falling edges of
   comparator output. @multiple */
  #define EFM32_ACMP_CTRL_IFALL                    0x00020000
/** These bits control the bias current level in accordance. @multiple */
  #define EFM32_ACMP_CTRL_BIASPROG(v)              ((v) << 24)
  #define EFM32_ACMP_CTRL_BIASPROG_SET(x, v)       do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define EFM32_ACMP_CTRL_BIASPROG_GET(x)          (((x) >> 24) & 0xf)
/** Set this bit to 1 to halve the bias current. @multiple */
  #define EFM32_ACMP_CTRL_HALFBIAS                 0x40000000
/** Set this bit to 1 for full bias current. @multiple */
  #define EFM32_ACMP_CTRL_FULLBIAS                 0x80000000

#define EFM32_ACMP_INPUT_SEL_ADDR                    0x00000004
#define EFM32_ACMP_INPUT_SEL_MASK                    0x31013ff7
/** Select positive input. @multiple */
  #define EFM32_ACMP_INPUT_SEL_POSSEL(v)           ((EFM32_ACMP_INPUT_SEL_POSSEL_##v) << 0)
  #define EFM32_ACMP_INPUT_SEL_POSSEL_SET(x, v)    do { (x) = (((x) & ~0x7) | ((EFM32_ACMP_INPUT_SEL_POSSEL_##v) << 0)); } while(0)
  #define EFM32_ACMP_INPUT_SEL_POSSEL_GET(x)       (((x) >> 0) & 0x7)
    #define EFM32_ACMP_INPUT_SEL_POSSEL_CH0          0x00000000
    #define EFM32_ACMP_INPUT_SEL_POSSEL_CH1          0x00000001
    #define EFM32_ACMP_INPUT_SEL_POSSEL_CH2          0x00000002
    #define EFM32_ACMP_INPUT_SEL_POSSEL_CH3          0x00000003
    #define EFM32_ACMP_INPUT_SEL_POSSEL_CH4          0x00000004
    #define EFM32_ACMP_INPUT_SEL_POSSEL_CH5          0x00000005
    #define EFM32_ACMP_INPUT_SEL_POSSEL_CH6          0x00000006
    #define EFM32_ACMP_INPUT_SEL_POSSEL_CH7          0x00000007
/** Select negative input. @multiple */
  #define EFM32_ACMP_INPUT_SEL_NEGSEL(v)           ((EFM32_ACMP_INPUT_SEL_NEGSEL_##v) << 4)
  #define EFM32_ACMP_INPUT_SEL_NEGSEL_SET(x, v)    do { (x) = (((x) & ~0xf0) | ((EFM32_ACMP_INPUT_SEL_NEGSEL_##v) << 4)); } while(0)
  #define EFM32_ACMP_INPUT_SEL_NEGSEL_GET(x)       (((x) >> 4) & 0xf)
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_CH0          0x00000000
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_CH1          0x00000001
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_CH2          0x00000002
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_CH3          0x00000003
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_CH4          0x00000004
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_CH5          0x00000005
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_CH6          0x00000006
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_CH7          0x00000007
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_1V25         0x00000008
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_2V5          0x00000009
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_VDD          0x0000000a
    #define EFM32_ACMP_INPUT_SEL_NEGSEL_CAPSENSE     0x0000000b
/** Select scaling factor for VDD reference level.VDD_SCALED = VDDÃ—VDDLEVEL/63.
   @multiple */
  #define EFM32_ACMP_INPUT_SEL_VDDLEVEL(v)         ((v) << 8)
  #define EFM32_ACMP_INPUT_SEL_VDDLEVEL_SET(x, v)  do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define EFM32_ACMP_INPUT_SEL_VDDLEVEL_GET(x)     (((x) >> 8) & 0x3f)
/** Enable low power mode for VDD and bandgap references. @multiple */
  #define EFM32_ACMP_INPUT_SEL_LFPREF              0x00010000
/** Enable/disable the internal capacitive sense resistor. @multiple */
  #define EFM32_ACMP_INPUT_SEL_CSRESEN             0x01000000
/** These bits select the resistance value for the internal capacitive sense
   resistor. @multiple */
  #define EFM32_ACMP_INPUT_SEL_CSRESSEL(v)         ((EFM32_ACMP_INPUT_SEL_CSRESSEL_##v) << 28)
  #define EFM32_ACMP_INPUT_SEL_CSRESSEL_SET(x, v)  do { (x) = (((x) & ~0x30000000) | ((EFM32_ACMP_INPUT_SEL_CSRESSEL_##v) << 28)); } while(0)
  #define EFM32_ACMP_INPUT_SEL_CSRESSEL_GET(x)     (((x) >> 28) & 0x3)
    #define EFM32_ACMP_INPUT_SEL_CSRESSEL_RES0       0x00000000
    #define EFM32_ACMP_INPUT_SEL_CSRESSEL_RES1       0x00000001
    #define EFM32_ACMP_INPUT_SEL_CSRESSEL_RES2       0x00000002
    #define EFM32_ACMP_INPUT_SEL_CSRESSEL_RES3       0x00000003

#define EFM32_ACMP_STATUS_ADDR                       0x00000008
#define EFM32_ACMP_STATUS_MASK                       0x00000003
/** Analog comparator active status. @multiple */
  #define EFM32_ACMP_STATUS_ACMPACT                0x00000001
/** Analog comparator output value. @multiple */
  #define EFM32_ACMP_STATUS_ACMPOUT                0x00000002

#define EFM32_ACMP_IEN_ADDR                          0x0000000c
#define EFM32_ACMP_IEN_MASK                          0x00000003
/** Enable/disable edge triggered interrupt. @multiple */
  #define EFM32_ACMP_IEN_EDGE                      0x00000001
/** Enable/disable interrupt on finished warm-up. @multiple */
  #define EFM32_ACMP_IEN_WARMUP                    0x00000002

#define EFM32_ACMP_IF_ADDR                           0x00000010
#define EFM32_ACMP_IF_MASK                           0x00000003
/** Indicates that there has been a rising or falling edge on the analog
   comparator output. @multiple */
  #define EFM32_ACMP_IF_EDGE                       0x00000001
/** Indicates that the analog comparator warm-up period is finished. @multiple */
  #define EFM32_ACMP_IF_WARMUP                     0x00000002

#define EFM32_ACMP_IFS_ADDR                          0x00000014
#define EFM32_ACMP_IFS_MASK                          0x00000003
/** Write to 1 to set edge triggered interrupt flag. @multiple */
  #define EFM32_ACMP_IFS_EDGE                      0x00000001
/** Write to 1 to set warm-up finished interrupt flag. @multiple */
  #define EFM32_ACMP_IFS_WARMUP                    0x00000002

#define EFM32_ACMP_IFC_ADDR                          0x00000018
#define EFM32_ACMP_IFC_MASK                          0x00000003
/** Write to 1 to clear edge triggered interrupt flag. @multiple */
  #define EFM32_ACMP_IFC_EDGE                      0x00000001
/** Write to 1 to clear warm-up finished interrupt flag. @multiple */
  #define EFM32_ACMP_IFC_WARMUP                    0x00000002

#define EFM32_ACMP_ROUTE_ADDR                        0x0000001c
#define EFM32_ACMP_ROUTE_MASK                        0x00000003
/** Enable/disable analog comparator output to pin. @multiple */
  #define EFM32_ACMP_ROUTE_ACMPPPEN                0x00000001
/** Decides the location of the ACMP I/O pin. @multiple */
  #define EFM32_ACMP_ROUTE_LOCATION(v)             ((EFM32_ACMP_ROUTE_LOCATION_##v) << 8)
  #define EFM32_ACMP_ROUTE_LOCATION_SET(x, v)      do { (x) = (((x) & ~0x2) | ((EFM32_ACMP_ROUTE_LOCATION_##v) << 8)); } while(0)
  #define EFM32_ACMP_ROUTE_LOCATION_GET(x)         (((x) >> 8) & 0x1)
    #define EFM32_ACMP_ROUTE_LOCATION_LOC0           0x00000000
    #define EFM32_ACMP_ROUTE_LOCATION_LOC1           0x00000001

#define EFM32_ACMP_FREEZE_ADDR                       0x00000020
#define EFM32_ACMP_FREEZE_MASK                       0x00000003
/** Each write access to a PCNT register is updated into the Low Frequency domain
   as soon as possible @multiple */
  #define EFM32_ACMP_FREEZE_UPDATE                 0x00000001
/** The PCNT clock domain is not updated with the new written value. @multiple */
  #define EFM32_ACMP_FREEZE_FREEZE                 0x00000002

#define EFM32_ACMP_SYNCBUSY_ADDR                     0x00000024
#define EFM32_ACMP_SYNCBUSY_MASK                     0x00000007
/** Set when the value written to CTRL is being synchronized. @multiple */
  #define EFM32_ACMP_SYNCBUSY_CTRL                 0x00000001
/** Set when the value written to CMD is being synchronized. @multiple */
  #define EFM32_ACMP_SYNCBUSY_CMD                  0x00000002
/** Set when the value written to TOPB is being synchronized. @multiple */
  #define EFM32_ACMP_SYNCBUSY_TOPB                 0x00000004

#endif

