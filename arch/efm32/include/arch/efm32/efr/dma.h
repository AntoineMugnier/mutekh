/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1                \
     -i ldma.bf                  \
     -O dma.h
*/

#ifndef _EFR32_LDMA_BFGEN_DEFS_
#define _EFR32_LDMA_BFGEN_DEFS_

#define EFR32_LDMA_CTRL_ADDR                         0x00000000
#define EFR32_LDMA_CTRL_MASK                         0x8700ffff
  #define EFR32_LDMA_CTRL_SYNCPRSSETEN(v)          ((v) << 0)
  #define EFR32_LDMA_CTRL_SYNCPRSSETEN_SET(x, v)   do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_LDMA_CTRL_SYNCPRSSETEN_GET(x)      (((x) >> 0) & 0xff)
  #define EFR32_LDMA_CTRL_SYNCPRSCLREN(v)          ((v) << 8)
  #define EFR32_LDMA_CTRL_SYNCPRSCLREN_SET(x, v)   do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define EFR32_LDMA_CTRL_SYNCPRSCLREN_GET(x)      (((x) >> 8) & 0xff)
  #define EFR32_LDMA_CTRL_NUMFIXED(v)              ((v) << 24)
  #define EFR32_LDMA_CTRL_NUMFIXED_SET(x, v)       do { (x) = (((x) & ~0x7000000) | ((v) << 24)); } while(0)
  #define EFR32_LDMA_CTRL_NUMFIXED_GET(x)          (((x) >> 24) & 0x7)
  #define EFR32_LDMA_CTRL_RESET                    0x80000000

#define EFR32_LDMA_STATUS_ADDR                       0x00000004
#define EFR32_LDMA_STATUS_MASK                       0x1f1f073b
  #define EFR32_LDMA_STATUS_ANYBUSY                0x00000001
  #define EFR32_LDMA_STATUS_ANYREQ                 0x00000002
  #define EFR32_LDMA_STATUS_CHGRANT(v)             ((v) << 3)
  #define EFR32_LDMA_STATUS_CHGRANT_SET(x, v)      do { (x) = (((x) & ~0x38) | ((v) << 3)); } while(0)
  #define EFR32_LDMA_STATUS_CHGRANT_GET(x)         (((x) >> 3) & 0x7)
  #define EFR32_LDMA_STATUS_CHERROR(v)             ((v) << 8)
  #define EFR32_LDMA_STATUS_CHERROR_SET(x, v)      do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define EFR32_LDMA_STATUS_CHERROR_GET(x)         (((x) >> 8) & 0x7)
  #define EFR32_LDMA_STATUS_FIFOLEVEL(v)           ((v) << 16)
  #define EFR32_LDMA_STATUS_FIFOLEVEL_SET(x, v)    do { (x) = (((x) & ~0x1f0000) | ((v) << 16)); } while(0)
  #define EFR32_LDMA_STATUS_FIFOLEVEL_GET(x)       (((x) >> 16) & 0x1f)
  #define EFR32_LDMA_STATUS_CHNUM(v)               ((v) << 24)
  #define EFR32_LDMA_STATUS_CHNUM_SET(x, v)        do { (x) = (((x) & ~0x1f000000) | ((v) << 24)); } while(0)
  #define EFR32_LDMA_STATUS_CHNUM_GET(x)           (((x) >> 24) & 0x1f)

#define EFR32_LDMA_SYNC_ADDR                         0x00000008
#define EFR32_LDMA_SYNC_MASK                         0x000000ff
  #define EFR32_LDMA_SYNC_SYNCTRIG(v)              ((v) << 0)
  #define EFR32_LDMA_SYNC_SYNCTRIG_SET(x, v)       do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_LDMA_SYNC_SYNCTRIG_GET(x)          (((x) >> 0) & 0xff)

#define EFR32_LDMA_CHEN_ADDR                         0x00000020
#define EFR32_LDMA_CHEN_MASK                         0x000000ff
  #define EFR32_LDMA_CHEN_CHEN_COUNT               8
  #define EFR32_LDMA_CHEN_CHEN(fidx)               (0x00000001 << ((fidx)))

#define EFR32_LDMA_CHBUSY_ADDR                       0x00000024
#define EFR32_LDMA_CHBUSY_MASK                       0x000000ff
  #define EFR32_LDMA_CHBUSY_BUSY_COUNT             8
  #define EFR32_LDMA_CHBUSY_BUSY(fidx)             (0x00000001 << ((fidx)))

#define EFR32_LDMA_CHDONE_ADDR                       0x00000028
#define EFR32_LDMA_CHDONE_MASK                       0x000000ff
  #define EFR32_LDMA_CHDONE_CHDONE_COUNT           8
  #define EFR32_LDMA_CHDONE_CHDONE(fidx)           (0x00000001 << ((fidx)))

#define EFR32_LDMA_DBGHALT_ADDR                      0x0000002c
#define EFR32_LDMA_DBGHALT_MASK                      0x000000ff
  #define EFR32_LDMA_DBGHALT_DBGHALT_COUNT         8
  #define EFR32_LDMA_DBGHALT_DBGHALT(fidx)         (0x00000001 << ((fidx)))

#define EFR32_LDMA_SWREQ_ADDR                        0x00000030
#define EFR32_LDMA_SWREQ_MASK                        0x000000ff
  #define EFR32_LDMA_SWREQ_SWREQ_COUNT             8
  #define EFR32_LDMA_SWREQ_SWREQ(fidx)             (0x00000001 << ((fidx)))

#define EFR32_LDMA_REQDIS_ADDR                       0x00000034
#define EFR32_LDMA_REQDIS_MASK                       0x000000ff
  #define EFR32_LDMA_REQDIS_REQDIS_COUNT           8
  #define EFR32_LDMA_REQDIS_REQDIS(fidx)           (0x00000001 << ((fidx)))

#define EFR32_LDMA_REQPEND_ADDR                      0x00000038
#define EFR32_LDMA_REQPEND_MASK                      0x000000ff
  #define EFR32_LDMA_REQPEND_REQPEND_COUNT         8
  #define EFR32_LDMA_REQPEND_REQPEND(fidx)         (0x00000001 << ((fidx)))

#define EFR32_LDMA_LINKLOAD_ADDR                     0x0000003c
#define EFR32_LDMA_LINKLOAD_MASK                     0x000000ff
  #define EFR32_LDMA_LINKLOAD_LINKLOAD_COUNT       8
  #define EFR32_LDMA_LINKLOAD_LINKLOAD(fidx)       (0x00000001 << ((fidx)))

#define EFR32_LDMA_REQCLEAR_ADDR                     0x00000040
#define EFR32_LDMA_REQCLEAR_MASK                     0x000000ff
  #define EFR32_LDMA_REQCLEAR_REQCLEAR_COUNT       8
  #define EFR32_LDMA_REQCLEAR_REQCLEAR(fidx)       (0x00000001 << ((fidx)))

#define EFR32_LDMA_IF_ADDR                           0x00000060
#define EFR32_LDMA_IF_MASK                           0x800000ff
  #define EFR32_LDMA_IF_DONE_COUNT                 8
  #define EFR32_LDMA_IF_DONE(fidx)                 (0x00000001 << ((fidx)))
  #define EFR32_LDMA_IF_ERROR                      0x80000000

#define EFR32_LDMA_IFS_ADDR                          0x00000064
#define EFR32_LDMA_IFS_MASK                          0x800000ff
  #define EFR32_LDMA_IFS_DONE_COUNT                8
  #define EFR32_LDMA_IFS_DONE(fidx)                (0x00000001 << ((fidx)))
  #define EFR32_LDMA_IFS_ERROR                     0x80000000

#define EFR32_LDMA_IFC_ADDR                          0x00000068
#define EFR32_LDMA_IFC_MASK                          0x800000ff
  #define EFR32_LDMA_IFC_DONE_COUNT                8
  #define EFR32_LDMA_IFC_DONE(fidx)                (0x00000001 << ((fidx)))
  #define EFR32_LDMA_IFC_ERROR                     0x80000000

#define EFR32_LDMA_IEN_ADDR                          0x0000006c
#define EFR32_LDMA_IEN_MASK                          0x800000ff
  #define EFR32_LDMA_IEN_DONE_COUNT                8
  #define EFR32_LDMA_IEN_DONE(fidx)                (0x00000001 << ((fidx)))
  #define EFR32_LDMA_IEN_ERROR                     0x80000000

#define EFR32_LDMA_CH_REQSEL_ADDR(ridx)              (0x00000080 + (ridx) * 48)
#define EFR32_LDMA_CH_REQSEL_COUNT                   8
#define EFR32_LDMA_CH_REQSEL_MASK                    0x003f000f
  #define EFR32_LDMA_CH_REQSEL_SIGSEL(v)           ((v) << 0)
  #define EFR32_LDMA_CH_REQSEL_SIGSEL_SET(x, v)    do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFR32_LDMA_CH_REQSEL_SIGSEL_GET(x)       (((x) >> 0) & 0xf)
  #define EFR32_LDMA_CH_REQSEL_SOURCESEL(v)        ((EFR32_LDMA_CH_REQSEL_SOURCESEL_##v) << 16)
  #define EFR32_LDMA_CH_REQSEL_SOURCESEL_SET(x, v) do { (x) = (((x) & ~0x3f0000) | ((EFR32_LDMA_CH_REQSEL_SOURCESEL_##v) << 16)); } while(0)
  #define EFR32_LDMA_CH_REQSEL_SOURCESEL_SETVAL(x, v) do { (x) = (((x) & ~0x3f0000) | ((v) << 16)); } while(0)
  #define EFR32_LDMA_CH_REQSEL_SOURCESEL_GET(x)    (((x) >> 16) & 0x3f)
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_NONE      0x00000000
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_PRS       0x00000001
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_ADC0      0x00000008
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_USART0    0x0000000c
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_USART1    0x0000000d
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_LEUART0   0x00000010
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_I2C0      0x00000014
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_TIMER0    0x00000018
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_TIMER1    0x00000019
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_PROTIMER  0x00000024
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_MODEM     0x00000026
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_AGC       0x00000027
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_MSC       0x00000030
/**  */
    #define EFR32_LDMA_CH_REQSEL_SOURCESEL_CRYPTO    0x00000031

#define EFR32_LDMA_CH_CFG_ADDR(ridx)                 (0x00000084 + (ridx) * 48)
#define EFR32_LDMA_CH_CFG_COUNT                      8
#define EFR32_LDMA_CH_CFG_MASK                       0x00330000
  #define EFR32_LDMA_CH_CFG_ARBSLOTS(v)            ((EFR32_LDMA_CH_CFG_ARBSLOTS_##v) << 16)
  #define EFR32_LDMA_CH_CFG_ARBSLOTS_SET(x, v)     do { (x) = (((x) & ~0x30000) | ((EFR32_LDMA_CH_CFG_ARBSLOTS_##v) << 16)); } while(0)
  #define EFR32_LDMA_CH_CFG_ARBSLOTS_SETVAL(x, v)  do { (x) = (((x) & ~0x30000) | ((v) << 16)); } while(0)
  #define EFR32_LDMA_CH_CFG_ARBSLOTS_GET(x)        (((x) >> 16) & 0x3)
/**  */
    #define EFR32_LDMA_CH_CFG_ARBSLOTS_ONE           0x00000000
/**  */
    #define EFR32_LDMA_CH_CFG_ARBSLOTS_TWO           0x00000001
/**  */
    #define EFR32_LDMA_CH_CFG_ARBSLOTS_FOUR          0x00000002
/**  */
    #define EFR32_LDMA_CH_CFG_ARBSLOTS_EIGHT         0x00000003
  #define EFR32_LDMA_CH_CFG_SRCINCSIGN             0x00100000
  #define EFR32_LDMA_CH_CFG_DSTINCSIGN             0x00200000

#define EFR32_LDMA_CH_LOOP_ADDR(ridx)                (0x00000088 + (ridx) * 48)
#define EFR32_LDMA_CH_LOOP_COUNT                     8
#define EFR32_LDMA_CH_LOOP_MASK                      0x000000ff
  #define EFR32_LDMA_CH_LOOP_LOOPCNT(v)            ((v) << 0)
  #define EFR32_LDMA_CH_LOOP_LOOPCNT_SET(x, v)     do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_LDMA_CH_LOOP_LOOPCNT_GET(x)        (((x) >> 0) & 0xff)

#define EFR32_LDMA_CH_CTRL_ADDR(ridx)                (0x0000008c + (ridx) * 48)
#define EFR32_LDMA_CH_CTRL_COUNT                     8
#define EFR32_LDMA_CH_CTRL_MASK                      0xfffffffb
  #define EFR32_LDMA_CH_CTRL_STRUCTTYPE(v)         ((EFR32_LDMA_CH_CTRL_STRUCTTYPE_##v) << 0)
  #define EFR32_LDMA_CH_CTRL_STRUCTTYPE_SET(x, v)  do { (x) = (((x) & ~0x3) | ((EFR32_LDMA_CH_CTRL_STRUCTTYPE_##v) << 0)); } while(0)
  #define EFR32_LDMA_CH_CTRL_STRUCTTYPE_SETVAL(x, v) do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define EFR32_LDMA_CH_CTRL_STRUCTTYPE_GET(x)     (((x) >> 0) & 0x3)
/**  */
    #define EFR32_LDMA_CH_CTRL_STRUCTTYPE_TRANSFER   0x00000000
/**  */
    #define EFR32_LDMA_CH_CTRL_STRUCTTYPE_SYNCHRONIZE 0x00000001
/**  */
    #define EFR32_LDMA_CH_CTRL_STRUCTTYPE_WRITE      0x00000002
  #define EFR32_LDMA_CH_CTRL_STRUCTREQ             0x00000008
  #define EFR32_LDMA_CH_CTRL_XFERCNT(v)            ((v) << 4)
  #define EFR32_LDMA_CH_CTRL_XFERCNT_SET(x, v)     do { (x) = (((x) & ~0x7ff0) | ((v) << 4)); } while(0)
  #define EFR32_LDMA_CH_CTRL_XFERCNT_GET(x)        (((x) >> 4) & 0x7ff)
  #define EFR32_LDMA_CH_CTRL_BYTESWAP              0x00008000
  #define EFR32_LDMA_CH_CTRL_BLOCKSIZE(v)          ((EFR32_LDMA_CH_CTRL_BLOCKSIZE_##v) << 16)
  #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_SET(x, v)   do { (x) = (((x) & ~0xf0000) | ((EFR32_LDMA_CH_CTRL_BLOCKSIZE_##v) << 16)); } while(0)
  #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_SETVAL(x, v) do { (x) = (((x) & ~0xf0000) | ((v) << 16)); } while(0)
  #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_GET(x)      (((x) >> 16) & 0xf)
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT1       0x00000000
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT2       0x00000001
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT3       0x00000002
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT4       0x00000003
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT6       0x00000004
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT8       0x00000005
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT16      0x00000007
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT32      0x00000009
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT64      0x0000000a
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT128     0x0000000b
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT256     0x0000000c
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT512     0x0000000d
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_UNIT1024    0x0000000e
/**  */
    #define EFR32_LDMA_CH_CTRL_BLOCKSIZE_ALL         0x0000000f
  #define EFR32_LDMA_CH_CTRL_DONEIFSEN             0x00100000
  #define EFR32_LDMA_CH_CTRL_REQMODE               0x00200000
  #define EFR32_LDMA_CH_CTRL_DECLOOPCNT            0x00400000
  #define EFR32_LDMA_CH_CTRL_IGNORESREQ            0x00800000
  #define EFR32_LDMA_CH_CTRL_SRCINC(v)             ((EFR32_LDMA_CH_CTRL_SRCINC_##v) << 24)
  #define EFR32_LDMA_CH_CTRL_SRCINC_SET(x, v)      do { (x) = (((x) & ~0x3000000) | ((EFR32_LDMA_CH_CTRL_SRCINC_##v) << 24)); } while(0)
  #define EFR32_LDMA_CH_CTRL_SRCINC_SETVAL(x, v)   do { (x) = (((x) & ~0x3000000) | ((v) << 24)); } while(0)
  #define EFR32_LDMA_CH_CTRL_SRCINC_GET(x)         (((x) >> 24) & 0x3)
/**  */
    #define EFR32_LDMA_CH_CTRL_SRCINC_ONE            0x00000000
/**  */
    #define EFR32_LDMA_CH_CTRL_SRCINC_TWO            0x00000001
/**  */
    #define EFR32_LDMA_CH_CTRL_SRCINC_FOUR           0x00000002
/**  */
    #define EFR32_LDMA_CH_CTRL_SRCINC_NONE           0x00000003
  #define EFR32_LDMA_CH_CTRL_SIZE(v)               ((EFR32_LDMA_CH_CTRL_SIZE_##v) << 26)
  #define EFR32_LDMA_CH_CTRL_SIZE_SET(x, v)        do { (x) = (((x) & ~0xc000000) | ((EFR32_LDMA_CH_CTRL_SIZE_##v) << 26)); } while(0)
  #define EFR32_LDMA_CH_CTRL_SIZE_SETVAL(x, v)     do { (x) = (((x) & ~0xc000000) | ((v) << 26)); } while(0)
  #define EFR32_LDMA_CH_CTRL_SIZE_GET(x)           (((x) >> 26) & 0x3)
/**  */
    #define EFR32_LDMA_CH_CTRL_SIZE_BYTE             0x00000000
/**  */
    #define EFR32_LDMA_CH_CTRL_SIZE_HALFWORD         0x00000001
/**  */
    #define EFR32_LDMA_CH_CTRL_SIZE_WORD             0x00000002
  #define EFR32_LDMA_CH_CTRL_DSTINC(v)             ((EFR32_LDMA_CH_CTRL_DSTINC_##v) << 28)
  #define EFR32_LDMA_CH_CTRL_DSTINC_SET(x, v)      do { (x) = (((x) & ~0x30000000) | ((EFR32_LDMA_CH_CTRL_DSTINC_##v) << 28)); } while(0)
  #define EFR32_LDMA_CH_CTRL_DSTINC_SETVAL(x, v)   do { (x) = (((x) & ~0x30000000) | ((v) << 28)); } while(0)
  #define EFR32_LDMA_CH_CTRL_DSTINC_GET(x)         (((x) >> 28) & 0x3)
/**  */
    #define EFR32_LDMA_CH_CTRL_DSTINC_ONE            0x00000000
/**  */
    #define EFR32_LDMA_CH_CTRL_DSTINC_TWO            0x00000001
/**  */
    #define EFR32_LDMA_CH_CTRL_DSTINC_FOUR           0x00000002
/**  */
    #define EFR32_LDMA_CH_CTRL_DSTINC_NONE           0x00000003
  #define EFR32_LDMA_CH_CTRL_SRCMODE               0x40000000
  #define EFR32_LDMA_CH_CTRL_DSTMODE               0x80000000

#define EFR32_LDMA_CH_SRC_ADDR(ridx)                 (0x00000090 + (ridx) * 48)
#define EFR32_LDMA_CH_SRC_COUNT                      8
#define EFR32_LDMA_CH_SRC_MASK                       0xffffffff
  #define EFR32_LDMA_CH_SRC_SRCADDR(v)             ((v) << 0)
  #define EFR32_LDMA_CH_SRC_SRCADDR_SET(x, v)      do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFR32_LDMA_CH_SRC_SRCADDR_GET(x)         (((x) >> 0) & 0xffffffff)

#define EFR32_LDMA_CH_DST_ADDR(ridx)                 (0x00000094 + (ridx) * 48)
#define EFR32_LDMA_CH_DST_COUNT                      8
#define EFR32_LDMA_CH_DST_MASK                       0xffffffff
  #define EFR32_LDMA_CH_DST_DSTADDR(v)             ((v) << 0)
  #define EFR32_LDMA_CH_DST_DSTADDR_SET(x, v)      do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define EFR32_LDMA_CH_DST_DSTADDR_GET(x)         (((x) >> 0) & 0xffffffff)

#define EFR32_LDMA_CH_LINK_ADDR(ridx)                (0x00000098 + (ridx) * 48)
#define EFR32_LDMA_CH_LINK_COUNT                     8
#define EFR32_LDMA_CH_LINK_MASK                      0xffffffff
  #define EFR32_LDMA_CH_LINK_LINKMODE              0x00000001
  #define EFR32_LDMA_CH_LINK_LINK                  0x00000002
  #define EFR32_LDMA_CH_LINK_LINKADDR(v)           ((v) << 2)
  #define EFR32_LDMA_CH_LINK_LINKADDR_SET(x, v)    do { (x) = (((x) & ~0xfffffffc) | ((v) << 2)); } while(0)
  #define EFR32_LDMA_CH_LINK_LINKADDR_GET(x)       (((x) >> 2) & 0x3fffffff)

#endif

