/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_shift=1                 \
     cdefs_sfx_field_shift=_IDX
*/

#ifndef _EFR32_SYNTH_BFGEN_DEFS_
#define _EFR32_SYNTH_BFGEN_DEFS_

#define EFR32_SYNTH_STATUS_ADDR                      0x00000000
#define EFR32_SYNTH_STATUS_MASK                      0x057fff37
  #define EFR32_SYNTH_STATUS_INLOCK                0x00000001
  #define EFR32_SYNTH_STATUS_INLOCK_IDX            0
  #define EFR32_SYNTH_STATUS_IFFREQEN              0x00000002
  #define EFR32_SYNTH_STATUS_IFFREQEN_IDX          1
  #define EFR32_SYNTH_STATUS_SYNTHREADY            0x00000004
  #define EFR32_SYNTH_STATUS_SYNTHREADY_IDX        2
  #define EFR32_SYNTH_STATUS_AUXINLOCK             0x00000010
  #define EFR32_SYNTH_STATUS_AUXINLOCK_IDX         4
  #define EFR32_SYNTH_STATUS_AUXRUNNING            0x00000020
  #define EFR32_SYNTH_STATUS_AUXRUNNING_IDX        5
  #define EFR32_SYNTH_STATUS_CAPCALRUNNING         0x00000100
  #define EFR32_SYNTH_STATUS_CAPCALRUNNING_IDX     8
  #define EFR32_SYNTH_STATUS_CAPCALBITRESULT       0x00000200
  #define EFR32_SYNTH_STATUS_CAPCALBITRESULT_IDX   9
  #define EFR32_SYNTH_STATUS_CAPCALFULLWAIT        0x00000400
  #define EFR32_SYNTH_STATUS_CAPCALFULLWAIT_IDX    10
  #define EFR32_SYNTH_STATUS_AUXCAPCALRUNNING      0x00000800
  #define EFR32_SYNTH_STATUS_AUXCAPCALRUNNING_IDX  11
  #define EFR32_SYNTH_STATUS_AUXCALBITRESULT       0x00001000
  #define EFR32_SYNTH_STATUS_AUXCALBITRESULT_IDX   12
  #define EFR32_SYNTH_STATUS_AUXCALFULLWAIT        0x00002000
  #define EFR32_SYNTH_STATUS_AUXCALFULLWAIT_IDX    13
  #define EFR32_SYNTH_STATUS_CAPCALERROR           0x00004000
  #define EFR32_SYNTH_STATUS_CAPCALERROR_IDX       14
  #define EFR32_SYNTH_STATUS_AUXCALERROR           0x00008000
  #define EFR32_SYNTH_STATUS_AUXCALERROR_IDX       15
  #define EFR32_SYNTH_STATUS_VCOFREQACTIVE         0x00010000
  #define EFR32_SYNTH_STATUS_VCOFREQACTIVE_IDX     16
  #define EFR32_SYNTH_STATUS_VCOVARBANK_IDX        17
  #define EFR32_SYNTH_STATUS_VCOVARBANK(v)         ((v) << 17)
  #define EFR32_SYNTH_STATUS_VCOVARBANK_SET(x, v)  do { (x) = (((x) & ~0x7e0000) | ((v) << 17)); } while(0)
  #define EFR32_SYNTH_STATUS_VCOVARBANK_GET(x)     (((x) >> 17) & 0x3f)
  #define EFR32_SYNTH_STATUS_VCOAMPOK              0x01000000
  #define EFR32_SYNTH_STATUS_VCOAMPOK_IDX          24
  #define EFR32_SYNTH_STATUS_CHPALLOWTRISTATE      0x04000000
  #define EFR32_SYNTH_STATUS_CHPALLOWTRISTATE_IDX  26

#define EFR32_SYNTH_CMD_ADDR                         0x00000004
#define EFR32_SYNTH_CMD_MASK                         0x000007df
  #define EFR32_SYNTH_CMD_SYNTHSTART               0x00000001
  #define EFR32_SYNTH_CMD_SYNTHSTART_IDX           0
  #define EFR32_SYNTH_CMD_SYNTHSTOP                0x00000002
  #define EFR32_SYNTH_CMD_SYNTHSTOP_IDX            1
  #define EFR32_SYNTH_CMD_ENABLEIF                 0x00000004
  #define EFR32_SYNTH_CMD_ENABLEIF_IDX             2
  #define EFR32_SYNTH_CMD_DISABLEIF                0x00000008
  #define EFR32_SYNTH_CMD_DISABLEIF_IDX            3
  #define EFR32_SYNTH_CMD_CAPCALSTART              0x00000010
  #define EFR32_SYNTH_CMD_CAPCALSTART_IDX          4
  #define EFR32_SYNTH_CMD_AUXSTART                 0x00000040
  #define EFR32_SYNTH_CMD_AUXSTART_IDX             6
  #define EFR32_SYNTH_CMD_AUXSTOP                  0x00000080
  #define EFR32_SYNTH_CMD_AUXSTOP_IDX              7
  #define EFR32_SYNTH_CMD_AUXCAPCALSTART           0x00000100
  #define EFR32_SYNTH_CMD_AUXCAPCALSTART_IDX       8
  #define EFR32_SYNTH_CMD_VCOUP                    0x00000200
  #define EFR32_SYNTH_CMD_VCOUP_IDX                9
  #define EFR32_SYNTH_CMD_VCODOWN                  0x00000400
  #define EFR32_SYNTH_CMD_VCODOWN_IDX              10

#define EFR32_SYNTH_CTRL_ADDR                        0x00000008
#define EFR32_SYNTH_CTRL_MASK                        0xe177ffff
  #define EFR32_SYNTH_CTRL_DITHERDSMINPUT          0x00000001
  #define EFR32_SYNTH_CTRL_DITHERDSMINPUT_IDX      0
  #define EFR32_SYNTH_CTRL_DITHERDSMOUTPUT_IDX     1
  #define EFR32_SYNTH_CTRL_DITHERDSMOUTPUT(v)      ((v) << 1)
  #define EFR32_SYNTH_CTRL_DITHERDSMOUTPUT_SET(x, v) do { (x) = (((x) & ~0xe) | ((v) << 1)); } while(0)
  #define EFR32_SYNTH_CTRL_DITHERDSMOUTPUT_GET(x)  (((x) >> 1) & 0x7)
  #define EFR32_SYNTH_CTRL_DITHERDAC_IDX           4
  #define EFR32_SYNTH_CTRL_DITHERDAC(v)            ((v) << 4)
  #define EFR32_SYNTH_CTRL_DITHERDAC_SET(x, v)     do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define EFR32_SYNTH_CTRL_DITHERDAC_GET(x)        (((x) >> 4) & 0xf)
  #define EFR32_SYNTH_CTRL_DSMMODE                 0x00000100
  #define EFR32_SYNTH_CTRL_DSMMODE_IDX             8
  #define EFR32_SYNTH_CTRL_LSBFORCE                0x00000200
  #define EFR32_SYNTH_CTRL_LSBFORCE_IDX            9
  #define EFR32_SYNTH_CTRL_LOCKTHRESHOLD_IDX       10
  #define EFR32_SYNTH_CTRL_LOCKTHRESHOLD(v)        ((v) << 10)
  #define EFR32_SYNTH_CTRL_LOCKTHRESHOLD_SET(x, v) do { (x) = (((x) & ~0x1c00) | ((v) << 10)); } while(0)
  #define EFR32_SYNTH_CTRL_LOCKTHRESHOLD_GET(x)    (((x) >> 10) & 0x7)
  #define EFR32_SYNTH_CTRL_AUXLOCKTHRESHOLD_IDX    13
  #define EFR32_SYNTH_CTRL_AUXLOCKTHRESHOLD(v)     ((v) << 13)
  #define EFR32_SYNTH_CTRL_AUXLOCKTHRESHOLD_SET(x, v) do { (x) = (((x) & ~0xe000) | ((v) << 13)); } while(0)
  #define EFR32_SYNTH_CTRL_AUXLOCKTHRESHOLD_GET(x) (((x) >> 13) & 0x7)
  #define EFR32_SYNTH_CTRL_PRSMUX0_IDX             16
  #define EFR32_SYNTH_CTRL_PRSMUX0(v)              ((EFR32_SYNTH_CTRL_PRSMUX0_##v) << 16)
  #define EFR32_SYNTH_CTRL_PRSMUX0_SET(x, v)       do { (x) = (((x) & ~0x70000) | ((EFR32_SYNTH_CTRL_PRSMUX0_##v) << 16)); } while(0)
  #define EFR32_SYNTH_CTRL_PRSMUX0_GET(x)          (((x) >> 16) & 0x7)
/**  */
    #define EFR32_SYNTH_CTRL_PRSMUX0_DISABLED        0x00000000
/**  */
    #define EFR32_SYNTH_CTRL_PRSMUX0_INLOCK          0x00000001
  #define EFR32_SYNTH_CTRL_PRSMUX1_IDX             20
  #define EFR32_SYNTH_CTRL_PRSMUX1(v)              ((EFR32_SYNTH_CTRL_PRSMUX1_##v) << 20)
  #define EFR32_SYNTH_CTRL_PRSMUX1_SET(x, v)       do { (x) = (((x) & ~0x700000) | ((EFR32_SYNTH_CTRL_PRSMUX1_##v) << 20)); } while(0)
  #define EFR32_SYNTH_CTRL_PRSMUX1_GET(x)          (((x) >> 20) & 0x7)
/**  */
    #define EFR32_SYNTH_CTRL_PRSMUX1_DISABLED        0x00000000
/**  */
    #define EFR32_SYNTH_CTRL_PRSMUX1_AUXINLOCK       0x00000001
  #define EFR32_SYNTH_CTRL_DEMMODE                 0x01000000
  #define EFR32_SYNTH_CTRL_DEMMODE_IDX             24
  #define EFR32_SYNTH_CTRL_TRISTATEPOSTPONE        0x20000000
  #define EFR32_SYNTH_CTRL_TRISTATEPOSTPONE_IDX    29
  #define EFR32_SYNTH_CTRL_INTEGERMODE             0x40000000
  #define EFR32_SYNTH_CTRL_INTEGERMODE_IDX         30
  #define EFR32_SYNTH_CTRL_MMDSCANTESTEN           0x80000000
  #define EFR32_SYNTH_CTRL_MMDSCANTESTEN_IDX       31

#define EFR32_SYNTH_CALCTRL_ADDR                     0x0000000c
#define EFR32_SYNTH_CALCTRL_MASK                     0x3f7f7fff
  #define EFR32_SYNTH_CALCTRL_NUMCYCLES_IDX        0
  #define EFR32_SYNTH_CALCTRL_NUMCYCLES(v)         ((v) << 0)
  #define EFR32_SYNTH_CALCTRL_NUMCYCLES_SET(x, v)  do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_CALCTRL_NUMCYCLES_GET(x)     (((x) >> 0) & 0xf)
  #define EFR32_SYNTH_CALCTRL_CAPCALSIDE           0x00000010
  #define EFR32_SYNTH_CALCTRL_CAPCALSIDE_IDX       4
  #define EFR32_SYNTH_CALCTRL_CAPCALENDMODE        0x00000020
  #define EFR32_SYNTH_CALCTRL_CAPCALENDMODE_IDX    5
  #define EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT_IDX  6
  #define EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT(v)   ((EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT_##v) << 6)
  #define EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT_SET(x, v) do { (x) = (((x) & ~0xc0) | ((EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT_##v) << 6)); } while(0)
  #define EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT_GET(x) (((x) >> 6) & 0x3)
/**  */
    #define EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT_CYCLES1 0x00000000
/**  */
    #define EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT_CYCLES8 0x00000001
/**  */
    #define EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT_CYCLES16 0x00000002
/**  */
    #define EFR32_SYNTH_CALCTRL_CAPCALCYCLEWAIT_CYCLES32 0x00000003
  #define EFR32_SYNTH_CALCTRL_CAPCALWAITMODE       0x00000100
  #define EFR32_SYNTH_CALCTRL_CAPCALWAITMODE_IDX   8
  #define EFR32_SYNTH_CALCTRL_CAPCALSINGLESTEP     0x00000200
  #define EFR32_SYNTH_CALCTRL_CAPCALSINGLESTEP_IDX 9
  #define EFR32_SYNTH_CALCTRL_STARTUPTIMING_IDX    10
  #define EFR32_SYNTH_CALCTRL_STARTUPTIMING(v)     ((v) << 10)
  #define EFR32_SYNTH_CALCTRL_STARTUPTIMING_SET(x, v) do { (x) = (((x) & ~0x7c00) | ((v) << 10)); } while(0)
  #define EFR32_SYNTH_CALCTRL_STARTUPTIMING_GET(x) (((x) >> 10) & 0x1f)
  #define EFR32_SYNTH_CALCTRL_AUXCALCYCLES_IDX     16
  #define EFR32_SYNTH_CALCTRL_AUXCALCYCLES(v)      ((v) << 16)
  #define EFR32_SYNTH_CALCTRL_AUXCALCYCLES_SET(x, v) do { (x) = (((x) & ~0x70000) | ((v) << 16)); } while(0)
  #define EFR32_SYNTH_CALCTRL_AUXCALCYCLES_GET(x)  (((x) >> 16) & 0x7)
  #define EFR32_SYNTH_CALCTRL_AUXCALACCURACY       0x00080000
  #define EFR32_SYNTH_CALCTRL_AUXCALACCURACY_IDX   19
  #define EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT_IDX  20
  #define EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT(v)   ((EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT_##v) << 20)
  #define EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT_SET(x, v) do { (x) = (((x) & ~0x300000) | ((EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT_##v) << 20)); } while(0)
  #define EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT_GET(x) (((x) >> 20) & 0x3)
/**  */
    #define EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT_CYCLES64 0x00000000
/**  */
    #define EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT_CYCLES128 0x00000001
/**  */
    #define EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT_CYCLES192 0x00000002
/**  */
    #define EFR32_SYNTH_CALCTRL_AUXCALCYCLEWAIT_CYCLES256 0x00000003
  #define EFR32_SYNTH_CALCTRL_AUXCALSINGLESTEP     0x00400000
  #define EFR32_SYNTH_CALCTRL_AUXCALSINGLESTEP_IDX 22
  #define EFR32_SYNTH_CALCTRL_SYNTHOVERRIDEEN      0x01000000
  #define EFR32_SYNTH_CALCTRL_SYNTHOVERRIDEEN_IDX  24
  #define EFR32_SYNTH_CALCTRL_CLKLOADDENOMVAL      0x02000000
  #define EFR32_SYNTH_CALCTRL_CLKLOADDENOMVAL_IDX  25
  #define EFR32_SYNTH_CALCTRL_PRESCALERRESETVAL    0x04000000
  #define EFR32_SYNTH_CALCTRL_PRESCALERRESETVAL_IDX 26
  #define EFR32_SYNTH_CALCTRL_COUNTERRESETVAL      0x08000000
  #define EFR32_SYNTH_CALCTRL_COUNTERRESETVAL_IDX  27
  #define EFR32_SYNTH_CALCTRL_AUXPLLOVERRIDEEN     0x10000000
  #define EFR32_SYNTH_CALCTRL_AUXPLLOVERRIDEEN_IDX 28
  #define EFR32_SYNTH_CALCTRL_AUXPLLMMDRESETVAL    0x20000000
  #define EFR32_SYNTH_CALCTRL_AUXPLLMMDRESETVAL_IDX 29

#define EFR32_SYNTH_VCDACCTRL_ADDR                   0x00000024
#define EFR32_SYNTH_VCDACCTRL_MASK                   0x0000007f
  #define EFR32_SYNTH_VCDACCTRL_VCDACVAL_IDX       0
  #define EFR32_SYNTH_VCDACCTRL_VCDACVAL(v)        ((v) << 0)
  #define EFR32_SYNTH_VCDACCTRL_VCDACVAL_SET(x, v) do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_VCDACCTRL_VCDACVAL_GET(x)    (((x) >> 0) & 0x3f)
  #define EFR32_SYNTH_VCDACCTRL_EN                 0x00000040
  #define EFR32_SYNTH_VCDACCTRL_EN_IDX             6

#define EFR32_SYNTH_FREQ_ADDR                        0x0000002c
#define EFR32_SYNTH_FREQ_MASK                        0x0fffffff
/** The register value is equal to ((desired_freq * lodiv) << 19)/HFXO_FREQ
   @multiple */
  #define EFR32_SYNTH_FREQ_FREQ_IDX                0
  #define EFR32_SYNTH_FREQ_FREQ(v)                 ((v) << 0)
  #define EFR32_SYNTH_FREQ_FREQ_SET(x, v)          do { (x) = (((x) & ~0xfffffff) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_FREQ_FREQ_GET(x)             (((x) >> 0) & 0xfffffff)

#define EFR32_SYNTH_IFFREQ_ADDR                      0x00000030
#define EFR32_SYNTH_IFFREQ_MASK                      0x001fffff
  #define EFR32_SYNTH_IFFREQ_IFFREQ_IDX            0
  #define EFR32_SYNTH_IFFREQ_IFFREQ(v)             ((v) << 0)
  #define EFR32_SYNTH_IFFREQ_IFFREQ_SET(x, v)      do { (x) = (((x) & ~0xfffff) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_IFFREQ_IFFREQ_GET(x)         (((x) >> 0) & 0xfffff)
  #define EFR32_SYNTH_IFFREQ_LOSIDE                0x00100000
  #define EFR32_SYNTH_IFFREQ_LOSIDE_IDX            20

#define EFR32_SYNTH_DIVCTRL_ADDR                     0x00000034
#define EFR32_SYNTH_DIVCTRL_MASK                     0x003f01ff
  #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_IDX    0
  #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL(v)     ((EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_##v) << 0)
  #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_SET(x, v) do { (x) = (((x) & ~0x1ff) | ((EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_##v) << 0)); } while(0)
  #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_GET(x) (((x) >> 0) & 0x1ff)
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV1 0x00000001
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV2 0x00000002
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV3 0x00000003
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV4 0x00000004
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV5 0x00000005
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV7 0x00000007
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV6 0x00000013
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV8 0x00000014
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV10 0x00000015
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV14 0x00000017
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV9 0x0000001b
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV12 0x0000001c
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV15 0x0000001d
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV16 0x00000024
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV20 0x00000025
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV18 0x0000009b
/**  */
    #define EFR32_SYNTH_DIVCTRL_LODIVFREQCTRL_LODIV24 0x0000009c
  #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_IDX 16
  #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL(v)  ((EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_##v) << 16)
  #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_SET(x, v) do { (x) = (((x) & ~0x3f0000) | ((EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_##v) << 16)); } while(0)
  #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_GET(x) (((x) >> 16) & 0x3f)
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV1 0x00000000
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV2 0x00000001
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV3 0x00000002
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV4 0x00000003
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV6 0x00000006
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV8 0x00000007
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV9 0x0000000a
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV12 0x0000000e
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV16 0x0000000f
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV18 0x0000001a
/**  */
    #define EFR32_SYNTH_DIVCTRL_AUXLODIVFREQCTRL_LODIV24 0x0000001b

#define EFR32_SYNTH_CHCTRL_ADDR                      0x00000038
#define EFR32_SYNTH_CHCTRL_MASK                      0x0000003f
/** This specifies the channel number in use @multiple */
  #define EFR32_SYNTH_CHCTRL_CHNO_IDX              0
  #define EFR32_SYNTH_CHCTRL_CHNO(v)               ((v) << 0)
  #define EFR32_SYNTH_CHCTRL_CHNO_SET(x, v)        do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_CHCTRL_CHNO_GET(x)           (((x) >> 0) & 0x3f)

#define EFR32_SYNTH_CHSP_ADDR                        0x0000003c
#define EFR32_SYNTH_CHSP_MASK                        0x0003ffff
/** Channel spacing configuration register The register must be set to
   ((channel_spacing_in_hz * 2^19) * divctrl)/HFXO_FREQ @multiple */
  #define EFR32_SYNTH_CHSP_CHSP_IDX                0
  #define EFR32_SYNTH_CHSP_CHSP(v)                 ((v) << 0)
  #define EFR32_SYNTH_CHSP_CHSP_SET(x, v)          do { (x) = (((x) & ~0x3ffff) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_CHSP_CHSP_GET(x)             (((x) >> 0) & 0x3ffff)

#define EFR32_SYNTH_CALOFFSET_ADDR                   0x00000040
#define EFR32_SYNTH_CALOFFSET_MASK                   0x00007fff
  #define EFR32_SYNTH_CALOFFSET_CALOFFSET_IDX      0
  #define EFR32_SYNTH_CALOFFSET_CALOFFSET(v)       ((v) << 0)
  #define EFR32_SYNTH_CALOFFSET_CALOFFSET_SET(x, v) do { (x) = (((x) & ~0x7fff) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_CALOFFSET_CALOFFSET_GET(x)   (((x) >> 0) & 0x7fff)

#define EFR32_SYNTH_VCOTUNING_ADDR                   0x00000044
#define EFR32_SYNTH_VCOTUNING_MASK                   0x000000ff
  #define EFR32_SYNTH_VCOTUNING_VCOTUNING_IDX      0
  #define EFR32_SYNTH_VCOTUNING_VCOTUNING(v)       ((v) << 0)
  #define EFR32_SYNTH_VCOTUNING_VCOTUNING_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_VCOTUNING_VCOTUNING_GET(x)   (((x) >> 0) & 0xff)

#define EFR32_SYNTH_VCORANGE_ADDR                    0x0000004c
#define EFR32_SYNTH_VCORANGE_MASK                    0x000001ff
  #define EFR32_SYNTH_VCORANGE_MODE_IDX            0
  #define EFR32_SYNTH_VCORANGE_MODE(v)             ((EFR32_SYNTH_VCORANGE_MODE_##v) << 0)
  #define EFR32_SYNTH_VCORANGE_MODE_SET(x, v)      do { (x) = (((x) & ~0x3) | ((EFR32_SYNTH_VCORANGE_MODE_##v) << 0)); } while(0)
  #define EFR32_SYNTH_VCORANGE_MODE_GET(x)         (((x) >> 0) & 0x3)
/**  */
    #define EFR32_SYNTH_VCORANGE_MODE_AUTO           0x00000000
/**  */
    #define EFR32_SYNTH_VCORANGE_MODE_SEMIAUTO       0x00000001
/**  */
    #define EFR32_SYNTH_VCORANGE_MODE_MANUAL         0x00000002
/**  */
    #define EFR32_SYNTH_VCORANGE_MODE_DISABLE        0x00000003
  #define EFR32_SYNTH_VCORANGE_SWITCHMODE          0x00000004
  #define EFR32_SYNTH_VCORANGE_SWITCHMODE_IDX      2
  #define EFR32_SYNTH_VCORANGE_HIGHTHRESH_IDX      3
  #define EFR32_SYNTH_VCORANGE_HIGHTHRESH(v)       ((v) << 3)
  #define EFR32_SYNTH_VCORANGE_HIGHTHRESH_SET(x, v) do { (x) = (((x) & ~0x38) | ((v) << 3)); } while(0)
  #define EFR32_SYNTH_VCORANGE_HIGHTHRESH_GET(x)   (((x) >> 3) & 0x7)
  #define EFR32_SYNTH_VCORANGE_LOWTHRESH_IDX       6
  #define EFR32_SYNTH_VCORANGE_LOWTHRESH(v)        ((v) << 6)
  #define EFR32_SYNTH_VCORANGE_LOWTHRESH_SET(x, v) do { (x) = (((x) & ~0x1c0) | ((v) << 6)); } while(0)
  #define EFR32_SYNTH_VCORANGE_LOWTHRESH_GET(x)    (((x) >> 6) & 0x7)

#define EFR32_SYNTH_VCOGAIN_ADDR                     0x00000050
#define EFR32_SYNTH_VCOGAIN_MASK                     0x0000003f
  #define EFR32_SYNTH_VCOGAIN_VCOGAIN_IDX          0
  #define EFR32_SYNTH_VCOGAIN_VCOGAIN(v)           ((v) << 0)
  #define EFR32_SYNTH_VCOGAIN_VCOGAIN_SET(x, v)    do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_VCOGAIN_VCOGAIN_GET(x)       (((x) >> 0) & 0x3f)

#define EFR32_SYNTH_AUXVCOTUNING_ADDR                0x00000054
#define EFR32_SYNTH_AUXVCOTUNING_MASK                0x0000007f
  #define EFR32_SYNTH_AUXVCOTUNING_AUXVCOTUNING_IDX 0
  #define EFR32_SYNTH_AUXVCOTUNING_AUXVCOTUNING(v) ((v) << 0)
  #define EFR32_SYNTH_AUXVCOTUNING_AUXVCOTUNING_SET(x, v) do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_AUXVCOTUNING_AUXVCOTUNING_GET(x) (((x) >> 0) & 0x7f)

#define EFR32_SYNTH_AUXFREQ_ADDR                     0x00000058
#define EFR32_SYNTH_AUXFREQ_MASK                     0x0000007f
  #define EFR32_SYNTH_AUXFREQ_MMDDENOM_IDX         0
  #define EFR32_SYNTH_AUXFREQ_MMDDENOM(v)          ((v) << 0)
  #define EFR32_SYNTH_AUXFREQ_MMDDENOM_SET(x, v)   do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_AUXFREQ_MMDDENOM_GET(x)      (((x) >> 0) & 0x7f)

#define EFR32_SYNTH_AUXVCDACCTRL_ADDR                0x0000005c
#define EFR32_SYNTH_AUXVCDACCTRL_MASK                0x0000001f
  #define EFR32_SYNTH_AUXVCDACCTRL_VALUE_IDX       0
  #define EFR32_SYNTH_AUXVCDACCTRL_VALUE(v)        ((v) << 0)
  #define EFR32_SYNTH_AUXVCDACCTRL_VALUE_SET(x, v) do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_AUXVCDACCTRL_VALUE_GET(x)    (((x) >> 0) & 0xf)
  #define EFR32_SYNTH_AUXVCDACCTRL_EN              0x00000010
  #define EFR32_SYNTH_AUXVCDACCTRL_EN_IDX          4

#define EFR32_SYNTH_CHPDACCTRL_ADDR                  0x00000060
#define EFR32_SYNTH_CHPDACCTRL_MASK                  0x000001ff
  #define EFR32_SYNTH_CHPDACCTRL_CHPDACVAL_IDX     0
  #define EFR32_SYNTH_CHPDACCTRL_CHPDACVAL(v)      ((v) << 0)
  #define EFR32_SYNTH_CHPDACCTRL_CHPDACVAL_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_CHPDACCTRL_CHPDACVAL_GET(x)  (((x) >> 0) & 0xff)
  #define EFR32_SYNTH_CHPDACCTRL_OVERRIDE          0x00000100
  #define EFR32_SYNTH_CHPDACCTRL_OVERRIDE_IDX      8

#define EFR32_SYNTH_CAPCALCYCLECNT_ADDR              0x00000064
#define EFR32_SYNTH_CAPCALCYCLECNT_MASK              0x000003ff
  #define EFR32_SYNTH_CAPCALCYCLECNT_CAPCALCYCLECNT_IDX 0
  #define EFR32_SYNTH_CAPCALCYCLECNT_CAPCALCYCLECNT(v) ((v) << 0)
  #define EFR32_SYNTH_CAPCALCYCLECNT_CAPCALCYCLECNT_SET(x, v) do { (x) = (((x) & ~0x3ff) | ((v) << 0)); } while(0)
  #define EFR32_SYNTH_CAPCALCYCLECNT_CAPCALCYCLECNT_GET(x) (((x) >> 0) & 0x3ff)

#define EFR32_SYNTH_IF_ADDR                          0x00000070
#define EFR32_SYNTH_IF_MASK                          0x000001f7
  #define EFR32_SYNTH_IF_LOCKED                    0x00000001
  #define EFR32_SYNTH_IF_LOCKED_IDX                0
  #define EFR32_SYNTH_IF_UNLOCKED                  0x00000002
  #define EFR32_SYNTH_IF_UNLOCKED_IDX              1
  #define EFR32_SYNTH_IF_CAPCALDONE                0x00000004
  #define EFR32_SYNTH_IF_CAPCALDONE_IDX            2
  #define EFR32_SYNTH_IF_VCOHIGH                   0x00000010
  #define EFR32_SYNTH_IF_VCOHIGH_IDX               4
  #define EFR32_SYNTH_IF_VCOLOW                    0x00000020
  #define EFR32_SYNTH_IF_VCOLOW_IDX                5
  #define EFR32_SYNTH_IF_AUXCAPCALDONE             0x00000040
  #define EFR32_SYNTH_IF_AUXCAPCALDONE_IDX         6
  #define EFR32_SYNTH_IF_AUXLOCKED                 0x00000080
  #define EFR32_SYNTH_IF_AUXLOCKED_IDX             7
  #define EFR32_SYNTH_IF_AUXUNLOCKED               0x00000100
  #define EFR32_SYNTH_IF_AUXUNLOCKED_IDX           8

/** See IF register fields @multiple */
#define EFR32_SYNTH_IFS_ADDR                         0x00000074
#define EFR32_SYNTH_IFS_MASK                         0x00000000

/** See IF register fields @multiple */
#define EFR32_SYNTH_IFC_ADDR                         0x00000078
#define EFR32_SYNTH_IFC_MASK                         0x00000000

/** See IF register fields @multiple */
#define EFR32_SYNTH_IEN_ADDR                         0x0000007c
#define EFR32_SYNTH_IEN_MASK                         0x00000000

#endif

