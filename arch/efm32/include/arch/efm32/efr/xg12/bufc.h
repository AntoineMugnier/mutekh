/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_shift=1                 \
     cdefs_sfx_field_shift=_IDX
*/

#ifndef _EFR32_BUFC_BFGEN_DEFS_
#define _EFR32_BUFC_BFGEN_DEFS_

#define EFR32_BUFC_CTRL_ADDR(ridx)                   (0x00000000 + (ridx) * 48)
#define EFR32_BUFC_CTRL_COUNT                        4
#define EFR32_BUFC_CTRL_MASK                         0x00000007
/** Size of buffer for TX/RX packet @multiple */
  #define EFR32_BUFC_CTRL_SIZE_IDX                 0
  #define EFR32_BUFC_CTRL_SIZE(v)                  ((EFR32_BUFC_CTRL_SIZE_##v) << 0)
  #define EFR32_BUFC_CTRL_SIZE_SET(x, v)           do { (x) = (((x) & ~0x7) | ((EFR32_BUFC_CTRL_SIZE_##v) << 0)); } while(0)
  #define EFR32_BUFC_CTRL_SIZE_GET(x)              (((x) >> 0) & 0x7)
/**  */
    #define EFR32_BUFC_CTRL_SIZE_SIZE64              0x00000000
/**  */
    #define EFR32_BUFC_CTRL_SIZE_SIZE128             0x00000001
/**  */
    #define EFR32_BUFC_CTRL_SIZE_SIZE256             0x00000002
/**  */
    #define EFR32_BUFC_CTRL_SIZE_SIZE512             0x00000003
/**  */
    #define EFR32_BUFC_CTRL_SIZE_SIZE1024            0x00000004
/**  */
    #define EFR32_BUFC_CTRL_SIZE_SIZE2048            0x00000005
/**  */
    #define EFR32_BUFC_CTRL_SIZE_SIZE4096            0x00000006

/** Write this register to specify the address of an allocated buffer of size
   specified in ctrl register. Buffer must be in RAM. @multiple */
#define EFR32_BUFC_ADDR_ADDR(ridx)                   (0x00000004 + (ridx) * 48)
#define EFR32_BUFC_ADDR_COUNT                        4
#define EFR32_BUFC_ADDR_MASK                         0x00ffffff
  #define EFR32_BUFC_ADDR_VAL_IDX                  0
  #define EFR32_BUFC_ADDR_VAL(v)                   ((v) << 0)
  #define EFR32_BUFC_ADDR_VAL_SET(x, v)            do { (x) = (((x) & ~0xffffff) | ((v) << 0)); } while(0)
  #define EFR32_BUFC_ADDR_VAL_GET(x)               (((x) >> 0) & 0xffffff)

/** This is the index in corresponding fifo at which data will be written.
   @multiple */
#define EFR32_BUFC_WRITEOFFSET_ADDR(ridx)            (0x00000008 + (ridx) * 48)
#define EFR32_BUFC_WRITEOFFSET_COUNT                 4
#define EFR32_BUFC_WRITEOFFSET_MASK                  0x00001fff
  #define EFR32_BUFC_WRITEOFFSET_WRITEOFFSET_IDX   0
  #define EFR32_BUFC_WRITEOFFSET_WRITEOFFSET(v)    ((v) << 0)
  #define EFR32_BUFC_WRITEOFFSET_WRITEOFFSET_SET(x, v) do { (x) = (((x) & ~0x1fff) | ((v) << 0)); } while(0)
  #define EFR32_BUFC_WRITEOFFSET_WRITEOFFSET_GET(x) (((x) >> 0) & 0x1fff)

/** This is the index in corresponding fifo at which data will be read. @multiple
   */
#define EFR32_BUFC_READOFFSET_ADDR(ridx)             (0x0000000c + (ridx) * 48)
#define EFR32_BUFC_READOFFSET_COUNT                  4
#define EFR32_BUFC_READOFFSET_MASK                   0x00001fff
  #define EFR32_BUFC_READOFFSET_READOFFSET_IDX     0
  #define EFR32_BUFC_READOFFSET_READOFFSET(v)      ((v) << 0)
  #define EFR32_BUFC_READOFFSET_READOFFSET_SET(x, v) do { (x) = (((x) & ~0x1fff) | ((v) << 0)); } while(0)
  #define EFR32_BUFC_READOFFSET_READOFFSET_GET(x)  (((x) >> 0) & 0x1fff)

#define EFR32_BUFC_WRITESTART_ADDR(ridx)             (0x00000010 + (ridx) * 48)
#define EFR32_BUFC_WRITESTART_COUNT                  4
#define EFR32_BUFC_WRITESTART_MASK                   0x00001fff
  #define EFR32_BUFC_WRITESTART_WRITESTART_IDX     0
  #define EFR32_BUFC_WRITESTART_WRITESTART(v)      ((v) << 0)
  #define EFR32_BUFC_WRITESTART_WRITESTART_SET(x, v) do { (x) = (((x) & ~0x1fff) | ((v) << 0)); } while(0)
  #define EFR32_BUFC_WRITESTART_WRITESTART_GET(x)  (((x) >> 0) & 0x1fff)

/** Read this register will read the byte at the corresponding readoffset in the
   fifo. @multiple */
#define EFR32_BUFC_READDATA_ADDR(ridx)               (0x00000014 + (ridx) * 48)
#define EFR32_BUFC_READDATA_COUNT                    4
#define EFR32_BUFC_READDATA_MASK                     0x000000ff
  #define EFR32_BUFC_READDATA_READDATA_IDX         0
  #define EFR32_BUFC_READDATA_READDATA(v)          ((v) << 0)
  #define EFR32_BUFC_READDATA_READDATA_SET(x, v)   do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_BUFC_READDATA_READDATA_GET(x)      (((x) >> 0) & 0xff)

/** Write this register will write one byte to the corresponding writeoffset in
   the fifo. @multiple */
#define EFR32_BUFC_WRITEDATA_ADDR(ridx)              (0x00000018 + (ridx) * 48)
#define EFR32_BUFC_WRITEDATA_COUNT                   4
#define EFR32_BUFC_WRITEDATA_MASK                    0x000000ff
  #define EFR32_BUFC_WRITEDATA_WRITEDATA_IDX       0
  #define EFR32_BUFC_WRITEDATA_WRITEDATA(v)        ((v) << 0)
  #define EFR32_BUFC_WRITEDATA_WRITEDATA_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_BUFC_WRITEDATA_WRITEDATA_GET(x)    (((x) >> 0) & 0xff)

#define EFR32_BUFC_XWRITE_ADDR(ridx)                 (0x0000001c + (ridx) * 48)
#define EFR32_BUFC_XWRITE_COUNT                      4
#define EFR32_BUFC_XWRITE_MASK                       0x000000ff
  #define EFR32_BUFC_XWRITE_XORWRITEDATA_IDX       0
  #define EFR32_BUFC_XWRITE_XORWRITEDATA(v)        ((v) << 0)
  #define EFR32_BUFC_XWRITE_XORWRITEDATA_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define EFR32_BUFC_XWRITE_XORWRITEDATA_GET(x)    (((x) >> 0) & 0xff)

#define EFR32_BUFC_STATUS_ADDR(ridx)                 (0x00000020 + (ridx) * 48)
#define EFR32_BUFC_STATUS_COUNT                      4
#define EFR32_BUFC_STATUS_MASK                       0x00011fff
/** Number of bytes in buffer. After a RXdone interrupt, this indicates the
   number of bytes received from the last packet @multiple */
  #define EFR32_BUFC_STATUS_BYTES_IDX              0
  #define EFR32_BUFC_STATUS_BYTES(v)               ((v) << 0)
  #define EFR32_BUFC_STATUS_BYTES_SET(x, v)        do { (x) = (((x) & ~0x1fff) | ((v) << 0)); } while(0)
  #define EFR32_BUFC_STATUS_BYTES_GET(x)           (((x) >> 0) & 0x1fff)
  #define EFR32_BUFC_STATUS_RDATARDY               0x00010000
  #define EFR32_BUFC_STATUS_RDATARDY_IDX           16

#define EFR32_BUFC_THRESHOLDCTRL_ADDR(ridx)          (0x00000024 + (ridx) * 48)
#define EFR32_BUFC_THRESHOLDCTRL_COUNT               4
#define EFR32_BUFC_THRESHOLDCTRL_MASK                0x00002fff
  #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLD_IDX   0
  #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLD(v)    ((v) << 0)
  #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLD_SET(x, v) do { (x) = (((x) & ~0xfff) | ((v) << 0)); } while(0)
  #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLD_GET(x) (((x) >> 0) & 0xfff)
/** In RX, threshold signal is raised when fifo level becomes greater than
   threshold value. In Tx, threshold signal is raised when fifo level becomes
   less than threshold value. @multiple */
  #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLDMODE_IDX 13
  #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLDMODE(v) ((EFR32_BUFC_THRESHOLDCTRL_THRESHOLDMODE_##v) << 13)
  #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLDMODE_SET(x, v) do { (x) = (((x) & ~0x2000) | ((EFR32_BUFC_THRESHOLDCTRL_THRESHOLDMODE_##v) << 13)); } while(0)
  #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLDMODE_GET(x) (((x) >> 13) & 0x1)
    #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLDMODE_GREATER 0x00000000
    #define EFR32_BUFC_THRESHOLDCTRL_THRESHOLDMODE_LESS 0x00000001

#define EFR32_BUFC_CMD_ADDR(ridx)                    (0x00000028 + (ridx) * 48)
#define EFR32_BUFC_CMD_COUNT                         4
#define EFR32_BUFC_CMD_MASK                          0x0000000f
  #define EFR32_BUFC_CMD_CLEAR                     0x00000001
  #define EFR32_BUFC_CMD_CLEAR_IDX                 0
  #define EFR32_BUFC_CMD_PREFETCH                  0x00000002
  #define EFR32_BUFC_CMD_PREFETCH_IDX              1
  #define EFR32_BUFC_CMD_UPDATEWRITESTART          0x00000004
  #define EFR32_BUFC_CMD_UPDATEWRITESTART_IDX      2
  #define EFR32_BUFC_CMD_RESTOREWRITEOFFSET        0x00000008
  #define EFR32_BUFC_CMD_RESTOREWRITEOFFSET_IDX    3

#define EFR32_BUFC_IF_ADDR                           0x000000e0
#define EFR32_BUFC_IF_MASK                           0x8f0f0f0f
  #define EFR32_BUFC_IF_OF_COUNT                   4
  #define EFR32_BUFC_IF_OF(fidx)                   (0x00000001 << ((fidx) * 8))
  #define EFR32_BUFC_IF_OF_IDX(fidx)               ((fidx) * 8 + 0)
  #define EFR32_BUFC_IF_UF_COUNT                   4
  #define EFR32_BUFC_IF_UF(fidx)                   (0x00000002 << ((fidx) * 8))
  #define EFR32_BUFC_IF_UF_IDX(fidx)               ((fidx) * 8 + 1)
  #define EFR32_BUFC_IF_THR_COUNT                  4
  #define EFR32_BUFC_IF_THR(fidx)                  (0x00000004 << ((fidx) * 8))
  #define EFR32_BUFC_IF_THR_IDX(fidx)              ((fidx) * 8 + 2)
  #define EFR32_BUFC_IF_CORR_COUNT                 4
  #define EFR32_BUFC_IF_CORR(fidx)                 (0x00000008 << ((fidx) * 8))
  #define EFR32_BUFC_IF_CORR_IDX(fidx)             ((fidx) * 8 + 3)
  #define EFR32_BUFC_IF_BUSERROR                   0x80000000
  #define EFR32_BUFC_IF_BUSERROR_IDX               31

/** See IF register fields @multiple */
#define EFR32_BUFC_IFS_ADDR                          0x000000e4
#define EFR32_BUFC_IFS_MASK                          0x00000000

/** See IF register fields @multiple */
#define EFR32_BUFC_IFC_ADDR                          0x000000e8
#define EFR32_BUFC_IFC_MASK                          0x00000000

/** See IF register fields @multiple */
#define EFR32_BUFC_IEN_ADDR                          0x000000ec
#define EFR32_BUFC_IEN_MASK                          0x00000000

#endif

