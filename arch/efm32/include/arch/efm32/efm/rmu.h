/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1                \
     cdefs_use_field_shift=1 cdefs_use_field_set=1
*/

#ifndef _EFM32_RMU_BFGEN_DEFS_
#define _EFM32_RMU_BFGEN_DEFS_

# if (CONFIG_EFM32_FAMILY == EFM32_FAMILY_LEOPARD) || (CONFIG_EFM32_FAMILY == EFM32_FAMILY_WONDER) || (CONFIG_EFM32_FAMILY == EFM32_FAMILY_GIANT)
#define EFM32_RMU_CTRL_ADDR                          0x00000000
#define EFM32_RMU_CTRL_MASK                          0x00000003
/** Set this bit to disable the LOCKUP signal (from the Cortex) from resetting
   the device. @multiple */
  #define EFM32_RMU_CTRL_LOCKUPRDIS                0x00000001
  #define EFM32_RMU_CTRL_LOCKUPRDIS_SHIFT          0
  #define EFM32_RMU_CTRL_LOCKUPRDIS_SET(x, v)      do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
/** This bit has to be cleared before accessing the registers in the BURTC.
   @multiple */
  #define EFM32_RMU_CTRL_BURSTEN                   0x00000002
  #define EFM32_RMU_CTRL_BURSTEN_SHIFT             1
  #define EFM32_RMU_CTRL_BURSTEN_SET(x, v)         do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
# endif

# if (CONFIG_EFM32_FAMILY == EFM32_FAMILY_GECKO) || (CONFIG_EFM32_FAMILY == EFM32_FAMILY_ZERO) || (CONFIG_EFM32_FAMILY == EFM32_FAMILY_TINY)
#define EFM32_RMU_CTRL_ADDR                          0x00000000
#define EFM32_RMU_CTRL_MASK                          0x00000001
/** Set this bit to disable the LOCKUP signal (from the Cortex) from resetting
   the device. @multiple */
  #define EFM32_RMU_CTRL_LOCKUPRDIS                0x00000001
  #define EFM32_RMU_CTRL_LOCKUPRDIS_SHIFT          0
  #define EFM32_RMU_CTRL_LOCKUPRDIS_SET(x, v)      do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
# endif

# if (CONFIG_EFM32_FAMILY == EFM32_FAMILY_LEOPARD) || (CONFIG_EFM32_FAMILY == EFM32_FAMILY_WONDER) || (CONFIG_EFM32_FAMILY == EFM32_FAMILY_GIANT)
#define EFM32_RMU_RSTCAUSE_ADDR                      0x00000004
#define EFM32_RMU_RSTCAUSE_MASK                      0x0000ffff
/** Set if a power on reset has been performed. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_PORST                 0x00000001
  #define EFM32_RMU_RSTCAUSE_PORST_SHIFT           0
  #define EFM32_RMU_RSTCAUSE_PORST_SET(x, v)       do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
/** Set if a unregulated domain brown out detector reset has been performed. Must
   be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODUNREGRST           0x00000002
  #define EFM32_RMU_RSTCAUSE_BODUNREGRST_SHIFT     1
  #define EFM32_RMU_RSTCAUSE_BODUNREGRST_SET(x, v) do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
/** Set if a regulated domain brown out detector reset has been performed. Must
   be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODREGRST             0x00000004
  #define EFM32_RMU_RSTCAUSE_BODREGRST_SHIFT       2
  #define EFM32_RMU_RSTCAUSE_BODREGRST_SET(x, v)   do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
/** Set if an external pin reset has been performed. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_EXTRST                0x00000008
  #define EFM32_RMU_RSTCAUSE_EXTRST_SHIFT          3
  #define EFM32_RMU_RSTCAUSE_EXTRST_SET(x, v)      do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
/** Set if a watchdog reset has been performed. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_WDOGRST               0x00000010
  #define EFM32_RMU_RSTCAUSE_WDOGRST_SHIFT         4
  #define EFM32_RMU_RSTCAUSE_WDOGRST_SET(x, v)     do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
/** Set if a LOCKUP reset has been requested. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_LOCKUPRST             0x00000020
  #define EFM32_RMU_RSTCAUSE_LOCKUPRST_SHIFT       5
  #define EFM32_RMU_RSTCAUSE_LOCKUPRST_SET(x, v)   do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
/** Set if a system request reset has been performed. Must be cleared by
   software. @multiple */
  #define EFM32_RMU_RSTCAUSE_SYSREQRST             0x00000040
  #define EFM32_RMU_RSTCAUSE_SYSREQRST_SHIFT       6
  #define EFM32_RMU_RSTCAUSE_SYSREQRST_SET(x, v)   do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
/** Set if the system has been in EM4. Must be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_EM4RST                0x00000080
  #define EFM32_RMU_RSTCAUSE_EM4RST_SHIFT          7
  #define EFM32_RMU_RSTCAUSE_EM4RST_SET(x, v)      do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
/** Set if the system has been woken up from EM4 from a reset request from pin.
   Must be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_EM4WURST              0x00000100
  #define EFM32_RMU_RSTCAUSE_EM4WURST_SHIFT        8
  #define EFM32_RMU_RSTCAUSE_EM4WURST_SET(x, v)    do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
/** Set if analog power domain 0 brown out detector reset has been performed.
   Must be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODAVDD0              0x00000200
  #define EFM32_RMU_RSTCAUSE_BODAVDD0_SHIFT        9
  #define EFM32_RMU_RSTCAUSE_BODAVDD0_SET(x, v)    do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
/** Set if analog power domain 1 brown out detector reset has been performed.
   Must be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODAVDD1              0x00000400
  #define EFM32_RMU_RSTCAUSE_BODAVDD1_SHIFT        10
  #define EFM32_RMU_RSTCAUSE_BODAVDD1_SET(x, v)    do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define EFM32_RMU_RSTCAUSE_BUBODVDDREG           0x00000800
  #define EFM32_RMU_RSTCAUSE_BUBODVDDREG_SHIFT     11
  #define EFM32_RMU_RSTCAUSE_BUBODVDDREG_SET(x, v) do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define EFM32_RMU_RSTCAUSE_BUBODBUVIN            0x00001000
  #define EFM32_RMU_RSTCAUSE_BUBODBUVIN_SHIFT      12
  #define EFM32_RMU_RSTCAUSE_BUBODBUVIN_SET(x, v)  do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
  #define EFM32_RMU_RSTCAUSE_BUBODUNREG            0x00002000
  #define EFM32_RMU_RSTCAUSE_BUBODUNREG_SHIFT      13
  #define EFM32_RMU_RSTCAUSE_BUBODUNREG_SET(x, v)  do { (x) = (((x) & ~0x2000) | ((v) << 13)); } while(0)
  #define EFM32_RMU_RSTCAUSE_BUBODREG              0x00004000
  #define EFM32_RMU_RSTCAUSE_BUBODREG_SHIFT        14
  #define EFM32_RMU_RSTCAUSE_BUBODREG_SET(x, v)    do { (x) = (((x) & ~0x4000) | ((v) << 14)); } while(0)
  #define EFM32_RMU_RSTCAUSE_BUMODERST             0x00008000
  #define EFM32_RMU_RSTCAUSE_BUMODERST_SHIFT       15
  #define EFM32_RMU_RSTCAUSE_BUMODERST_SET(x, v)   do { (x) = (((x) & ~0x8000) | ((v) << 15)); } while(0)
# endif

# if (CONFIG_EFM32_FAMILY == EFM32_FAMILY_ZERO) || (CONFIG_EFM32_FAMILY == EFM32_FAMILY_TINY)
#define EFM32_RMU_RSTCAUSE_ADDR                      0x00000004
#define EFM32_RMU_RSTCAUSE_MASK                      0x000007ff
/** Set if a power on reset has been performed. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_PORST                 0x00000001
  #define EFM32_RMU_RSTCAUSE_PORST_SHIFT           0
  #define EFM32_RMU_RSTCAUSE_PORST_SET(x, v)       do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
/** Set if a unregulated domain brown out detector reset has been performed. Must
   be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODUNREGRST           0x00000002
  #define EFM32_RMU_RSTCAUSE_BODUNREGRST_SHIFT     1
  #define EFM32_RMU_RSTCAUSE_BODUNREGRST_SET(x, v) do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
/** Set if a regulated domain brown out detector reset has been performed. Must
   be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODREGRST             0x00000004
  #define EFM32_RMU_RSTCAUSE_BODREGRST_SHIFT       2
  #define EFM32_RMU_RSTCAUSE_BODREGRST_SET(x, v)   do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
/** Set if an external pin reset has been performed. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_EXTRST                0x00000008
  #define EFM32_RMU_RSTCAUSE_EXTRST_SHIFT          3
  #define EFM32_RMU_RSTCAUSE_EXTRST_SET(x, v)      do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
/** Set if a watchdog reset has been performed. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_WDOGRST               0x00000010
  #define EFM32_RMU_RSTCAUSE_WDOGRST_SHIFT         4
  #define EFM32_RMU_RSTCAUSE_WDOGRST_SET(x, v)     do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
/** Set if a LOCKUP reset has been requested. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_LOCKUPRST             0x00000020
  #define EFM32_RMU_RSTCAUSE_LOCKUPRST_SHIFT       5
  #define EFM32_RMU_RSTCAUSE_LOCKUPRST_SET(x, v)   do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
/** Set if a system request reset has been performed. Must be cleared by
   software. @multiple */
  #define EFM32_RMU_RSTCAUSE_SYSREQRST             0x00000040
  #define EFM32_RMU_RSTCAUSE_SYSREQRST_SHIFT       6
  #define EFM32_RMU_RSTCAUSE_SYSREQRST_SET(x, v)   do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
/** Set if the system has been in EM4. Must be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_EM4RST                0x00000080
  #define EFM32_RMU_RSTCAUSE_EM4RST_SHIFT          7
  #define EFM32_RMU_RSTCAUSE_EM4RST_SET(x, v)      do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
/** Set if the system has been woken up from EM4 from a reset request from pin.
   Must be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_EM4WURST              0x00000100
  #define EFM32_RMU_RSTCAUSE_EM4WURST_SHIFT        8
  #define EFM32_RMU_RSTCAUSE_EM4WURST_SET(x, v)    do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
/** Set if analog power domain 0 brown out detector reset has been performed.
   Must be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODAVDD0              0x00000200
  #define EFM32_RMU_RSTCAUSE_BODAVDD0_SHIFT        9
  #define EFM32_RMU_RSTCAUSE_BODAVDD0_SET(x, v)    do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
/** Set if analog power domain 1 brown out detector reset has been performed.
   Must be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODAVDD1              0x00000400
  #define EFM32_RMU_RSTCAUSE_BODAVDD1_SHIFT        10
  #define EFM32_RMU_RSTCAUSE_BODAVDD1_SET(x, v)    do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
# endif

# if (CONFIG_EFM32_FAMILY == EFM32_FAMILY_GECKO)
#define EFM32_RMU_RSTCAUSE_ADDR                      0x00000004
#define EFM32_RMU_RSTCAUSE_MASK                      0x0000007f
/** Set if a power on reset has been performed. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_PORST                 0x00000001
  #define EFM32_RMU_RSTCAUSE_PORST_SHIFT           0
  #define EFM32_RMU_RSTCAUSE_PORST_SET(x, v)       do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
/** Set if a unregulated domain brown out detector reset has been performed. Must
   be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODUNREGRST           0x00000002
  #define EFM32_RMU_RSTCAUSE_BODUNREGRST_SHIFT     1
  #define EFM32_RMU_RSTCAUSE_BODUNREGRST_SET(x, v) do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
/** Set if a regulated domain brown out detector reset has been performed. Must
   be cleared by software. @multiple */
  #define EFM32_RMU_RSTCAUSE_BODREGRST             0x00000004
  #define EFM32_RMU_RSTCAUSE_BODREGRST_SHIFT       2
  #define EFM32_RMU_RSTCAUSE_BODREGRST_SET(x, v)   do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
/** Set if an external pin reset has been performed. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_EXTRST                0x00000008
  #define EFM32_RMU_RSTCAUSE_EXTRST_SHIFT          3
  #define EFM32_RMU_RSTCAUSE_EXTRST_SET(x, v)      do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
/** Set if a watchdog reset has been performed. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_WDOGRST               0x00000010
  #define EFM32_RMU_RSTCAUSE_WDOGRST_SHIFT         4
  #define EFM32_RMU_RSTCAUSE_WDOGRST_SET(x, v)     do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
/** Set if a LOCKUP reset has been requested. Must be cleared by software.
   @multiple */
  #define EFM32_RMU_RSTCAUSE_LOCKUPRST             0x00000020
  #define EFM32_RMU_RSTCAUSE_LOCKUPRST_SHIFT       5
  #define EFM32_RMU_RSTCAUSE_LOCKUPRST_SET(x, v)   do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
/** Set if a system request reset has been performed. Must be cleared by
   software. @multiple */
  #define EFM32_RMU_RSTCAUSE_SYSREQRST             0x00000040
  #define EFM32_RMU_RSTCAUSE_SYSREQRST_SHIFT       6
  #define EFM32_RMU_RSTCAUSE_SYSREQRST_SET(x, v)   do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
# endif

#define EFM32_RMU_CMD_ADDR                           0x00000008
#define EFM32_RMU_CMD_MASK                           0x00000001
/** Set this bit to clear the LOCKUPRST and SYSREQRST bits in the RMU_RSTCAUSE
   register. Use the HRCCLR bit in the EMU_AUXCTRL register to clear the
   remaining bits. @multiple */
  #define EFM32_RMU_CMD_RCCLR                      0x00000001
  #define EFM32_RMU_CMD_RCCLR_SHIFT                0
  #define EFM32_RMU_CMD_RCCLR_SET(x, v)            do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)

#endif

