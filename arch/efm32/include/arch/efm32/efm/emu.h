/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1                \
     cdefs_use_field_shift=1 cdefs_use_field_set=1
*/

#ifndef _EFM32_EMU_BFGEN_DEFS_
#define _EFM32_EMU_BFGEN_DEFS_

#define EFM32_EMU_CTRL_ADDR                          0x00000000
#define EFM32_EMU_CTRL_MASK                          0x0000000f
/** Control the voltage regulator in low energy modes 2 and 3. @multiple */
  #define EFM32_EMU_CTRL_EMVREG_SHIFT              0
  #define EFM32_EMU_CTRL_EMVREG(v)                 ((EFM32_EMU_CTRL_EMVREG_##v) << 0)
  #define EFM32_EMU_CTRL_EMVREG_SET(x, v)          do { (x) = (((x) & ~0x1) | ((EFM32_EMU_CTRL_EMVREG_##v) << 0)); } while(0)
  #define EFM32_EMU_CTRL_EMVREG_SETVAL(x, v)       do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define EFM32_EMU_CTRL_EMVREG_GET(x)             (((x) >> 0) & 0x1)
    #define EFM32_EMU_CTRL_EMVREG_REDUCED            0x00000000
    #define EFM32_EMU_CTRL_EMVREG_FULL               0x00000001
/** This bit is used to prevent the MCU to enter Energy Mode 2 or lower.
   @multiple */
  #define EFM32_EMU_CTRL_EM2BLOCK                  0x00000002
  #define EFM32_EMU_CTRL_EM2BLOCK_SHIFT            1
  #define EFM32_EMU_CTRL_EM2BLOCK_SET(x, v)        do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
/** This register is used to enter Energy Mode 4, in which the device only wakes
   up from an external pin reset, from a power cycle, Backup RTC interrupt, or
   EM4 wakeup reset request. Energy Mode 4 is entered when the EM4 sequence is
   written to this bitfield. @multiple */
  #define EFM32_EMU_CTRL_EM4CTRL_SHIFT             2
  #define EFM32_EMU_CTRL_EM4CTRL(v)                ((v) << 2)
  #define EFM32_EMU_CTRL_EM4CTRL_SET(x, v)         do { (x) = (((x) & ~0xc) | ((v) << 2)); } while(0)
  #define EFM32_EMU_CTRL_EM4CTRL_GET(x)            (((x) >> 2) & 0x3)

#define EFM32_EMU_LOCK_ADDR                          0x00000004
#define EFM32_EMU_LOCK_MASK                          0x0000ffff
/** Write any other value than the unlock code to lock all EMU registers, except
   the interrupt registers, from editing. Write the unlock code to unlock. When
   reading the register, bit 0 is set when the lock is enabled. @multiple */
  #define EFM32_EMU_LOCK_KEY_SHIFT                 0
  #define EFM32_EMU_LOCK_KEY(v)                    ((EFM32_EMU_LOCK_KEY_##v) << 0)
  #define EFM32_EMU_LOCK_KEY_SET(x, v)             do { (x) = (((x) & ~0xffff) | ((EFM32_EMU_LOCK_KEY_##v) << 0)); } while(0)
  #define EFM32_EMU_LOCK_KEY_SETVAL(x, v)          do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define EFM32_EMU_LOCK_KEY_GET(x)                (((x) >> 0) & 0xffff)
    #define EFM32_EMU_LOCK_KEY_LOCK                  0x00000000
    #define EFM32_EMU_LOCK_KEY_UNLOCK                0x0000ade8

#define EFM32_EMU_AUXCTRL_ADDR                       0x00000024
#define EFM32_EMU_AUXCTRL_MASK                       0x00000001
/** Write to 1 and then 0 to clear the POR, BOD and WDOG reset cause register
   bits. See also the Reset Management Unit (RMU). @multiple */
  #define EFM32_EMU_AUXCTRL_HRCCLR                 0x00000001
  #define EFM32_EMU_AUXCTRL_HRCCLR_SHIFT           0
  #define EFM32_EMU_AUXCTRL_HRCCLR_SET(x, v)       do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)

#endif

