/*
   This file is part of MutekH.

   MutekH is free software; you can redistribute it and/or modify it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; version 2.1 of the
   License.

   MutekH is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with MutekH; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
   02110-1301 USA.

   Copyright (c) 2017 Sebastien Cerdan <sebcerdan@gmail.com>

 */

#ifdef CONFIG_DRIVER_EFR32_DEBUG

  #define DEBUG_RAM_ADDR 0x2003F000
  #define DEBUG_RAM_SIZE 0x1000

  #define PRINT_PC()
  #define STORE_REG(R)                 \
       mov              r4, R;         \
       call             _store

  #define STACK_TEST(N)                                      \
       cst32            r0, EFR32_SEQ_STACK_POINTER_ADDR;    \
       ld.rac           r1, [EFR32_RAC_ADDR + EFR32_RAC_R_ADDR(6)];      \
       xor              r0, r1;                              \
       jz               __next_op##N;                        \
       GPIO_LOG(0xe);                                        \
  __next_op##N:	        				     \

_store:          // write r4 to debug memory
        push             r0
        push             r1
        push             r2
        cst32            r0, DEBUG_RAM_ADDR
        ld               r1, [r0]
        addi             r1, 4
        jmp              _test_addr
    _store_word: 
        st               [r0], r1   
        st               [r1], r4
        pop              r2
        pop              r1
        pop              r0
        ret

_test_addr:
/*
        mov              r2, r1
        ror              r1, 8
        ror              r1, 7
        andi             r1, 0x01            
        jnz              _reset_addr
        mov              r1, r2
        */
        jmp              _store_word

_reset_addr:
        cst32            r1, DEBUG_RAM_ADDR + 4
        jmp              _store_word

#else
  #define GPIO_LOG(N)                 \
       cst32            r4, N;        \
       call             _gpio       
 
_gpio:          // write R4 to gpio
        push             r0
        push             r1
        push             r2

#if CONFIG_EFM32_ARCHREV == EFM32_ARCHREV_EFR_XG12
        /* set pin pb6 to pb9 */
        cst32            r1, (0x4000a000 + 0xc + 1 * 0x30)
        ld               r0, [r1]           
        cst32            r2, 0xFFFFFC3F
        and              r2, r0

        cst32            r0, 0xF
        and              r4, r0
        rol              r4, 6 
        or               r4, r2
#elif CONFIG_EFM32_ARCHREV == EFM32_ARCHREV_EFR_XG14
        /* set pin pf4 to pf7 */
        cst32            r1, (0x4000a000 + 0xc + 5 * 0x30)
        ld               r0, [r1]           
        cst32            r2, 0xFFFFFF0F
        and              r2, r0

        cst32            r0, 0xF
        and              r4, r0
        rol              r4, 4 
        or               r4, r2
#endif

        st               [r1], r4          

        pop              r2
        pop              r1
        pop              r0

        ret

_ttg_led:        // toggle led pin
#if CONFIG_EFM32_ARCHREV == EFM32_ARCHREV_EFR_XG12
        push             r0
        push             r1

        cst32            r1, (0x4600a000 + 0x18 + 5 * 0x30)      
        cst32            r0, 0x00000010      
        st               [r1], r0         

        pop              r1
        pop              r0
#elif CONFIG_EFM32_ARCHREV == EFM32_ARCHREV_EFR_XG14
#endif
        ret
//  #define GPIO_LOG(N)               
  #define PRINT_PC()
  #define STORE_REG(R)
  #define STACK_TEST(N)
#endif

