/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1 -O hsiom.h     \
     -I hsiom.bf
*/

#ifndef _HSIOM_BFGEN_DEFS_
#define _HSIOM_BFGEN_DEFS_

/** Port selection register, retained @multiple */
#define HSIOM_PORT_SEL_ADDR(ridx)                    (0x40020100 + (ridx) * 256)
#define HSIOM_PORT_SEL_COUNT                         6
#define HSIOM_PORT_SEL_MASK                          0xffffffff
/** IO pad routing selection @multiple */
  #define HSIOM_PORT_SEL_IO_SEL_COUNT              8
  #define HSIOM_PORT_SEL_IO_SEL(fidx, v)           ((HSIOM_PORT_SEL_IO_SEL_##v) << ((fidx) * 4 + 0))
  #define HSIOM_PORT_SEL_IO_SEL_SET(fidx, x, v)    do { (x) = (((x) & ~(0xf << ((fidx) * 4))) | ((HSIOM_PORT_SEL_IO_SEL_##v) << ((fidx) * 4 + 0))); } while(0)
  #define HSIOM_PORT_SEL_IO_SEL_SETVAL(fidx, x, v) do { (x) = (((x) & ~(0xf << ((fidx) * 4))) | ((v) << ((fidx) * 4 + 0))); } while(0)
  #define HSIOM_PORT_SEL_IO_SEL_GET(fidx, x)       (((x) >> ((fidx) * 4 + 0)) & 0xf)
/** SW controlled GPIO */
  #define HSIOM_PORT_SEL_IO_SEL_GPIO               0x00000000
/** CSD sense connection (analog mode) */
  #define HSIOM_PORT_SEL_IO_SEL_CSD_SENSE          0x00000004
/** CSD shield connection (analog mode) */
  #define HSIOM_PORT_SEL_IO_SEL_CSD_SHIELD         0x00000005
/** AMUXBUS A connection */
  #define HSIOM_PORT_SEL_IO_SEL_AMUXA              0x00000006
/** AMUXBUS B connection. This mode is also used for CSD GPIO charging */
  #define HSIOM_PORT_SEL_IO_SEL_AMUXB              0x00000007
/** Chip specific Active source 0 connection */
  #define HSIOM_PORT_SEL_IO_SEL_ACT_0              0x00000008
/** Chip specific Active source 1 connection */
  #define HSIOM_PORT_SEL_IO_SEL_ACT_1              0x00000009
/** Chip specific Active source 2 connection */
  #define HSIOM_PORT_SEL_IO_SEL_ACT_2              0x0000000a
/** Chip specific Active source 3 connection */
  #define HSIOM_PORT_SEL_IO_SEL_ACT_3              0x0000000b
/** LCD common connection. Chip specific DeepSleep source 0 connection */
  #define HSIOM_PORT_SEL_IO_SEL_LCD_COM_DS_0       0x0000000c
/** LCD segment connection. Chip specific DeepSleep source 1 connection */
  #define HSIOM_PORT_SEL_IO_SEL_LCD_SEG_DS_1       0x0000000d
/** Chip specific DeepSleep source 2 connection */
  #define HSIOM_PORT_SEL_IO_SEL_DS_2               0x0000000e
/** Chip specific DeepSleep source 3 connection */
  #define HSIOM_PORT_SEL_IO_SEL_DS_3               0x0000000f

/** AMUX splitter cell control, retained @multiple */
#define HSIOM_AMUX_SPLIT_CTL_ADDR(ridx)              (0x40022100 + (ridx) * 4)
#define HSIOM_AMUX_SPLIT_CTL_COUNT                   3
#define HSIOM_AMUX_SPLIT_CTL_MASK                    0x00000077
/** T-switch control for Left AMUXBUSA switch @multiple */
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL(v)     ((HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL_##v) << 0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL_SET(x, v) do { (x) = (((x) & ~0x1) | ((HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL_##v) << 0)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL_SETVAL(x, v) do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL_GET(x) (((x) >> 0) & 0x1)
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL_OPEN   0x00000000
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SL_CLOSED 0x00000001
/** T-switch control for Right AMUXBUSA switch @multiple */
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR(v)     ((HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR_##v) << 1)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR_SET(x, v) do { (x) = (((x) & ~0x2) | ((HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR_##v) << 1)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR_SETVAL(x, v) do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR_GET(x) (((x) >> 1) & 0x1)
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR_OPEN   0x00000000
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_SR_CLOSED 0x00000001
/** T-switch control for VSSA/Gnd AMUXBUSA switch @multiple */
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_S0(v)     ((HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_S0_##v) << 2)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_S0_SET(x, v) do { (x) = (((x) & ~0x4) | ((HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_S0_##v) << 2)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_S0_SETVAL(x, v) do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_S0_GET(x) (((x) >> 2) & 0x1)
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_S0_OPEN   0x00000000
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_AA_S0_CLOSED 0x00000001
/** T-switch control for Left AMUXBUSA switch @multiple */
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL(v)     ((HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL_##v) << 4)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL_SET(x, v) do { (x) = (((x) & ~0x10) | ((HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL_##v) << 4)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL_SETVAL(x, v) do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL_GET(x) (((x) >> 4) & 0x1)
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL_OPEN   0x00000000
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SL_CLOSED 0x00000001
/** T-switch control for Right AMUXBUSA switch @multiple */
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR(v)     ((HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR_##v) << 5)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR_SET(x, v) do { (x) = (((x) & ~0x20) | ((HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR_##v) << 5)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR_SETVAL(x, v) do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR_GET(x) (((x) >> 5) & 0x1)
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR_OPEN   0x00000000
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_SR_CLOSED 0x00000001
/** T-switch control for VSSA/Gnd AMUXBUSA switch @multiple */
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_S0(v)     ((HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_S0_##v) << 6)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_S0_SET(x, v) do { (x) = (((x) & ~0x40) | ((HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_S0_##v) << 6)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_S0_SETVAL(x, v) do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_S0_GET(x) (((x) >> 6) & 0x1)
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_S0_OPEN   0x00000000
    #define HSIOM_AMUX_SPLIT_CTL_SWITCH_BB_S0_CLOSED 0x00000001

#endif

