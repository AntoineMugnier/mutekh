/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_setval=1 -O tcpwm.h     \
     -I tcpwm.bf
*/

#ifndef _TCPWM_BFGEN_DEFS_
#define _TCPWM_BFGEN_DEFS_

#define TCPWM_CNT_CTRL_ADDR(ridx)                    (0x40200100 + (ridx) * 64)
#define TCPWM_CNT_CTRL_COUNT                         4
#define TCPWM_CNT_CTRL_MASK                          0x0737ff0f
/** Whether to switch CC on a terminal count event with an actively pending
   switch event @multiple */
  #define TCPWM_CNT_CTRL_AUTO_RELOAD_CC            0x00000001
/** Whether to switch PERIOD on a terminal count event with and actively pending
   siwtch event @multiple */
  #define TCPWM_CNT_CTRL_AUTO_RELOAD_PERIOD        0x00000002
/** Whether kiss is synchronous @multiple */
  #define TCPWM_CNT_CTRL_PWM_SYNC_KILL             0x00000004
/** Whether the counter stops on a kill events @multiple */
  #define TCPWM_CNT_CTRL_PWM_STOP_ON_KILL          0x00000008
/** Divide by 2^generic @multiple */
  #define TCPWM_CNT_CTRL_GENERIC(v)                ((v) << 8)
  #define TCPWM_CNT_CTRL_GENERIC_SET(x, v)         do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define TCPWM_CNT_CTRL_GENERIC_GET(x)            (((x) >> 8) & 0xff)
/** Determines counter direction @multiple */
  #define TCPWM_CNT_CTRL_UP_DOWN_MODE(v)           ((TCPWM_CNT_CTRL_UP_DOWN_MODE_##v) << 16)
  #define TCPWM_CNT_CTRL_UP_DOWN_MODE_SET(x, v)    do { (x) = (((x) & ~0x30000) | ((TCPWM_CNT_CTRL_UP_DOWN_MODE_##v) << 16)); } while(0)
  #define TCPWM_CNT_CTRL_UP_DOWN_MODE_SETVAL(x, v) do { (x) = (((x) & ~0x30000) | ((v) << 16)); } while(0)
  #define TCPWM_CNT_CTRL_UP_DOWN_MODE_GET(x)       (((x) >> 16) & 0x3)
    #define TCPWM_CNT_CTRL_UP_DOWN_MODE_COUNT_UP     0x00000000
    #define TCPWM_CNT_CTRL_UP_DOWN_MODE_COUNT_DOWN   0x00000001
    #define TCPWM_CNT_CTRL_UP_DOWN_MODE_COUNT_UPDN1  0x00000002
    #define TCPWM_CNT_CTRL_UP_DOWN_MODE_COUNT_UPDN2  0x00000003
/** Whether to turn counter off after termination @multiple */
  #define TCPWM_CNT_CTRL_ONE_SHOT                  0x00040000
/** In QUAD mode selects quadrature encoding mode @multiple */
  #define TCPWM_CNT_CTRL_QUADRATURE_MODE(v)        ((TCPWM_CNT_CTRL_QUADRATURE_MODE_##v) << 20)
  #define TCPWM_CNT_CTRL_QUADRATURE_MODE_SET(x, v) do { (x) = (((x) & ~0x300000) | ((TCPWM_CNT_CTRL_QUADRATURE_MODE_##v) << 20)); } while(0)
  #define TCPWM_CNT_CTRL_QUADRATURE_MODE_SETVAL(x, v) do { (x) = (((x) & ~0x300000) | ((v) << 20)); } while(0)
  #define TCPWM_CNT_CTRL_QUADRATURE_MODE_GET(x)    (((x) >> 20) & 0x3)
/** X1 encoding (QUAD mode) */
    #define TCPWM_CNT_CTRL_QUADRATURE_MODE_X1        0x00000000
/** X2 encoding (QUAD mode) */
    #define TCPWM_CNT_CTRL_QUADRATURE_MODE_X2        0x00000001
/** X4 encoding (QUAD mode) */
    #define TCPWM_CNT_CTRL_QUADRATURE_MODE_X4        0x00000002
/** Counter mode @multiple */
  #define TCPWM_CNT_CTRL_MODE(v)                   ((TCPWM_CNT_CTRL_MODE_##v) << 24)
  #define TCPWM_CNT_CTRL_MODE_SET(x, v)            do { (x) = (((x) & ~0x7000000) | ((TCPWM_CNT_CTRL_MODE_##v) << 24)); } while(0)
  #define TCPWM_CNT_CTRL_MODE_SETVAL(x, v)         do { (x) = (((x) & ~0x7000000) | ((v) << 24)); } while(0)
  #define TCPWM_CNT_CTRL_MODE_GET(x)               (((x) >> 24) & 0x7)
    #define TCPWM_CNT_CTRL_MODE_TIMER                0x00000000
    #define TCPWM_CNT_CTRL_MODE_CAPTURE              0x00000002
/** Quadrature encoding */
    #define TCPWM_CNT_CTRL_MODE_QUAD                 0x00000003
/** Pulse width modulation */
    #define TCPWM_CNT_CTRL_MODE_PWM                  0x00000004
/** PWM with deadtime insertion */
    #define TCPWM_CNT_CTRL_MODE_PWM_DT               0x00000005
/** Pseudo random pulse width modulation */
    #define TCPWM_CNT_CTRL_MODE_PWM_PR               0x00000006

#define TCPWM_CNT_STATUS_ADDR(ridx)                  (0x40200104 + (ridx) * 64)
#define TCPWM_CNT_STATUS_COUNT                       4
#define TCPWM_CNT_STATUS_MASK                        0x00000000

#define TCPWM_CNT_COUNTER_ADDR(ridx)                 (0x40200108 + (ridx) * 64)
#define TCPWM_CNT_COUNTER_COUNT                      4
#define TCPWM_CNT_COUNTER_MASK                       0x00000000

#define TCPWM_CNT_CC_ADDR(ridx)                      (0x4020010c + (ridx) * 64)
#define TCPWM_CNT_CC_COUNT                           4
#define TCPWM_CNT_CC_MASK                            0x00000000

#define TCPWM_CNT_CC_BUFF_ADDR(ridx)                 (0x40200110 + (ridx) * 64)
#define TCPWM_CNT_CC_BUFF_COUNT                      4
#define TCPWM_CNT_CC_BUFF_MASK                       0x00000000

#define TCPWM_CNT_PERIOD_ADDR(ridx)                  (0x40200114 + (ridx) * 64)
#define TCPWM_CNT_PERIOD_COUNT                       4
#define TCPWM_CNT_PERIOD_MASK                        0x00000000

#define TCPWM_CNT_PERIOD_BUFF_ADDR(ridx)             (0x40200118 + (ridx) * 64)
#define TCPWM_CNT_PERIOD_BUFF_COUNT                  4
#define TCPWM_CNT_PERIOD_BUFF_MASK                   0x00000000

#define TCPWM_CNT_TR_CTRL0_ADDR(ridx)                (0x40200120 + (ridx) * 64)
#define TCPWM_CNT_TR_CTRL0_COUNT                     4
#define TCPWM_CNT_TR_CTRL0_MASK                      0x00000000

#define TCPWM_CNT_TR_CTRL1_ADDR(ridx)                (0x40200124 + (ridx) * 64)
#define TCPWM_CNT_TR_CTRL1_COUNT                     4
#define TCPWM_CNT_TR_CTRL1_MASK                      0x00000000

#define TCPWM_CNT_TR_CTRL2_ADDR(ridx)                (0x40200128 + (ridx) * 64)
#define TCPWM_CNT_TR_CTRL2_COUNT                     4
#define TCPWM_CNT_TR_CTRL2_MASK                      0x00000000

#define TCPWM_CNT_INTR_ADDR(ridx)                    (0x40200130 + (ridx) * 64)
#define TCPWM_CNT_INTR_COUNT                         4
#define TCPWM_CNT_INTR_MASK                          0x00000000

#define TCPWM_CNT_INTR_SET_ADDR(ridx)                (0x40200134 + (ridx) * 64)
#define TCPWM_CNT_INTR_SET_COUNT                     4
#define TCPWM_CNT_INTR_SET_MASK                      0x00000000

#define TCPWM_CNT_INTR_MASK_ADDR(ridx)               (0x40200138 + (ridx) * 64)
#define TCPWM_CNT_INTR_MASK_COUNT                    4
#define TCPWM_CNT_INTR_MASK_MASK                     0x00000000

#define TCPWM_CNT_INTR_MASKED_ADDR(ridx)             (0x4020013c + (ridx) * 64)
#define TCPWM_CNT_INTR_MASKED_COUNT                  4
#define TCPWM_CNT_INTR_MASKED_MASK                   0x00000000

#endif

