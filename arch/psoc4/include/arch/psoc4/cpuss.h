/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -I cpuss.bf -O cpuss.h -o cdefs cdefs_use_reg_mask=1                  \
     cdefs_use_field_setval=1
*/

#ifndef _CPUSS_BFGEN_DEFS_
#define _CPUSS_BFGEN_DEFS_

#define CPUSS_CONFIG_ADDR                            0x00000000
#define CPUSS_CONFIG_MASK                            0x00000001
/** Fetch vector table in SRAM at 0x20000000. Note that vectors for RESET and
   FAULT are always fetched from ROM. Value in flash/RAM is ignored for these
   vectors. @multiple */
  #define CPUSS_CONFIG_VECT_IN_RAM                 0x00000001

#define CPUSS_SYSREQ_ADDR                            0x00000004
#define CPUSS_SYSREQ_MASK                            0xf800ffff
/** Opcode of the system call being requested. @multiple */
  #define CPUSS_SYSREQ_SYSCALL_COMMAND(v)          ((v) << 0)
  #define CPUSS_SYSREQ_SYSCALL_COMMAND_SET(x, v)   do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define CPUSS_SYSREQ_SYSCALL_COMMAND_GET(x)      (((x) >> 0) & 0xffff)
/** Disable Reset Vector fetch relocation: Note that this field defaults to '0'
   on reset, ensuring actual reset vector fetches are always made to ROM. Note
   that this field does not affect DAP accesses. Flash DFT routines may set this
   bit to enable uninhibited read-back of programmed data in the first flash
   page. @multiple */
  #define CPUSS_SYSREQ_DIS_RESET_VECT_REL(v)       ((CPUSS_SYSREQ_DIS_RESET_VECT_REL_##v) << 27)
  #define CPUSS_SYSREQ_DIS_RESET_VECT_REL_SET(x, v) do { (x) = (((x) & ~0x8000000) | ((CPUSS_SYSREQ_DIS_RESET_VECT_REL_##v) << 27)); } while(0)
  #define CPUSS_SYSREQ_DIS_RESET_VECT_REL_SETVAL(x, v) do { (x) = (((x) & ~0x8000000) | ((v) << 27)); } while(0)
  #define CPUSS_SYSREQ_DIS_RESET_VECT_REL_GET(x)   (((x) >> 27) & 0x1)
/** CPU accesses to locations 0x00000000 - 0x00000007 are redirected to ROM. */
    #define CPUSS_SYSREQ_DIS_RESET_VECT_REL_ROM      0x00000000
/** CPU accesses to locations 0x00000000 - 0x00000007 are made to flash. */
    #define CPUSS_SYSREQ_DIS_RESET_VECT_REL_FLASH    0x00000001
/** Indicates whether the system is in privileged mode. Only CPU SW executing
   from ROM can set this field when ROM_ACCESS_EN is 1. @multiple */
  #define CPUSS_SYSREQ_PRIVILEGED                  0x10000000
/** Indicates that executing from Boot ROM is enabled. HW sets this field on
   reset or when the SystemCall NMI vector is fetched from Boot ROM. HW resets
   this field, when the CPU is NOT executing from either Boot or System ROM. This
   bit is used for debug purposes only. @multiple */
  #define CPUSS_SYSREQ_ROM_ACCESS_EN               0x20000000
/** Indicates the source of the write access to the SYSREQ register. HW sets this
   field when the SYSREQ register is written to and SYSCALL_REQ is '0' (the last
   time it is set is when SW sets SYSCALL_REQ from '0' to '1'). @multiple */
  #define CPUSS_SYSREQ_HMASTER_0(v)                ((CPUSS_SYSREQ_HMASTER_0_##v) << 30)
  #define CPUSS_SYSREQ_HMASTER_0_SET(x, v)         do { (x) = (((x) & ~0x40000000) | ((CPUSS_SYSREQ_HMASTER_0_##v) << 30)); } while(0)
  #define CPUSS_SYSREQ_HMASTER_0_SETVAL(x, v)      do { (x) = (((x) & ~0x40000000) | ((v) << 30)); } while(0)
  #define CPUSS_SYSREQ_HMASTER_0_GET(x)            (((x) >> 30) & 0x1)
/** CPU write access. */
    #define CPUSS_SYSREQ_HMASTER_0_CPU               0x00000000
/** DAP write access. */
    #define CPUSS_SYSREQ_HMASTER_0_DAP               0x00000001
/** CPU/DAP writes a '1' to this field to request a SystemCall. The HMASTER_0
   field indicates the source of the write access. Setting this field to '1'
   immediate results in a NMI. The SystemCall NMI interrupt handler sets this
   field to '0' after servicing the request. @multiple */
  #define CPUSS_SYSREQ_SYSCALL_REQ                 0x80000000

#define CPUSS_SYSARG_ADDR                            0x00000008
#define CPUSS_SYSARG_MASK                            0xffffffff
/** Argument to System Call specified in SYSREQ. Semantics of argument depends on
   system call made. Typically a pointer to a parameter block. @multiple */
  #define CPUSS_SYSARG_SYSCALL_ARG(v)              ((v) << 0)
  #define CPUSS_SYSARG_SYSCALL_ARG_SET(x, v)       do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define CPUSS_SYSARG_SYSCALL_ARG_GET(x)          (((x) >> 0) & 0xffffffff)

/** Interrupt multiplexer select @multiple */
#define CPUSS_INT_SEL_ADDR                           0x00000020
#define CPUSS_INT_SEL_MASK                           0xffffffff
/** Reserved @multiple */
  #define CPUSS_INT_SEL_RESERVED(v)                ((v) << 0)
  #define CPUSS_INT_SEL_RESERVED_SET(x, v)         do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define CPUSS_INT_SEL_RESERVED_GET(x)            (((x) >> 0) & 0xffffffff)

/** Reserved @multiple */
#define CPUSS_INT_MODE_ADDR                          0x00000024
#define CPUSS_INT_MODE_MASK                          0xffffffff
/** Reserved @multiple */
  #define CPUSS_INT_MODE_RESERVED(v)               ((v) << 0)
  #define CPUSS_INT_MODE_RESERVED_SET(x, v)        do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define CPUSS_INT_MODE_RESERVED_GET(x)           (((x) >> 0) & 0xffffffff)

/** Reserved @multiple */
#define CPUSS_NMI_MODE_ADDR                          0x00000028
#define CPUSS_NMI_MODE_MASK                          0x00000001
/** Reserved @multiple */
  #define CPUSS_NMI_MODE_RESERVED                  0x00000001

#define CPUSS_FLASH_CTL_ADDR                         0x00000030
#define CPUSS_FLASH_CTL_MASK                         0x00000113
/** Count of Flash wait states @multiple */
  #define CPUSS_FLASH_CTL_FLASH_WS(v)              ((CPUSS_FLASH_CTL_FLASH_WS_##v) << 0)
  #define CPUSS_FLASH_CTL_FLASH_WS_SET(x, v)       do { (x) = (((x) & ~0x3) | ((CPUSS_FLASH_CTL_FLASH_WS_##v) << 0)); } while(0)
  #define CPUSS_FLASH_CTL_FLASH_WS_SETVAL(x, v)    do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define CPUSS_FLASH_CTL_FLASH_WS_GET(x)          (((x) >> 0) & 0x3)
/** 0-16 MHz system frequency */
    #define CPUSS_FLASH_CTL_FLASH_WS_0               0x00000000
/** 16-32 MHz system frequency */
    #define CPUSS_FLASH_CTL_FLASH_WS_1               0x00000001
/** 32-48 MHz system frequency */
    #define CPUSS_FLASH_CTL_FLASH_WS_2               0x00000002
/** Prefetch enable @multiple */
  #define CPUSS_FLASH_CTL_PREF_EN(v)               ((CPUSS_FLASH_CTL_PREF_EN_##v) << 4)
  #define CPUSS_FLASH_CTL_PREF_EN_SET(x, v)        do { (x) = (((x) & ~0x10) | ((CPUSS_FLASH_CTL_PREF_EN_##v) << 4)); } while(0)
  #define CPUSS_FLASH_CTL_PREF_EN_SETVAL(x, v)     do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define CPUSS_FLASH_CTL_PREF_EN_GET(x)           (((x) >> 4) & 0x1)
/** disabled. This is a desirable seeting when FLASH_WS is "0" or when predictable execution behavior is required. */
    #define CPUSS_FLASH_CTL_PREF_EN_DISABLED         0x00000000
/** enabled. */
    #define CPUSS_FLASH_CTL_PREF_EN_ENABLED          0x00000001
/** Invalidates the content of the flash controller's buffers. @multiple */
  #define CPUSS_FLASH_CTL_FLASH_INVALIDATE         0x00000100

#define CPUSS_ROM_CTL_ADDR                           0x00000034
#define CPUSS_ROM_CTL_MASK                           0x00000001
/** Count of ROM wait states @multiple */
  #define CPUSS_ROM_CTL_ROM_WS                     0x00000001

#endif

