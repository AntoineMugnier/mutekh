/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -I csd.bf -O csd.h -o cdefs cdefs_use_reg_mask=1                      \
     cdefs_use_field_setval=1
*/

#ifndef _CSD_BFGEN_DEFS_
#define _CSD_BFGEN_DEFS_

/** ID & Revision Number @multiple */
#define CSD_CSD_ID_ADDR                              0x00000000
#define CSD_CSD_ID_MASK                              0xffffffff
/** the ID of CSD peripheral is 0xE0E1 @multiple */
  #define CSD_CSD_ID_ID(v)                         ((v) << 0)
  #define CSD_CSD_ID_ID_SET(x, v)                  do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define CSD_CSD_ID_ID_GET(x)                     (((x) >> 0) & 0xffff)
/** the version number is 0x0001 @multiple */
  #define CSD_CSD_ID_REVISION(v)                   ((v) << 16)
  #define CSD_CSD_ID_REVISION_SET(x, v)            do { (x) = (((x) & ~0xffff0000) | ((v) << 16)); } while(0)
  #define CSD_CSD_ID_REVISION_GET(x)               (((x) >> 16) & 0xffff)

/** Retention: Not Retained @multiple */
#define CSD_CSD_INTR_ADDR                            0x00000014
#define CSD_CSD_INTR_MASK                            0x00000001
/** The CSD IRQ bit is set. Firmware must clear this bit as part of the interrupt
   handler. Write 1 to clear @multiple */
  #define CSD_CSD_INTR_IRQ                         0x00000001

#define CSD_CSD_INTR_SET_ADDR                        0x00000018
#define CSD_CSD_INTR_SET_MASK                        0x00000001
/** Only for debug/test purpose this field can be set to '1' to set corresponding
   bit in interrupt request register INTR. @multiple */
  #define CSD_CSD_INTR_SET_INTR                    0x00000001

#define CSD_CSD_PWM_ADDR                             0x0000001c
#define CSD_CSD_PWM_MASK                             0x0000003f
/** Pulse widht modulation can be used to change the length of sensor clock pulse
   (low time/high time) when using PRS/Divide-by-2 as source of sensor clock. The
   length of the sensor clock pulse low/high time is multiples of clk_csd2
   cycles. @multiple */
  #define CSD_CSD_PWM_PWM_COUNT(v)                 ((v) << 0)
  #define CSD_CSD_PWM_PWM_COUNT_SET(x, v)          do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define CSD_CSD_PWM_PWM_COUNT_GET(x)             (((x) >> 0) & 0xf)
/** The mode of the PWM modulator Default Value: 0 @multiple */
  #define CSD_CSD_PWM_PWM_SEL(v)                   ((CSD_CSD_PWM_PWM_SEL_##v) << 4)
  #define CSD_CSD_PWM_PWM_SEL_SET(x, v)            do { (x) = (((x) & ~0x30) | ((CSD_CSD_PWM_PWM_SEL_##v) << 4)); } while(0)
  #define CSD_CSD_PWM_PWM_SEL_SETVAL(x, v)         do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define CSD_CSD_PWM_PWM_SEL_GET(x)               (((x) >> 4) & 0x3)
/** The PWM modulator is OFF and it has no effect on sensor clock generated by PRS/divide-by-2 */
    #define CSD_CSD_PWM_PWM_SEL_OFF                  0x00000000
/** The PWM modulator changes the low phase of sensor clock to a fixed length (used during negative charge transfer mode). */
    #define CSD_CSD_PWM_PWM_SEL_FIXED_HIGH           0x00000002
/** The PWM modulator changes the high phase of sensor clock to a fixed length (used during positive charge transfer mode). */
    #define CSD_CSD_PWM_PWM_SEL_FIXED_LOW            0x00000003

#endif

