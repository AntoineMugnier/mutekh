/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -I sflash.bf -O sflash.h -o cdefs cdefs_use_reg_mask=1                \
     cdefs_use_field_setval=1
*/

#ifndef _SFLASH_BFGEN_DEFS_
#define _SFLASH_BFGEN_DEFS_

/** Protection Level @multiple */
#define SFLASH_PROT_PROTECTION_ADDR                  0x0000007f
#define SFLASH_PROT_PROTECTION_MASK                  0x00000003
/** Current Protection Mode @multiple */
  #define SFLASH_PROT_PROTECTION_PROT_LEVEL(v)     ((SFLASH_PROT_PROTECTION_PROT_LEVEL_##v) << 0)
  #define SFLASH_PROT_PROTECTION_PROT_LEVEL_SET(x, v) do { (x) = (((x) & ~0x3) | ((SFLASH_PROT_PROTECTION_PROT_LEVEL_##v) << 0)); } while(0)
  #define SFLASH_PROT_PROTECTION_PROT_LEVEL_SETVAL(x, v) do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define SFLASH_PROT_PROTECTION_PROT_LEVEL_GET(x) (((x) >> 0) & 0x3)
/** System is in OPEN mode */
    #define SFLASH_PROT_PROTECTION_PROT_LEVEL_OPEN   0x00000000
/** System is in VIRGIN mode */
    #define SFLASH_PROT_PROTECTION_PROT_LEVEL_VIRGIN 0x00000001
/** System is in PROTECTED mode */
    #define SFLASH_PROT_PROTECTION_PROT_LEVEL_PROTECTED 0x00000002
/** System is in KILL mode */
    #define SFLASH_PROT_PROTECTION_PROT_LEVEL_KILL   0x00000003

/** BLESS Bump bit for LDO BB, TXRX @multiple */
#define SFLASH_BLESS_BB_BUMP2_ADDR                   0x000000d8
#define SFLASH_BLESS_BB_BUMP2_MASK                   0x00000000

/** BLESS bump configuration 1 @multiple */
#define SFLASH_BLESS_BB_XO_ADDR                      0x000000da
#define SFLASH_BLESS_BB_XO_MASK                      0x00000000

/** BLESS SY bump bits configuration 1 @multiple */
#define SFLASH_BLESS_SY_BUMP1_ADDR                   0x000000dc
#define SFLASH_BLESS_SY_BUMP1_MASK                   0x00000000

/** BLESS bump bit for LDO @multiple */
#define SFLASH_BLESS_LDO_ADDR                        0x000000de
#define SFLASH_BLESS_LDO_MASK                        0x00000000

/** CPUSS Wounding @multiple */
#define SFLASH_CPUSS_WOUNDING_ADDR                   0x00000140
#define SFLASH_CPUSS_WOUNDING_MASK                   0x00000000

/** Silicon ID @multiple */
#define SFLASH_SILICON_ID_ADDR                       0x00000144
#define SFLASH_SILICON_ID_MASK                       0x00000000

/** RAM Privileged Limit @multiple */
#define SFLASH_CPUSS_PRIV_RAM_ADDR                   0x00000148
#define SFLASH_CPUSS_PRIV_RAM_MASK                   0x000001ff
/** Indicates the limit where the privileged area of SRAM starts in increments of
   256 Bytes. @multiple */
  #define SFLASH_CPUSS_PRIV_RAM_PROT_LIMIT(v)      ((v) << 0)
  #define SFLASH_CPUSS_PRIV_RAM_PROT_LIMIT_SET(x, v) do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define SFLASH_CPUSS_PRIV_RAM_PROT_LIMIT_GET(x)  (((x) >> 0) & 0x1ff)

/** Boot ROM Privileged Limit @multiple */
#define SFLASH_CPUSS_PRIV_ROM_BROM_ADDR              0x0000014a
#define SFLASH_CPUSS_PRIV_ROM_BROM_MASK              0x000000ff
/** Indicates the limit where the privileged area of the Boot ROM partition
   starts in increments of 256 Bytes. @multiple */
  #define SFLASH_CPUSS_PRIV_ROM_BROM_PROT_LIMIT(v) ((v) << 0)
  #define SFLASH_CPUSS_PRIV_ROM_BROM_PROT_LIMIT_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define SFLASH_CPUSS_PRIV_ROM_BROM_PROT_LIMIT_GET(x) (((x) >> 0) & 0xff)

/** Flash Privileged Limit @multiple */
#define SFLASH_CPUSS_PRIV_FLASH_ADDR                 0x0000014c
#define SFLASH_CPUSS_PRIV_FLASH_MASK                 0x000007ff
/** Indicates the limit where the privileged area of flash starts in increments
   of 256 Bytes. @multiple */
  #define SFLASH_CPUSS_PRIV_FLASH_PROT_LIMIT(v)    ((v) << 0)
  #define SFLASH_CPUSS_PRIV_FLASH_PROT_LIMIT_SET(x, v) do { (x) = (((x) & ~0x7ff) | ((v) << 0)); } while(0)
  #define SFLASH_CPUSS_PRIV_FLASH_PROT_LIMIT_GET(x) (((x) >> 0) & 0x7ff)

/** System ROM Privileged Limit @multiple */
#define SFLASH_CPUSS_PRIV_ROM_SROM_ADDR              0x0000014e
#define SFLASH_CPUSS_PRIV_ROM_SROM_MASK              0x000003ff
/** Indicates the limit where the privileged area of System ROM partition starts
   in increments of 256 @multiple */
  #define SFLASH_CPUSS_PRIV_ROM_SROM_PROT_LIMIT(v) ((v) << 0)
  #define SFLASH_CPUSS_PRIV_ROM_SROM_PROT_LIMIT_SET(x, v) do { (x) = (((x) & ~0x3ff) | ((v) << 0)); } while(0)
  #define SFLASH_CPUSS_PRIV_ROM_SROM_PROT_LIMIT_GET(x) (((x) >> 0) & 0x3ff)

/** Hibernate wakeup value for PWR_KEY_DELAY @multiple */
#define SFLASH_HIB_KEY_DELAY_ADDR                    0x00000150
#define SFLASH_HIB_KEY_DELAY_MASK                    0x000003ff
/** Delay (in 12MHz IMO clock cycles) to wait for references to settle on wakeup
   from hibernate/ deepsleep. PBOD is ignored and system does not resume until
   this delay expires. Note that the same delay on POR is hard-coded. @multiple
   */
  #define SFLASH_HIB_KEY_DELAY_WAKEUP_HOLDOFF(v)   ((v) << 0)
  #define SFLASH_HIB_KEY_DELAY_WAKEUP_HOLDOFF_SET(x, v) do { (x) = (((x) & ~0x3ff) | ((v) << 0)); } while(0)
  #define SFLASH_HIB_KEY_DELAY_WAKEUP_HOLDOFF_GET(x) (((x) >> 0) & 0x3ff)

/** DeepSleep wakeup value for PWR_KEY_DELAY @multiple */
#define SFLASH_DPSLP_KEY_DELAY_ADDR                  0x00000152
#define SFLASH_DPSLP_KEY_DELAY_MASK                  0x000003ff
/** Delay (in 12MHz IMO clock cycles) to wait for references to settle on wakeup
   from hibernate/ deepsleep. PBOD is ignored and system does not resume until
   this delay expires. Note that the same delay on POR is hard-coded. @multiple
   */
  #define SFLASH_DPSLP_KEY_DELAY_WAKEUP_HOLDOFF(v) ((v) << 0)
  #define SFLASH_DPSLP_KEY_DELAY_WAKEUP_HOLDOFF_SET(x, v) do { (x) = (((x) & ~0x3ff) | ((v) << 0)); } while(0)
  #define SFLASH_DPSLP_KEY_DELAY_WAKEUP_HOLDOFF_GET(x) (((x) >> 0) & 0x3ff)

/** SWD pinout selector (not present in TSG4/TSG5-M) @multiple */
#define SFLASH_SWD_CONFIG_ADDR                       0x00000154
#define SFLASH_SWD_CONFIG_MASK                       0x00000001
  #define SFLASH_SWD_CONFIG_SELECT(v)              ((SFLASH_SWD_CONFIG_SELECT_##v) << 0)
  #define SFLASH_SWD_CONFIG_SELECT_SET(x, v)       do { (x) = (((x) & ~0x1) | ((SFLASH_SWD_CONFIG_SELECT_##v) << 0)); } while(0)
  #define SFLASH_SWD_CONFIG_SELECT_SETVAL(x, v)    do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define SFLASH_SWD_CONFIG_SELECT_GET(x)          (((x) >> 0) & 0x1)
/** Use Primary SWD location */
    #define SFLASH_SWD_CONFIG_SELECT_PRIMARY         0x00000000
/** Use Alternate SWD location */
    #define SFLASH_SWD_CONFIG_SELECT_ALTERNATE       0x00000001

/** FLASH IDAC trim used during boot @multiple */
#define SFLASH_INITIAL_SPCIF_TRIM_M1_DAC0_ADDR       0x00000155
#define SFLASH_INITIAL_SPCIF_TRIM_M1_DAC0_MASK       0x000000ff
/** See SPCIF_TRIM1 @multiple */
  #define SFLASH_INITIAL_SPCIF_TRIM_M1_DAC0_IDAC(v) ((v) << 0)
  #define SFLASH_INITIAL_SPCIF_TRIM_M1_DAC0_IDAC_SET(x, v) do { (x) = (((x) & ~0x1f) | ((v) << 0)); } while(0)
  #define SFLASH_INITIAL_SPCIF_TRIM_M1_DAC0_IDAC_GET(x) (((x) >> 0) & 0x1f)
/** See SPCIF_TRIM1 @multiple */
  #define SFLASH_INITIAL_SPCIF_TRIM_M1_DAC0_SLOPE(v) ((v) << 5)
  #define SFLASH_INITIAL_SPCIF_TRIM_M1_DAC0_SLOPE_SET(x, v) do { (x) = (((x) & ~0xe0) | ((v) << 5)); } while(0)
  #define SFLASH_INITIAL_SPCIF_TRIM_M1_DAC0_SLOPE_GET(x) (((x) >> 5) & 0x7)

/** Listen Window Length @multiple */
#define SFLASH_SWD_LISTEN_ADDR                       0x00000158
#define SFLASH_SWD_LISTEN_MASK                       0xffffffff
/** Number of clock cycles @multiple */
  #define SFLASH_SWD_LISTEN_CYCLES(v)              ((v) << 0)
  #define SFLASH_SWD_LISTEN_CYCLES_SET(x, v)       do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define SFLASH_SWD_LISTEN_CYCLES_GET(x)          (((x) >> 0) & 0xffffffff)

/** Flash Image Start Address @multiple */
#define SFLASH_FLASH_START_ADDR                      0x0000015c
#define SFLASH_FLASH_START_MASK                      0xffffffff
/** Start Address @multiple */
  #define SFLASH_FLASH_START_ADDRESS(v)            ((v) << 0)
  #define SFLASH_FLASH_START_ADDRESS_SET(x, v)     do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define SFLASH_FLASH_START_ADDRESS_GET(x)        (((x) >> 0) & 0xffffffff)

/** CSD Trim Data for HVIDAC operation @multiple */
#define SFLASH_CSD_TRIM1_HVIDAC_ADDR                 0x00000160
#define SFLASH_CSD_TRIM1_HVIDAC_MASK                 0x000000ff
/** Trim data @multiple */
  #define SFLASH_CSD_TRIM1_HVIDAC_TRIM8(v)         ((v) << 0)
  #define SFLASH_CSD_TRIM1_HVIDAC_TRIM8_SET(x, v)  do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define SFLASH_CSD_TRIM1_HVIDAC_TRIM8_GET(x)     (((x) >> 0) & 0xff)

/** CSD Trim Data for HVIDAC operation @multiple */
#define SFLASH_CSD_TRIM2_HVIDAC_ADDR                 0x00000161
#define SFLASH_CSD_TRIM2_HVIDAC_MASK                 0x000000ff
/** Trim data @multiple */
  #define SFLASH_CSD_TRIM2_HVIDAC_TRIM8(v)         ((v) << 0)
  #define SFLASH_CSD_TRIM2_HVIDAC_TRIM8_SET(x, v)  do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define SFLASH_CSD_TRIM2_HVIDAC_TRIM8_GET(x)     (((x) >> 0) & 0xff)

/** CSD Trim Data for (normal) CSD operation @multiple */
#define SFLASH_CSD_TRIM1_CSD_ADDR                    0x00000162
#define SFLASH_CSD_TRIM1_CSD_MASK                    0x000000ff
/** Trim data @multiple */
  #define SFLASH_CSD_TRIM1_CSD_TRIM8(v)            ((v) << 0)
  #define SFLASH_CSD_TRIM1_CSD_TRIM8_SET(x, v)     do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define SFLASH_CSD_TRIM1_CSD_TRIM8_GET(x)        (((x) >> 0) & 0xff)

/** CSD Trim Data for (normal) CSD operation @multiple */
#define SFLASH_CSD_TRIM2_CSD_ADDR                    0x00000163
#define SFLASH_CSD_TRIM2_CSD_MASK                    0x000000ff
/** Trim data @multiple */
  #define SFLASH_CSD_TRIM2_CSD_TRIM8(v)            ((v) << 0)
  #define SFLASH_CSD_TRIM2_CSD_TRIM8_SET(x, v)     do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define SFLASH_CSD_TRIM2_CSD_TRIM8_GET(x)        (((x) >> 0) & 0xff)

/** SAR Temperature Sensor Multiplication Factor @multiple */
#define SFLASH_SAR_TEMP_MULTIPLIER_ADDR              0x00000164
#define SFLASH_SAR_TEMP_MULTIPLIER_MASK              0x0000ffff
/** Multiplier value for SAR temperature sensor in fixed point 0.16 format. Note:
   this field exists in products that contain SAR (m0s8sar) only. @multiple */
  #define SFLASH_SAR_TEMP_MULTIPLIER_TEMP_MULTIPLIER(v) ((v) << 0)
  #define SFLASH_SAR_TEMP_MULTIPLIER_TEMP_MULTIPLIER_SET(x, v) do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define SFLASH_SAR_TEMP_MULTIPLIER_TEMP_MULTIPLIER_GET(x) (((x) >> 0) & 0xffff)

/** SAR Temperature Sensor Offset @multiple */
#define SFLASH_SAR_TEMP_OFFSET_ADDR                  0x00000166
#define SFLASH_SAR_TEMP_OFFSET_MASK                  0x0000ffff
/** Offset value for SAR temperature sensor in fixed point 10.6 format. Note:
   this field exists in prod- ucts that contain SAR (m0s8sar) only. @multiple */
  #define SFLASH_SAR_TEMP_OFFSET_TEMP_OFFSET(v)    ((v) << 0)
  #define SFLASH_SAR_TEMP_OFFSET_TEMP_OFFSET_SET(x, v) do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define SFLASH_SAR_TEMP_OFFSET_TEMP_OFFSET_GET(x) (((x) >> 0) & 0xffff)

/** Checksum Skip Option @multiple */
#define SFLASH_SKIP_CHECKSUM_ADDR                    0x00000169
#define SFLASH_SKIP_CHECKSUM_MASK                    0x000000ff
  #define SFLASH_SKIP_CHECKSUM_SKIP(v)             ((SFLASH_SKIP_CHECKSUM_SKIP_##v) << 0)
  #define SFLASH_SKIP_CHECKSUM_SKIP_SET(x, v)      do { (x) = (((x) & ~0xff) | ((SFLASH_SKIP_CHECKSUM_SKIP_##v) << 0)); } while(0)
  #define SFLASH_SKIP_CHECKSUM_SKIP_SETVAL(x, v)   do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define SFLASH_SKIP_CHECKSUM_SKIP_GET(x)         (((x) >> 0) & 0xff)
/** Perform checksum check */
    #define SFLASH_SKIP_CHECKSUM_SKIP_PERFORM        0x00000000
/** Skip checksum check */
    #define SFLASH_SKIP_CHECKSUM_SKIP_SKIP           0x00000001

/** Virgin Protection Mode Key @multiple */
#define SFLASH_PROT_VIRGINKEY_ADDR(ridx)             (0x00000170 + (ridx))
#define SFLASH_PROT_VIRGINKEY_COUNT                  8
#define SFLASH_PROT_VIRGINKEY_MASK                   0x00000000

/** Lot Number @multiple */
#define SFLASH_DIE_LOT_ADDR(ridx)                    (0x00000178 + (ridx))
#define SFLASH_DIE_LOT_COUNT                         3
#define SFLASH_DIE_LOT_MASK                          0x00000000

/** Wafer Number @multiple */
#define SFLASH_DIE_WAFER_ADDR                        0x0000017b
#define SFLASH_DIE_WAFER_MASK                        0x000000ff
/** Wafer Number @multiple */
  #define SFLASH_DIE_WAFER_WAFER(v)                ((v) << 0)
  #define SFLASH_DIE_WAFER_WAFER_SET(x, v)         do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define SFLASH_DIE_WAFER_WAFER_GET(x)            (((x) >> 0) & 0xff)

/** X Position on Wafer, CRI Pass/Fail Bin @multiple */
#define SFLASH_DIE_X_ADDR                            0x0000017c
#define SFLASH_DIE_X_MASK                            0x00000000

/** Y Position on Wafer, CHI Pass/Fail Bin @multiple */
#define SFLASH_DIE_Y_ADDR                            0x0000017d
#define SFLASH_DIE_Y_MASK                            0x00000000

/** Sort1/2/3 Pass/Fail Bin @multiple */
#define SFLASH_DIE_SORT_ADDR                         0x0000017e
#define SFLASH_DIE_SORT_MASK                         0x0000003f
/** SORT1 Pass @multiple */
  #define SFLASH_DIE_SORT_S1_PASS                  0x01
/** SORT2 Pass @multiple */
  #define SFLASH_DIE_SORT_S2_PASS                  0x02
/** SORT3 Pass @multiple */
  #define SFLASH_DIE_SORT_S3_PASS                  0x04
/** CRI Pass @multiple */
  #define SFLASH_DIE_SORT_CRI_PASS                 0x08
/** CHI Pass @multiple */
  #define SFLASH_DIE_SORT_CHI_PASS                 0x10
/** ENG Pass @multiple */
  #define SFLASH_DIE_SORT_ENG_PASS                 0x20

/** Minor Revision Number @multiple */
#define SFLASH_DIE_MINOR_ADDR                        0x0000017f
#define SFLASH_DIE_MINOR_MASK                        0x00000000

/** PE/TE Data @multiple */
#define SFLASH_PE_TE_DATA_ADDR(ridx)                 (0x00000180 + (ridx))
#define SFLASH_PE_TE_DATA_COUNT                      32
#define SFLASH_PE_TE_DATA_MASK                       0x00000000

/** Preprogram Settings @multiple */
#define SFLASH_PP_ADDR                               0x000001a0
#define SFLASH_PP_MASK                               0xffffffff
/** Period of timer in clk_spcif_timer ticks. For regular FLASH, clock is 36MHz
   from dedicated oscillator. For FLASH-Lite, clock is same as clk_hf, which must
   be set to 48MHz for 48MHz devices and 12MHz for max 16MHz devices @multiple */
  #define SFLASH_PP_PERIOD(v)                      ((v) << 0)
  #define SFLASH_PP_PERIOD_SET(x, v)               do { (x) = (((x) & ~0xffffff) | ((v) << 0)); } while(0)
  #define SFLASH_PP_PERIOD_GET(x)                  (((x) >> 0) & 0xffffff)
/** PDAC input. Each increment in PDAC causes an increase of ~0.10V in VPOS
   @multiple */
  #define SFLASH_PP_PDAC(v)                        ((v) << 24)
  #define SFLASH_PP_PDAC_SET(x, v)                 do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define SFLASH_PP_PDAC_GET(x)                    (((x) >> 24) & 0xf)
/** NDAC input. Each increment in NDAC causes an increase of ~0.10V in VNEG
   @multiple */
  #define SFLASH_PP_NDAC(v)                        ((v) << 28)
  #define SFLASH_PP_NDAC_SET(x, v)                 do { (x) = (((x) & ~0xf0000000) | ((v) << 28)); } while(0)
  #define SFLASH_PP_NDAC_GET(x)                    (((x) >> 28) & 0xf)

/** Erase Settings @multiple */
#define SFLASH_E_ADDR                                0x000001a4
#define SFLASH_E_MASK                                0xffffffff
/** Period of timer in clk_spcif_timer ticks. For regular FLASH, clock is 36MHz
   from dedicated oscillator. For FLASH-Lite, clock is same as clk_hf, which must
   be set to 48MHz for 48MHz devices and 12MHz for max 16MHz devices @multiple */
  #define SFLASH_E_PERIOD(v)                       ((v) << 0)
  #define SFLASH_E_PERIOD_SET(x, v)                do { (x) = (((x) & ~0xffffff) | ((v) << 0)); } while(0)
  #define SFLASH_E_PERIOD_GET(x)                   (((x) >> 0) & 0xffffff)
/** PDAC input. Each increment in PDAC causes an increase of ~0.10V in VPOS
   @multiple */
  #define SFLASH_E_PDAC(v)                         ((v) << 24)
  #define SFLASH_E_PDAC_SET(x, v)                  do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define SFLASH_E_PDAC_GET(x)                     (((x) >> 24) & 0xf)
/** NDAC input. Each increment in NDAC causes an increase of ~0.10V in VNEG
   @multiple */
  #define SFLASH_E_NDAC(v)                         ((v) << 28)
  #define SFLASH_E_NDAC_SET(x, v)                  do { (x) = (((x) & ~0xf0000000) | ((v) << 28)); } while(0)
  #define SFLASH_E_NDAC_GET(x)                     (((x) >> 28) & 0xf)

/** Program Settings @multiple */
#define SFLASH_P_ADDR                                0x000001a8
#define SFLASH_P_MASK                                0xffffffff
/** Period of timer in clk_spcif_timer ticks. For regular FLASH, clock is 36MHz
   from dedicated oscillator. For FLASH-Lite, clock is same as clk_hf, which must
   be set to 48MHz for 48MHz devices and 12MHz for max 16MHz devices @multiple */
  #define SFLASH_P_PERIOD(v)                       ((v) << 0)
  #define SFLASH_P_PERIOD_SET(x, v)                do { (x) = (((x) & ~0xffffff) | ((v) << 0)); } while(0)
  #define SFLASH_P_PERIOD_GET(x)                   (((x) >> 0) & 0xffffff)
/** PDAC input. Each increment in PDAC causes an increase of ~0.10V in VPOS
   @multiple */
  #define SFLASH_P_PDAC(v)                         ((v) << 24)
  #define SFLASH_P_PDAC_SET(x, v)                  do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define SFLASH_P_PDAC_GET(x)                     (((x) >> 24) & 0xf)
/** NDAC input. Each increment in NDAC causes an increase of ~0.10V in VNEG
   @multiple */
  #define SFLASH_P_NDAC(v)                         ((v) << 28)
  #define SFLASH_P_NDAC_SET(x, v)                  do { (x) = (((x) & ~0xf0000000) | ((v) << 28)); } while(0)
  #define SFLASH_P_NDAC_GET(x)                     (((x) >> 28) & 0xf)

/** Erase All - Erase Settings @multiple */
#define SFLASH_EA_E_ADDR                             0x000001ac
#define SFLASH_EA_E_MASK                             0xffffffff
/** Period of timer in clk_spcif_timer ticks. For regular FLASH, clock is 36MHz
   from dedicated oscillator. For FLASH-Lite, clock is same as clk_hf, which must
   be set to 48MHz for 48MHz devices and 12MHz for max 16MHz devices @multiple */
  #define SFLASH_EA_E_PERIOD(v)                    ((v) << 0)
  #define SFLASH_EA_E_PERIOD_SET(x, v)             do { (x) = (((x) & ~0xffffff) | ((v) << 0)); } while(0)
  #define SFLASH_EA_E_PERIOD_GET(x)                (((x) >> 0) & 0xffffff)
/** PDAC input. Each increment in PDAC causes an increase of ~0.10V in VPOS
   @multiple */
  #define SFLASH_EA_E_PDAC(v)                      ((v) << 24)
  #define SFLASH_EA_E_PDAC_SET(x, v)               do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define SFLASH_EA_E_PDAC_GET(x)                  (((x) >> 24) & 0xf)
/** NDAC input. Each increment in NDAC causes an increase of ~0.10V in VNEG
   @multiple */
  #define SFLASH_EA_E_NDAC(v)                      ((v) << 28)
  #define SFLASH_EA_E_NDAC_SET(x, v)               do { (x) = (((x) & ~0xf0000000) | ((v) << 28)); } while(0)
  #define SFLASH_EA_E_NDAC_GET(x)                  (((x) >> 28) & 0xf)

/** Erase All - Program Settings @multiple */
#define SFLASH_EA_P_ADDR                             0x000001b0
#define SFLASH_EA_P_MASK                             0xffffffff
/** Period of timer in clk_spcif_timer ticks. For regular FLASH, clock is 36MHz
   from dedicated oscillator. For FLASH-Lite, clock is same as clk_hf, which must
   be set to 48MHz for 48MHz devices and 12MHz for max 16MHz devices @multiple */
  #define SFLASH_EA_P_PERIOD(v)                    ((v) << 0)
  #define SFLASH_EA_P_PERIOD_SET(x, v)             do { (x) = (((x) & ~0xffffff) | ((v) << 0)); } while(0)
  #define SFLASH_EA_P_PERIOD_GET(x)                (((x) >> 0) & 0xffffff)
/** PDAC input. Each increment in PDAC causes an increase of ~0.10V in VPOS
   @multiple */
  #define SFLASH_EA_P_PDAC(v)                      ((v) << 24)
  #define SFLASH_EA_P_PDAC_SET(x, v)               do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define SFLASH_EA_P_PDAC_GET(x)                  (((x) >> 24) & 0xf)
/** NDAC input. Each increment in NDAC causes an increase of ~0.10V in VNEG
   @multiple */
  #define SFLASH_EA_P_NDAC(v)                      ((v) << 28)
  #define SFLASH_EA_P_NDAC_SET(x, v)               do { (x) = (((x) & ~0xf0000000) | ((v) << 28)); } while(0)
  #define SFLASH_EA_P_NDAC_GET(x)                  (((x) >> 28) & 0xf)

/** Erase Sector - Erase Settings @multiple */
#define SFLASH_ES_E_ADDR                             0x000001b4
#define SFLASH_ES_E_MASK                             0xffffffff
/** Period of timer in clk_spcif_timer ticks. For regular FLASH, clock is 36MHz
   from dedicated oscillator. For FLASH-Lite, clock is same as clk_hf, which must
   be set to 48MHz for 48MHz devices and 12MHz for max 16MHz devices @multiple */
  #define SFLASH_ES_E_PERIOD(v)                    ((v) << 0)
  #define SFLASH_ES_E_PERIOD_SET(x, v)             do { (x) = (((x) & ~0xffffff) | ((v) << 0)); } while(0)
  #define SFLASH_ES_E_PERIOD_GET(x)                (((x) >> 0) & 0xffffff)
/** PDAC input. Each increment in PDAC causes an increase of ~0.10V in VPOS
   @multiple */
  #define SFLASH_ES_E_PDAC(v)                      ((v) << 24)
  #define SFLASH_ES_E_PDAC_SET(x, v)               do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define SFLASH_ES_E_PDAC_GET(x)                  (((x) >> 24) & 0xf)
/** NDAC input. Each increment in NDAC causes an increase of ~0.10V in VNEG
   @multiple */
  #define SFLASH_ES_E_NDAC(v)                      ((v) << 28)
  #define SFLASH_ES_E_NDAC_SET(x, v)               do { (x) = (((x) & ~0xf0000000) | ((v) << 28)); } while(0)
  #define SFLASH_ES_E_NDAC_GET(x)                  (((x) >> 28) & 0xf)

/** Erase Sector - Program EO Settings @multiple */
#define SFLASH_ES_P_EO_ADDR                          0x000001b8
#define SFLASH_ES_P_EO_MASK                          0xffffffff
/** Period of timer in clk_spcif_timer ticks. For regular FLASH, clock is 36MHz
   from dedicated oscillator. For FLASH-Lite, clock is same as clk_hf, which must
   be set to 48MHz for 48MHz devices and 12MHz for max 16MHz devices @multiple */
  #define SFLASH_ES_P_EO_PERIOD(v)                 ((v) << 0)
  #define SFLASH_ES_P_EO_PERIOD_SET(x, v)          do { (x) = (((x) & ~0xffffff) | ((v) << 0)); } while(0)
  #define SFLASH_ES_P_EO_PERIOD_GET(x)             (((x) >> 0) & 0xffffff)
/** PDAC input. Each increment in PDAC causes an increase of ~0.10V in VPOS
   @multiple */
  #define SFLASH_ES_P_EO_PDAC(v)                   ((v) << 24)
  #define SFLASH_ES_P_EO_PDAC_SET(x, v)            do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define SFLASH_ES_P_EO_PDAC_GET(x)               (((x) >> 24) & 0xf)
/** NDAC input. Each increment in NDAC causes an increase of ~0.10V in VNEG
   @multiple */
  #define SFLASH_ES_P_EO_NDAC(v)                   ((v) << 28)
  #define SFLASH_ES_P_EO_NDAC_SET(x, v)            do { (x) = (((x) & ~0xf0000000) | ((v) << 28)); } while(0)
  #define SFLASH_ES_P_EO_NDAC_GET(x)               (((x) >> 28) & 0xf)

/** Bandgap Trim @multiple */
#define SFLASH_E_VCTAT_ADDR                          0x000001bc
#define SFLASH_E_VCTAT_MASK                          0x0000007f
/** Output slope setting controls. The slope of the voltage with temperature
   varies from ~0% to ~15% from the value at 55C over the temperature range -40C
   to 150C based on control signal settings 0 to 15 @multiple */
  #define SFLASH_E_VCTAT_VCTAT_SLOPE(v)            ((v) << 0)
  #define SFLASH_E_VCTAT_VCTAT_SLOPE_SET(x, v)     do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define SFLASH_E_VCTAT_VCTAT_SLOPE_GET(x)        (((x) >> 0) & 0xf)
/** Output voltage absolute trim @multiple */
  #define SFLASH_E_VCTAT_VCTAT_VOLTAGE(v)          ((v) << 4)
  #define SFLASH_E_VCTAT_VCTAT_VOLTAGE_SET(x, v)   do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define SFLASH_E_VCTAT_VCTAT_VOLTAGE_GET(x)      (((x) >> 4) & 0x3)
/** Enable VCTAT block @multiple */
  #define SFLASH_E_VCTAT_VCTAT_ENABLE              0x40

/** Bandgap Trim @multiple */
#define SFLASH_P_VCTAT_ADDR                          0x000001bd
#define SFLASH_P_VCTAT_MASK                          0x0000007f
/** Output slope setting controls. The slope of the voltage with temperature
   varies from ~0% to ~15% from the value at 55C over the temperature range -40C
   to 150C based on control signal settings 0 to 15 @multiple */
  #define SFLASH_P_VCTAT_VCTAT_SLOPE(v)            ((v) << 0)
  #define SFLASH_P_VCTAT_VCTAT_SLOPE_SET(x, v)     do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define SFLASH_P_VCTAT_VCTAT_SLOPE_GET(x)        (((x) >> 0) & 0xf)
/** Output voltage absolute trim @multiple */
  #define SFLASH_P_VCTAT_VCTAT_VOLTAGE(v)          ((v) << 4)
  #define SFLASH_P_VCTAT_VCTAT_VOLTAGE_SET(x, v)   do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define SFLASH_P_VCTAT_VCTAT_VOLTAGE_GET(x)      (((x) >> 4) & 0x3)
/** Enable VCTAT block @multiple */
  #define SFLASH_P_VCTAT_VCTAT_ENABLE              0x40

/** Max frequency for trim pair @multiple */
#define SFLASH_IMO_MAXF_ADDR(ridx)                   (0x000001c0 + (ridx) * 3)
#define SFLASH_IMO_MAXF_COUNT                        4
#define SFLASH_IMO_MAXF_MASK                         0x00000000

/** Value for PWR_BG_TRIM4 (ICTAT trim for IMO current reference). @multiple */
#define SFLASH_IMO_ABS_ADDR(ridx)                    (0x000001c1 + (ridx) * 3)
#define SFLASH_IMO_ABS_COUNT                         4
#define SFLASH_IMO_ABS_MASK                          0x00000000

/** Value for PWR_BG_TRIM5 (ICTAT tempco for IMO current reference). @multiple */
#define SFLASH_IMO_TMPCO_ADDR(ridx)                  (0x000001c2 + (ridx) * 3)
#define SFLASH_IMO_TMPCO_COUNT                       4
#define SFLASH_IMO_TMPCO_MASK                        0x00000000

/** Value for PWR_BG_TRIM4 (ICTAT trim for IMO current reference). @multiple */
#define SFLASH_IMO_ABS4_ADDR                         0x000001cc
#define SFLASH_IMO_ABS4_MASK                         0x0000003f
/** IMO-irefgen output current magnitude trim @multiple */
  #define SFLASH_IMO_ABS4_ABS_TRIM_IMO(v)          ((v) << 0)
  #define SFLASH_IMO_ABS4_ABS_TRIM_IMO_SET(x, v)   do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define SFLASH_IMO_ABS4_ABS_TRIM_IMO_GET(x)      (((x) >> 0) & 0x3f)

/** Value for PWR_BG_TRIM5 (ICTAT tempco for IMO current reference). @multiple */
#define SFLASH_IMO_TMPCO4_ADDR                       0x000001cd
#define SFLASH_IMO_TMPCO4_MASK                       0x0000003f
/** IMO-irefgen output current temperature co-efficient trim @multiple */
  #define SFLASH_IMO_TMPCO4_TMPCO_TRIM_IMO(v)      ((v) << 0)
  #define SFLASH_IMO_TMPCO4_TMPCO_TRIM_IMO_SET(x, v) do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define SFLASH_IMO_TMPCO4_TMPCO_TRIM_IMO_GET(x)  (((x) >> 0) & 0x3f)

/** IMO Trim @multiple */
#define SFLASH_IMO_TRIM_ADDR(ridx)                   (0x000001d0 + (ridx))
#define SFLASH_IMO_TRIM_COUNT                        46
#define SFLASH_IMO_TRIM_MASK                         0x00000000

/** Boot Checksum @multiple */
#define SFLASH_CHECKSUM_ADDR                         0x000001fe
#define SFLASH_CHECKSUM_MASK                         0x0000ffff
/** Checksum of fixed data checked during boot. This checksum covers all of rows
   1,2,3 of macro 0 + row 3 of macro 1 (except this checksum, and row 3 of macro
   1 only if it exists). @multiple */
  #define SFLASH_CHECKSUM_CHECKSUM(v)              ((v) << 0)
  #define SFLASH_CHECKSUM_CHECKSUM_SET(x, v)       do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define SFLASH_CHECKSUM_CHECKSUM_GET(x)          (((x) >> 0) & 0xffff)

#endif

