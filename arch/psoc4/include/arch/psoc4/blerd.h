/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -I blerd.bf -O blerd.h -o cdefs cdefs_use_reg_mask=1                  \
     cdefs_use_field_setval=1
*/

#ifndef _BLERD_BFGEN_DEFS_
#define _BLERD_BFGEN_DEFS_

#define BLERD_CFG1_ADDR                              0x00000000
#define BLERD_CFG1_MASK                              0x0000ffff
/** Invert demodulation receiving data @multiple */
  #define BLERD_CFG1_RX_DATA_INVERSE               0x0001
/** Invert modulation transmit data @multiple */
  #define BLERD_CFG1_TX_DATA_INVERSE               0x0002
/** Disable AGC, the LNA+TIA and CBPF gains are given based CFG1.CBPF_GAIN and
   CFG1.LNA_GAIN @multiple */
  #define BLERD_CFG1_AGC_DISABLE                   0x0004
/** program channel freqency as direct frequency mode. high active. When
   RF_PLL_DIRECT = 1, RF = reg0x10[11:0] Mhz. When RF_PLL_DIRECT = 0, RF = 2402 +
   2*reg7[5:0] Mhz. @multiple */
  #define BLERD_CFG1_RF_PLL_DIRECT                 0x0008
/** Whether to disable clock gating globally @multiple */
  #define BLERD_CFG1_CLKGATING_DISABLE             0x0010
/** Enable brclk output @multiple */
  #define BLERD_CFG1_EN_BR_CLK                     0x0020
/** Swap ADC I, Q path @multiple */
  #define BLERD_CFG1_ADC_IQ_INVERSE                0x0040
/** ramp to PA gain steps (from min gain) in TXPA_GAIN @multiple */
  #define BLERD_CFG1_TX_PA_RAMP_MODE(v)            ((BLERD_CFG1_TX_PA_RAMP_MODE_##v) << 7)
  #define BLERD_CFG1_TX_PA_RAMP_MODE_SET(x, v)     do { (x) = (((x) & ~0x80) | ((BLERD_CFG1_TX_PA_RAMP_MODE_##v) << 7)); } while(0)
  #define BLERD_CFG1_TX_PA_RAMP_MODE_SETVAL(x, v)  do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define BLERD_CFG1_TX_PA_RAMP_MODE_GET(x)        (((x) >> 7) & 0x1)
    #define BLERD_CFG1_TX_PA_RAMP_MODE_1DB_STEPS     0x00000000
    #define BLERD_CFG1_TX_PA_RAMP_MODE_2DB_STEPS     0x00000001
/** radio standalone without link layer controller in SoC, Tx command from
   reg0x10[13] and RX command from reg0x10[12] @multiple */
  #define BLERD_CFG1_RADIO_STANDALONE              0x0100
/** ADC DC capture enable @multiple */
  #define BLERD_CFG1_ADC_DC_CAPTURE_EN             0x0200
/** burn in function mode @multiple */
  #define BLERD_CFG1_BURNIN_CLK_EN(v)              ((BLERD_CFG1_BURNIN_CLK_EN_##v) << 10)
  #define BLERD_CFG1_BURNIN_CLK_EN_SET(x, v)       do { (x) = (((x) & ~0x400) | ((BLERD_CFG1_BURNIN_CLK_EN_##v) << 10)); } while(0)
  #define BLERD_CFG1_BURNIN_CLK_EN_SETVAL(x, v)    do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define BLERD_CFG1_BURNIN_CLK_EN_GET(x)          (((x) >> 10) & 0x1)
/** digital main clock from HardIP */
    #define BLERD_CFG1_BURNIN_CLK_EN_HARDIP          0x00000000
/** digital main clock from clk_core */
    #define BLERD_CFG1_BURNIN_CLK_EN_CLK_CORE        0x00000001
/** CBPF manually gain setting when AGC is disabled by asserting bit[2]. This
   gain is truly reflective of the voltage gain across the CBPF and is determined
   by the ratio of resisters @multiple */
  #define BLERD_CFG1_CBPF_GAIN(v)                  ((BLERD_CFG1_CBPF_GAIN_##v) << 11)
  #define BLERD_CFG1_CBPF_GAIN_SET(x, v)           do { (x) = (((x) & ~0x1800) | ((BLERD_CFG1_CBPF_GAIN_##v) << 11)); } while(0)
  #define BLERD_CFG1_CBPF_GAIN_SETVAL(x, v)        do { (x) = (((x) & ~0x1800) | ((v) << 11)); } while(0)
  #define BLERD_CFG1_CBPF_GAIN_GET(x)              (((x) >> 11) & 0x3)
    #define BLERD_CFG1_CBPF_GAIN_0DB                 0x00000000
    #define BLERD_CFG1_CBPF_GAIN_3DB                 0x00000001
    #define BLERD_CFG1_CBPF_GAIN_12DB                0x00000002
    #define BLERD_CFG1_CBPF_GAIN_15DB                0x00000003
/** LNA+TIA manually gain setting when AGC is disabled by asserting bit[2]. The
   gain obtained is a funcion of the LNA gm as well as the TIA feedback resister.
   @multiple */
  #define BLERD_CFG1_LNA_GAIN(v)                   ((BLERD_CFG1_LNA_GAIN_##v) << 13)
  #define BLERD_CFG1_LNA_GAIN_SET(x, v)            do { (x) = (((x) & ~0xe000) | ((BLERD_CFG1_LNA_GAIN_##v) << 13)); } while(0)
  #define BLERD_CFG1_LNA_GAIN_SETVAL(x, v)         do { (x) = (((x) & ~0xe000) | ((v) << 13)); } while(0)
  #define BLERD_CFG1_LNA_GAIN_GET(x)               (((x) >> 13) & 0x7)
    #define BLERD_CFG1_LNA_GAIN_VLG                  0x00000000
    #define BLERD_CFG1_LNA_GAIN_LG                   0x00000001
    #define BLERD_CFG1_LNA_GAIN_MH                   0x00000002
    #define BLERD_CFG1_LNA_GAIN_IHG                  0x00000003
    #define BLERD_CFG1_LNA_GAIN_HG                   0x00000004
    #define BLERD_CFG1_LNA_GAIN_VHG                  0x00000005

#define BLERD_CFG2_ADDR                              0x00000004
#define BLERD_CFG2_MASK                              0x00009fff
/** DAC input from this register when CFG2.DAC_DFT_EN = 1 and CFG2.DAC_DFT_MODE =
   0 @multiple */
  #define BLERD_CFG2_DAC_REG_DATA(v)               ((v) << 0)
  #define BLERD_CFG2_DAC_REG_DATA_SET(x, v)        do { (x) = (((x) & ~0x3ff) | ((v) << 0)); } while(0)
  #define BLERD_CFG2_DAC_REG_DATA_GET(x)           (((x) >> 0) & 0x3ff)
/** DAC DFT input mode definition @multiple */
  #define BLERD_CFG2_DAC_DFT_MODE(v)               ((BLERD_CFG2_DAC_DFT_MODE_##v) << 10)
  #define BLERD_CFG2_DAC_DFT_MODE_SET(x, v)        do { (x) = (((x) & ~0xc00) | ((BLERD_CFG2_DAC_DFT_MODE_##v) << 10)); } while(0)
  #define BLERD_CFG2_DAC_DFT_MODE_SETVAL(x, v)     do { (x) = (((x) & ~0xc00) | ((v) << 10)); } while(0)
  #define BLERD_CFG2_DAC_DFT_MODE_GET(x)           (((x) >> 10) & 0x3)
/** DAC input from CFG2.DAC_REG_DATA */
    #define BLERD_CFG2_DAC_DFT_MODE_DAC_REG_DATA     0x00000000
/** DAC input as 12Mhz increased value */
    #define BLERD_CFG2_DAC_DFT_MODE_12MHZ_INCREASED_VALUE 0x00000001
/** DAC input as 1MHz Sine Wave */
    #define BLERD_CFG2_DAC_DFT_MODE_1MHZ_SINE_WAVE   0x00000002
/** DAC input as 4MHz SIN wave */
    #define BLERD_CFG2_DAC_DFT_MODE_4MHZ_SIN_WAVE    0x00000003
/** DAC DFT mode enable @multiple */
  #define BLERD_CFG2_DAC_DFT_EN                    0x1000
/** ADC DFT enable @multiple */
  #define BLERD_CFG2_ADC_DFT_EN                    0x8000

#define BLERD_MODEM_ADDR                             0x00000008
#define BLERD_MODEM_MASK                             0x0000ffff
/** Set alpha value for DC offset tracking speed in narrow mode @multiple */
  #define BLERD_MODEM_NARROW_SPD(v)                ((BLERD_MODEM_NARROW_SPD_##v) << 0)
  #define BLERD_MODEM_NARROW_SPD_SET(x, v)         do { (x) = (((x) & ~0x3) | ((BLERD_MODEM_NARROW_SPD_##v) << 0)); } while(0)
  #define BLERD_MODEM_NARROW_SPD_SETVAL(x, v)      do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define BLERD_MODEM_NARROW_SPD_GET(x)            (((x) >> 0) & 0x3)
/** dc value times 1 */
    #define BLERD_MODEM_NARROW_SPD_TIMES_1           0x00000000
/** dc value times 2 */
    #define BLERD_MODEM_NARROW_SPD_TIMES_2           0x00000001
/** dc value times 3 */
    #define BLERD_MODEM_NARROW_SPD_TIMES_3           0x00000002
/** dc value times 4 */
    #define BLERD_MODEM_NARROW_SPD_TIMES_4           0x00000003
/** Demodulation alpha value for DC offset tracking in wide speed @multiple */
  #define BLERD_MODEM_WIDE_SPD(v)                  ((BLERD_MODEM_WIDE_SPD_##v) << 2)
  #define BLERD_MODEM_WIDE_SPD_SET(x, v)           do { (x) = (((x) & ~0xc) | ((BLERD_MODEM_WIDE_SPD_##v) << 2)); } while(0)
  #define BLERD_MODEM_WIDE_SPD_SETVAL(x, v)        do { (x) = (((x) & ~0xc) | ((v) << 2)); } while(0)
  #define BLERD_MODEM_WIDE_SPD_GET(x)              (((x) >> 2) & 0x3)
/** dc value times 8 */
    #define BLERD_MODEM_WIDE_SPD_TIMES_8             0x00000000
/** dc value times 10 */
    #define BLERD_MODEM_WIDE_SPD_TIMES_10            0x00000001
/** dc value times 12 */
    #define BLERD_MODEM_WIDE_SPD_TIMES_12            0x00000002
/** dc value times 14 */
    #define BLERD_MODEM_WIDE_SPD_TIMES_14            0x00000003
/** Soft reset condition selection @multiple */
  #define BLERD_MODEM_RST_CNT2_SEL(v)              ((BLERD_MODEM_RST_CNT2_SEL_##v) << 4)
  #define BLERD_MODEM_RST_CNT2_SEL_SET(x, v)       do { (x) = (((x) & ~0x10) | ((BLERD_MODEM_RST_CNT2_SEL_##v) << 4)); } while(0)
  #define BLERD_MODEM_RST_CNT2_SEL_SETVAL(x, v)    do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define BLERD_MODEM_RST_CNT2_SEL_GET(x)          (((x) >> 4) & 0x1)
/** 32 bits all '0'/'1' */
    #define BLERD_MODEM_RST_CNT2_SEL_32BITS          0x00000000
/** 16 bits all '0'/'1' */
    #define BLERD_MODEM_RST_CNT2_SEL_16BITS          0x00000001
/** Demodulation soft reset enable @multiple */
  #define BLERD_MODEM_RESET2_EN                    0x0020
/** Demodulation frequency deviation selection @multiple */
  #define BLERD_MODEM_DC_PARAM(v)                  ((BLERD_MODEM_DC_PARAM_##v) << 6)
  #define BLERD_MODEM_DC_PARAM_SET(x, v)           do { (x) = (((x) & ~0xc0) | ((BLERD_MODEM_DC_PARAM_##v) << 6)); } while(0)
  #define BLERD_MODEM_DC_PARAM_SETVAL(x, v)        do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define BLERD_MODEM_DC_PARAM_GET(x)              (((x) >> 6) & 0x3)
    #define BLERD_MODEM_DC_PARAM_320K                0x00000000
    #define BLERD_MODEM_DC_PARAM_350K                0x00000001
    #define BLERD_MODEM_DC_PARAM_400K                0x00000002
    #define BLERD_MODEM_DC_PARAM_430K                0x00000003
/** Whether to bypass image filter in demoulation @multiple */
  #define BLERD_MODEM_IMREJ_BYPASS                 0x0100
/** Whether to select new AGC methodology with ADC full swing detection @multiple
   */
  #define BLERD_MODEM_ADC_FULL_SWING_DETECT_EN     0x0200
/** Whether DC scaling is enabled in the Demodulator. The Scaling happens when
   CBPF gain changes. @multiple */
  #define BLERD_MODEM_DC_SCALING_EN                0x0400
/** Whether power estimation for ADC output is enabled @multiple */
  #define BLERD_MODEM_ADC_PWR_EST_EN               0x0800
/** Whether to load previous RX packet gain setting at first gain change step
   @multiple */
  #define BLERD_MODEM_LOAD_PREV_GAIN_EN            0x1000
  #define BLERD_MODEM_READ_DC_OFFSET_SEL(v)        ((BLERD_MODEM_READ_DC_OFFSET_SEL_##v) << 13)
  #define BLERD_MODEM_READ_DC_OFFSET_SEL_SET(x, v) do { (x) = (((x) & ~0x2000) | ((BLERD_MODEM_READ_DC_OFFSET_SEL_##v) << 13)); } while(0)
  #define BLERD_MODEM_READ_DC_OFFSET_SEL_SETVAL(x, v) do { (x) = (((x) & ~0x2000) | ((v) << 13)); } while(0)
  #define BLERD_MODEM_READ_DC_OFFSET_SEL_GET(x)    (((x) >> 13) & 0x1)
/** read back of DC capture in digital */
    #define BLERD_MODEM_READ_DC_OFFSET_SEL_DC_CAPTURE_IN_DIGITAL 0x00000000
/** read back of analog DC CAL result. */
    #define BLERD_MODEM_READ_DC_OFFSET_SEL_ANALOG_DC_CAL_RESULT 0x00000001
/** Whether ADC DFT captures data before or after image filter @multiple */
  #define BLERD_MODEM_ADCDFT_SEL(v)                ((BLERD_MODEM_ADCDFT_SEL_##v) << 14)
  #define BLERD_MODEM_ADCDFT_SEL_SET(x, v)         do { (x) = (((x) & ~0x4000) | ((BLERD_MODEM_ADCDFT_SEL_##v) << 14)); } while(0)
  #define BLERD_MODEM_ADCDFT_SEL_SETVAL(x, v)      do { (x) = (((x) & ~0x4000) | ((v) << 14)); } while(0)
  #define BLERD_MODEM_ADCDFT_SEL_GET(x)            (((x) >> 14) & 0x1)
/** before */
    #define BLERD_MODEM_ADCDFT_SEL_BEFORE            0x00000000
/** after */
    #define BLERD_MODEM_ADCDFT_SEL_AFTER             0x00000001
/** Modulation continue wave output @multiple */
  #define BLERD_MODEM_CW_MODE                      0x8000

#define BLERD_FSM_ADDR                               0x0000000c
#define BLERD_FSM_MASK                               0x0000ffff
/** Whether XO is oscillating and reached 60% ampitude. BB_XO.DIS_XOCORE_SUPFILT
   determines fast or normal charge. XO within 50ppm needs 2 times of XO
   detection BB_XO.EN_RE_FASTSTART @multiple */
  #define BLERD_FSM_XO_AMP_DETECT                  0x0001
/** LS LDO powered up @multiple */
  #define BLERD_FSM_LSLDO_OK                       0x0002
/** LF LDO powered up @multiple */
  #define BLERD_FSM_LFLDO_OK                       0x0004
/** TX balun power detector, @multiple */
  #define BLERD_FSM_FCAL_PASS_DETECT(v)            ((BLERD_FSM_FCAL_PASS_DETECT_##v) << 3)
  #define BLERD_FSM_FCAL_PASS_DETECT_SET(x, v)     do { (x) = (((x) & ~0x8) | ((BLERD_FSM_FCAL_PASS_DETECT_##v) << 3)); } while(0)
  #define BLERD_FSM_FCAL_PASS_DETECT_SETVAL(x, v)  do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define BLERD_FSM_FCAL_PASS_DETECT_GET(x)        (((x) >> 3) & 0x1)
/** Frequency calibration has failed */
    #define BLERD_FSM_FCAL_PASS_DETECT_FAILED        0x00000000
/** Frequency calibration has passed */
    #define BLERD_FSM_FCAL_PASS_DETECT_PASSED        0x00000001
/** Enable for monitor isolation cell @multiple */
  #define BLERD_FSM_ISO_ENABLE                     0x0010
/** RFCTRL RX state @multiple */
  #define BLERD_FSM_RX_STATE(v)                    ((BLERD_FSM_RX_STATE_##v) << 5)
  #define BLERD_FSM_RX_STATE_SET(x, v)             do { (x) = (((x) & ~0xe0) | ((BLERD_FSM_RX_STATE_##v) << 5)); } while(0)
  #define BLERD_FSM_RX_STATE_SETVAL(x, v)          do { (x) = (((x) & ~0xe0) | ((v) << 5)); } while(0)
  #define BLERD_FSM_RX_STATE_GET(x)                (((x) >> 5) & 0x7)
/** RX Off */
    #define BLERD_FSM_RX_STATE_OFF                   0x00000000
/** RX Regulator Powerup */
    #define BLERD_FSM_RX_STATE_REG                   0x00000001
/** RX Baseband and IF Powerup */
    #define BLERD_FSM_RX_STATE_BASEBAND              0x00000002
/** DC Calibration */
    #define BLERD_FSM_RX_STATE_DC_CALIB              0x00000003
/** RX Wait for PLL settling */
    #define BLERD_FSM_RX_STATE_WAIT_PLL              0x00000004
/** RX ADC DC value capture */
    #define BLERD_FSM_RX_STATE_ADC                   0x00000005
/** RX Receive ON */
    #define BLERD_FSM_RX_STATE_RECEIVE               0x00000006
/** RFCTRL TX state @multiple */
  #define BLERD_FSM_TX_STATE(v)                    ((BLERD_FSM_TX_STATE_##v) << 8)
  #define BLERD_FSM_TX_STATE_SET(x, v)             do { (x) = (((x) & ~0x700) | ((BLERD_FSM_TX_STATE_##v) << 8)); } while(0)
  #define BLERD_FSM_TX_STATE_SETVAL(x, v)          do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define BLERD_FSM_TX_STATE_GET(x)                (((x) >> 8) & 0x7)
/** TX Off */
    #define BLERD_FSM_TX_STATE_OFF                   0x00000000
/** TX Regulator Powerup */
    #define BLERD_FSM_TX_STATE_REG                   0x00000001
/** TX Baseband Powerup */
    #define BLERD_FSM_TX_STATE_BASEBAND              0x00000002
/** KV Calibration */
    #define BLERD_FSM_TX_STATE_KV_CALIB              0x00000003
/** TX PLL Settling */
    #define BLERD_FSM_TX_STATE_PLL_SETTLING          0x00000004
/** TX Ready */
    #define BLERD_FSM_TX_STATE_READY                 0x00000005
/** RFCTRL SYNTH state @multiple */
  #define BLERD_FSM_SY_STATE(v)                    ((BLERD_FSM_SY_STATE_##v) << 11)
  #define BLERD_FSM_SY_STATE_SET(x, v)             do { (x) = (((x) & ~0x3800) | ((BLERD_FSM_SY_STATE_##v) << 11)); } while(0)
  #define BLERD_FSM_SY_STATE_SETVAL(x, v)          do { (x) = (((x) & ~0x3800) | ((v) << 11)); } while(0)
  #define BLERD_FSM_SY_STATE_GET(x)                (((x) >> 11) & 0x7)
/** SY off */
    #define BLERD_FSM_SY_STATE_SY_OFF                0x00000000
/** SY Regulator power up */
    #define BLERD_FSM_SY_STATE_SY_REG                0x00000001
/** SY VCO pup up */
    #define BLERD_FSM_SY_STATE_SY_VCO                0x00000002
/** SY LO path power up */
    #define BLERD_FSM_SY_STATE_SY_LO                 0x00000003
/** Frequency calibration */
    #define BLERD_FSM_SY_STATE_CALIB                 0x00000004
/** PLL setting */
    #define BLERD_FSM_SY_STATE_PLL_SETTING           0x00000005
/** PLL locked */
    #define BLERD_FSM_SY_STATE_PLL_LOCKED            0x00000006
/** RFCTRL major state @multiple */
  #define BLERD_FSM_STATE(v)                       ((BLERD_FSM_STATE_##v) << 14)
  #define BLERD_FSM_STATE_SET(x, v)                do { (x) = (((x) & ~0xc000) | ((BLERD_FSM_STATE_##v) << 14)); } while(0)
  #define BLERD_FSM_STATE_SETVAL(x, v)             do { (x) = (((x) & ~0xc000) | ((v) << 14)); } while(0)
  #define BLERD_FSM_STATE_GET(x)                   (((x) >> 14) & 0x3)
/** sleep mode */
    #define BLERD_FSM_STATE_SLEEP                    0x00000000
/** RX mode */
    #define BLERD_FSM_STATE_RX                       0x00000001
/** TX mode */
    #define BLERD_FSM_STATE_TX                       0x00000002
/** idle mode */
    #define BLERD_FSM_STATE_IDLE                     0x00000003

#define BLERD_DBUS_ADDR                              0x00000010
#define BLERD_DBUS_MASK                              0x0000ffff
/** RF frequency when CFG1.RF_PLL_DIRECT = 1, in kHz. @multiple */
  #define BLERD_DBUS_RF_FREQ(v)                    ((v) << 0)
  #define BLERD_DBUS_RF_FREQ_SET(x, v)             do { (x) = (((x) & ~0xfff) | ((v) << 0)); } while(0)
  #define BLERD_DBUS_RF_FREQ_GET(x)                (((x) >> 0) & 0xfff)
/** When CFG1.RADIO_STANDALONE = 1, DEBUS.DIRECT_RXEN replaces DBUS.RX_EN
   @multiple */
  #define BLERD_DBUS_DIRECT_RXEN                   0x1000
/** When CFG1.RADIO_STANDALONE = 1, DEBUS.DIRECT_RXEN replaces DBUS.RX_EN
   @multiple */
  #define BLERD_DBUS_DIRECT_TXEN                   0x2000
/** Force isolation cell enable of analog / digital boundary. low active
   @multiple */
  #define BLERD_DBUS_ISOLATE_N                     0x4000
/** Crystal enable @multiple */
  #define BLERD_DBUS_XTAL_ENABLE                   0x8000

#define BLERD_CFGCTRL_ADDR                           0x00000014
#define BLERD_CFGCTRL_MASK                           0x00008fff
/** Whether to set initial condition to DSM in RX @multiple */
  #define BLERD_CFGCTRL_DSM_RX_INITIAL_CONDITION   0x0001
/** Whether to disable input dither @multiple */
  #define BLERD_CFGCTRL_DSM_RX_INPUT_DITHER(v)     ((BLERD_CFGCTRL_DSM_RX_INPUT_DITHER_##v) << 1)
  #define BLERD_CFGCTRL_DSM_RX_INPUT_DITHER_SET(x, v) do { (x) = (((x) & ~0x2) | ((BLERD_CFGCTRL_DSM_RX_INPUT_DITHER_##v) << 1)); } while(0)
  #define BLERD_CFGCTRL_DSM_RX_INPUT_DITHER_SETVAL(x, v) do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define BLERD_CFGCTRL_DSM_RX_INPUT_DITHER_GET(x) (((x) >> 1) & 0x1)
    #define BLERD_CFGCTRL_DSM_RX_INPUT_DITHER_ENABLE 0x00000000
    #define BLERD_CFGCTRL_DSM_RX_INPUT_DITHER_DISABLE 0x00000001
/** Whether to set initial condition to DSM in TX @multiple */
  #define BLERD_CFGCTRL_DSM_TX_INITIAL_CONDITION   0x0004
/** Whether to disable input dither @multiple */
  #define BLERD_CFGCTRL_DSM_TX_INPUT_DITHER(v)     ((BLERD_CFGCTRL_DSM_TX_INPUT_DITHER_##v) << 3)
  #define BLERD_CFGCTRL_DSM_TX_INPUT_DITHER_SET(x, v) do { (x) = (((x) & ~0x8) | ((BLERD_CFGCTRL_DSM_TX_INPUT_DITHER_##v) << 3)); } while(0)
  #define BLERD_CFGCTRL_DSM_TX_INPUT_DITHER_SETVAL(x, v) do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define BLERD_CFGCTRL_DSM_TX_INPUT_DITHER_GET(x) (((x) >> 3) & 0x1)
    #define BLERD_CFGCTRL_DSM_TX_INPUT_DITHER_ENABLE 0x00000000
    #define BLERD_CFGCTRL_DSM_TX_INPUT_DITHER_DISABLE 0x00000001
/** Cfgctrl_dsm_mode[4]: PLL order used in TX mode, this is not effective in RX
   mode @multiple */
  #define BLERD_CFGCTRL_DSM_PLL_ORDER(v)           ((BLERD_CFGCTRL_DSM_PLL_ORDER_##v) << 4)
  #define BLERD_CFGCTRL_DSM_PLL_ORDER_SET(x, v)    do { (x) = (((x) & ~0x10) | ((BLERD_CFGCTRL_DSM_PLL_ORDER_##v) << 4)); } while(0)
  #define BLERD_CFGCTRL_DSM_PLL_ORDER_SETVAL(x, v) do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define BLERD_CFGCTRL_DSM_PLL_ORDER_GET(x)       (((x) >> 4) & 0x1)
/** Third order PLL is used */
    #define BLERD_CFGCTRL_DSM_PLL_ORDER_THIRD        0x00000000
/** First order PLL is used */
    #define BLERD_CFGCTRL_DSM_PLL_ORDER_FIRST        0x00000001
/** Whether to ignore fractional part in DSM (Frac-N PLL) @multiple */
  #define BLERD_CFGCTRL_IGNORE_FRAC                0x0020
/** DC CAL is forced to run when CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_CFGCTRL_DCCAL_RERUN                0x0040
  #define BLERD_CFGCTRL_DCCAL_MODE(v)              ((BLERD_CFGCTRL_DCCAL_MODE_##v) << 7)
  #define BLERD_CFGCTRL_DCCAL_MODE_SET(x, v)       do { (x) = (((x) & ~0x80) | ((BLERD_CFGCTRL_DCCAL_MODE_##v) << 7)); } while(0)
  #define BLERD_CFGCTRL_DCCAL_MODE_SETVAL(x, v)    do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define BLERD_CFGCTRL_DCCAL_MODE_GET(x)          (((x) >> 7) & 0x1)
/** RX DC offset calibration in run normal mode */
    #define BLERD_CFGCTRL_DCCAL_MODE_NORMAL          0x00000000
/** RX DC offset calibration is run in slow mode. Here each step in calibration is given double time compared to the normal mode */
    #define BLERD_CFGCTRL_DCCAL_MODE_SLOW            0x00000001
/** RC-cal force to rerun when CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_CFGCTRL_RCCAL_RERUN                0x0100
  #define BLERD_CFGCTRL_RCCAL_MODE(v)              ((BLERD_CFGCTRL_RCCAL_MODE_##v) << 9)
  #define BLERD_CFGCTRL_RCCAL_MODE_SET(x, v)       do { (x) = (((x) & ~0x200) | ((BLERD_CFGCTRL_RCCAL_MODE_##v) << 9)); } while(0)
  #define BLERD_CFGCTRL_RCCAL_MODE_SETVAL(x, v)    do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define BLERD_CFGCTRL_RCCAL_MODE_GET(x)          (((x) >> 9) & 0x1)
/** normal mode */
    #define BLERD_CFGCTRL_RCCAL_MODE_NORMAL          0x00000000
/** slow mode, The timer for each setp in calibration is doubled with normal mode */
    #define BLERD_CFGCTRL_RCCAL_MODE_SLOW            0x00000001
/** FCAL will be force rerun when CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_CFGCTRL_KVCAL_RERUN                0x0400
/** KVCAL will be force rerun when CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_CFGCTRL_FCAL_RERUN                 0x0800
/** Enables the test mode feature of RFCTRL @multiple */
  #define BLERD_CFGCTRL_TESTMODE_EN                0x8000

#define BLERD_RSSI_ADDR                              0x00000018
#define BLERD_RSSI_MASK                              0x00007f7f
/** RSSI value before the filter in thd digital, 0 represents -85dBm @multiple */
  #define BLERD_RSSI_PREFILT(v)                    ((v) << 0)
  #define BLERD_RSSI_PREFILT_SET(x, v)             do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define BLERD_RSSI_PREFILT_GET(x)                (((x) >> 0) & 0x7f)
/** RSSI value after the filter in digital, 0 represents -85dBm @multiple */
  #define BLERD_RSSI_POSTFILT(v)                   ((v) << 8)
  #define BLERD_RSSI_POSTFILT_SET(x, v)            do { (x) = (((x) & ~0x7f00) | ((v) << 8)); } while(0)
  #define BLERD_RSSI_POSTFILT_GET(x)               (((x) >> 8) & 0x7f)

#define BLERD_RMAP_ADDR                              0x00000024
#define BLERD_RMAP_MASK                              0x00000f7f
/** Bypass LSLDO OK signal @multiple */
  #define BLERD_RMAP_LSLDO_OK_BYPASS               0x0001
/** Bypass LFLDO OK signal @multiple */
  #define BLERD_RMAP_LFLDO_OK_BYPASS               0x0002
/** Bypass XO AMP detect @multiple */
  #define BLERD_RMAP_XO_AMP_DETECT_BYPASS          0x0004
/** BG output is forced external by enabling T-gate @multiple */
  #define BLERD_RMAP_BG_FORCE_EXTERNAL             0x0008
/** Bypass LF LDO and the line supply is directly given out as regulator output.
   This field should not be enabled if line supply is more than 2.1V. This should
   not toggled in Scan Mode. @multiple */
  #define BLERD_RMAP_LFLDO_LINE                    0x0010
/** Bypass LS LDO and the line supply is directly given out as regulator output.
   This field should not be enabled if line supply is moreh than 2.1V. This
   should not toggled in Scan Mode. @multiple */
  #define BLERD_RMAP_LSLDO_LINE                    0x0020
/** Bypass BBV2LDO and the line supply is directly given out as regulator output.
   This field should not be enabled if line supply is moreh than 2.1V. This
   should not toggled in Scan Mode @multiple */
  #define BLERD_RMAP_BBV2LDO_LINE                  0x0040
  #define BLERD_RMAP_LFLDO_CONTROL(v)              ((BLERD_RMAP_LFLDO_CONTROL_##v) << 8)
  #define BLERD_RMAP_LFLDO_CONTROL_SET(x, v)       do { (x) = (((x) & ~0x100) | ((BLERD_RMAP_LFLDO_CONTROL_##v) << 8)); } while(0)
  #define BLERD_RMAP_LFLDO_CONTROL_SETVAL(x, v)    do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define BLERD_RMAP_LFLDO_CONTROL_GET(x)          (((x) >> 8) & 0x1)
/** LF LDO power down controlled by m0s8blerd */
    #define BLERD_RMAP_LFLDO_CONTROL_M0S8BLERD       0x00000000
/** Power down LF LDO */
    #define BLERD_RMAP_LFLDO_CONTROL_DOWN            0x00000001
  #define BLERD_RMAP_LSLDO_CONTROL(v)              ((BLERD_RMAP_LSLDO_CONTROL_##v) << 9)
  #define BLERD_RMAP_LSLDO_CONTROL_SET(x, v)       do { (x) = (((x) & ~0x200) | ((BLERD_RMAP_LSLDO_CONTROL_##v) << 9)); } while(0)
  #define BLERD_RMAP_LSLDO_CONTROL_SETVAL(x, v)    do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define BLERD_RMAP_LSLDO_CONTROL_GET(x)          (((x) >> 9) & 0x1)
/** LS LDO power down controlled by m0s8blerd */
    #define BLERD_RMAP_LSLDO_CONTROL_M0S8BLERD       0x00000000
/** Power down LS LDO */
    #define BLERD_RMAP_LSLDO_CONTROL_DOWN            0x00000001
  #define BLERD_RMAP_BGLDO_CONTROL(v)              ((BLERD_RMAP_BGLDO_CONTROL_##v) << 10)
  #define BLERD_RMAP_BGLDO_CONTROL_SET(x, v)       do { (x) = (((x) & ~0x400) | ((BLERD_RMAP_BGLDO_CONTROL_##v) << 10)); } while(0)
  #define BLERD_RMAP_BGLDO_CONTROL_SETVAL(x, v)    do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define BLERD_RMAP_BGLDO_CONTROL_GET(x)          (((x) >> 10) & 0x1)
/** BG LDO power down controlled by m0s8blerd */
    #define BLERD_RMAP_BGLDO_CONTROL_M0S8BLERD       0x00000000
/** Power down BG LDO */
    #define BLERD_RMAP_BGLDO_CONTROL_DOWN            0x00000001
  #define BLERD_RMAP_V2ILDO_CONTROL(v)             ((BLERD_RMAP_V2ILDO_CONTROL_##v) << 11)
  #define BLERD_RMAP_V2ILDO_CONTROL_SET(x, v)      do { (x) = (((x) & ~0x800) | ((BLERD_RMAP_V2ILDO_CONTROL_##v) << 11)); } while(0)
  #define BLERD_RMAP_V2ILDO_CONTROL_SETVAL(x, v)   do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define BLERD_RMAP_V2ILDO_CONTROL_GET(x)         (((x) >> 11) & 0x1)
/** V2ILDO power down controlled by m0s8blerd */
    #define BLERD_RMAP_V2ILDO_CONTROL_M0S8BLERD      0x00000000
/** Power down V2ILDO */
    #define BLERD_RMAP_V2ILDO_CONTROL_DOWN           0x00000001

#define BLERD_KVCAL_ADDR                             0x00000028
#define BLERD_KVCAL_MASK                             0x00000fff
/** This values tells by what value should the DAC be offset from the mid-code,
   when the KVCAL is running. @multiple */
  #define BLERD_KVCAL_DAC_STEP(v)                  ((BLERD_KVCAL_DAC_STEP_##v) << 0)
  #define BLERD_KVCAL_DAC_STEP_SET(x, v)           do { (x) = (((x) & ~0x3) | ((BLERD_KVCAL_DAC_STEP_##v) << 0)); } while(0)
  #define BLERD_KVCAL_DAC_STEP_SETVAL(x, v)        do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define BLERD_KVCAL_DAC_STEP_GET(x)              (((x) >> 0) & 0x3)
/** 512 (1MHz deviation) */
    #define BLERD_KVCAL_DAC_STEP_512                 0x00000000
/** 376 (0.75 Mhz deviation) */
    #define BLERD_KVCAL_DAC_STEP_376                 0x00000001
/** 256 (0.5 Mhz deviation) */
    #define BLERD_KVCAL_DAC_STEP_256                 0x00000002
/** 128 (0.25 Mhz deviation) */
    #define BLERD_KVCAL_DAC_STEP_128                 0x00000003
/** This values tells by what value should the DAC be offset from the mid-code,
   when the KVCAL is running. @multiple */
  #define BLERD_KVCAL_RUN_DURATION(v)              ((BLERD_KVCAL_RUN_DURATION_##v) << 2)
  #define BLERD_KVCAL_RUN_DURATION_SET(x, v)       do { (x) = (((x) & ~0xc) | ((BLERD_KVCAL_RUN_DURATION_##v) << 2)); } while(0)
  #define BLERD_KVCAL_RUN_DURATION_SETVAL(x, v)    do { (x) = (((x) & ~0xc) | ((v) << 2)); } while(0)
  #define BLERD_KVCAL_RUN_DURATION_GET(x)          (((x) >> 2) & 0x3)
/** 512 (1MHz deviation) */
    #define BLERD_KVCAL_RUN_DURATION_512             0x00000000
/** 376 (0.75 Mhz deviation) */
    #define BLERD_KVCAL_RUN_DURATION_376             0x00000001
/** 256 (0.5 Mhz deviation) */
    #define BLERD_KVCAL_RUN_DURATION_256             0x00000002
/** 128 (0.25 Mhz deviation) */
    #define BLERD_KVCAL_RUN_DURATION_128             0x00000003
/** This expected difference in KVCAL configuration counts(100 counts for an
   idela modulalation path gain) @multiple */
  #define BLERD_KVCAL_EXP_FREQ_DIFF(v)             ((v) << 4)
  #define BLERD_KVCAL_EXP_FREQ_DIFF_SET(x, v)      do { (x) = (((x) & ~0xff0) | ((v) << 4)); } while(0)
  #define BLERD_KVCAL_EXP_FREQ_DIFF_GET(x)         (((x) >> 4) & 0xff)

#define BLERD_CFG_1_FCAL_ADDR                        0x0000002c
#define BLERD_CFG_1_FCAL_MASK                        0x00003fff
/** numbere of frames to run for the calibration 6th coarse bit @multiple */
  #define BLERD_CFG_1_FCAL_COARSE_FRAMES_6(v)      ((v) << 0)
  #define BLERD_CFG_1_FCAL_COARSE_FRAMES_6_SET(x, v) do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define BLERD_CFG_1_FCAL_COARSE_FRAMES_6_GET(x)  (((x) >> 0) & 0x7f)
/** numbere of frames to run for the calibration 7th coarse bit @multiple */
  #define BLERD_CFG_1_FCAL_COARSE_FRAMES_7(v)      ((v) << 7)
  #define BLERD_CFG_1_FCAL_COARSE_FRAMES_7_SET(x, v) do { (x) = (((x) & ~0x3f80) | ((v) << 7)); } while(0)
  #define BLERD_CFG_1_FCAL_COARSE_FRAMES_7_GET(x)  (((x) >> 7) & 0x7f)

#define BLERD_CFG_2_FCAL_ADDR                        0x00000030
#define BLERD_CFG_2_FCAL_MASK                        0x00003fff
/** numbere of frames to run for the calibration 4th coarse bit @multiple */
  #define BLERD_CFG_2_FCAL_COARSE_FRAMES_4(v)      ((v) << 0)
  #define BLERD_CFG_2_FCAL_COARSE_FRAMES_4_SET(x, v) do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define BLERD_CFG_2_FCAL_COARSE_FRAMES_4_GET(x)  (((x) >> 0) & 0x7f)
/** numbere of frames to run for the calibration 5th coarse bit @multiple */
  #define BLERD_CFG_2_FCAL_COARSE_FRAMES_5(v)      ((v) << 7)
  #define BLERD_CFG_2_FCAL_COARSE_FRAMES_5_SET(x, v) do { (x) = (((x) & ~0x3f80) | ((v) << 7)); } while(0)
  #define BLERD_CFG_2_FCAL_COARSE_FRAMES_5_GET(x)  (((x) >> 7) & 0x7f)

#define BLERD_CFG_3_FCAL_ADDR                        0x00000034
#define BLERD_CFG_3_FCAL_MASK                        0x00003fff
/** numbere of frames to run for the calibration 2nd coarse bit @multiple */
  #define BLERD_CFG_3_FCAL_COARSE_FRAMES_2(v)      ((v) << 0)
  #define BLERD_CFG_3_FCAL_COARSE_FRAMES_2_SET(x, v) do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define BLERD_CFG_3_FCAL_COARSE_FRAMES_2_GET(x)  (((x) >> 0) & 0x7f)
/** numbere of frames to run for the calibration 3rd coarse bit @multiple */
  #define BLERD_CFG_3_FCAL_COARSE_FRAMES_3(v)      ((v) << 7)
  #define BLERD_CFG_3_FCAL_COARSE_FRAMES_3_SET(x, v) do { (x) = (((x) & ~0x3f80) | ((v) << 7)); } while(0)
  #define BLERD_CFG_3_FCAL_COARSE_FRAMES_3_GET(x)  (((x) >> 7) & 0x7f)

#define BLERD_CFG_4_FCAL_ADDR                        0x00000038
#define BLERD_CFG_4_FCAL_MASK                        0x00003fff
/** numbere of frames to run for the calibration 0th coarse bit @multiple */
  #define BLERD_CFG_4_FCAL_COARSE_FRAMES_0(v)      ((v) << 0)
  #define BLERD_CFG_4_FCAL_COARSE_FRAMES_0_SET(x, v) do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define BLERD_CFG_4_FCAL_COARSE_FRAMES_0_GET(x)  (((x) >> 0) & 0x7f)
/** numbere of frames to run for the calibration 1st coarse bit @multiple */
  #define BLERD_CFG_4_FCAL_COARSE_FRAMES_1(v)      ((v) << 7)
  #define BLERD_CFG_4_FCAL_COARSE_FRAMES_1_SET(x, v) do { (x) = (((x) & ~0x3f80) | ((v) << 7)); } while(0)
  #define BLERD_CFG_4_FCAL_COARSE_FRAMES_1_GET(x)  (((x) >> 7) & 0x7f)

#define BLERD_CFG_5_FCAL_ADDR                        0x0000003c
#define BLERD_CFG_5_FCAL_MASK                        0x000007ff
/** number of frames to run for all the calibration of all the Fine bits
   @multiple */
  #define BLERD_CFG_5_FCAL_FINE_FRAMES(v)          ((v) << 0)
  #define BLERD_CFG_5_FCAL_FINE_FRAMES_SET(x, v)   do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define BLERD_CFG_5_FCAL_FINE_FRAMES_GET(x)      (((x) >> 0) & 0x7f)
/** select which count should be reflected in the FCAL_DBG_2 and FCAL_DBG_3
   registers @multiple */
  #define BLERD_CFG_5_FCAL_CNT_SEL(v)              ((BLERD_CFG_5_FCAL_CNT_SEL_##v) << 7)
  #define BLERD_CFG_5_FCAL_CNT_SEL_SET(x, v)       do { (x) = (((x) & ~0x780) | ((BLERD_CFG_5_FCAL_CNT_SEL_##v) << 7)); } while(0)
  #define BLERD_CFG_5_FCAL_CNT_SEL_SETVAL(x, v)    do { (x) = (((x) & ~0x780) | ((v) << 7)); } while(0)
  #define BLERD_CFG_5_FCAL_CNT_SEL_GET(x)          (((x) >> 7) & 0xf)
/** FCAL 7th Coarse bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_7_COARSE   0x00000001
/** FCAL 6th Coarse bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_6_COARSE   0x00000002
/** FCAL 5th Coarse bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_5_COARSE   0x00000003
/** FCAL 4th Coarse bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_4_COARSE   0x00000004
/** FCAL 3rd Coarse bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_3_COARSE   0x00000005
/** FCAL 2nd Coarse bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_2_COARSE   0x00000006
/** FCAL 1st Coarse bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_1_COARSE   0x00000007
/** FCAL 0th Coarse bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_0_COARSE   0x00000008
/** FCAL 3rd Fine bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_3_FINE     0x00000009
/** FCAL 2nd Fine bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_2_FINE     0x0000000a
/** FCAL 1st Fine bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_1_FINE     0x0000000b
/** FCAL 0th Fine bit calibration */
    #define BLERD_CFG_5_FCAL_CNT_SEL_FCAL_0_FINE     0x0000000c
/** VCO Open loop count */
    #define BLERD_CFG_5_FCAL_CNT_SEL_VCO             0x0000000d
/** KVCAL Observed Count */
    #define BLERD_CFG_5_FCAL_CNT_SEL_KVCAL_OBSERVED  0x0000000e
/** KVCAL Gain Default: Gives zero output */
    #define BLERD_CFG_5_FCAL_CNT_SEL_KVCAL_GAIN      0x0000000f

#define BLERD_CFG_6_FCAL_ADDR                        0x00000040
#define BLERD_CFG_6_FCAL_MASK                        0x00007fff
/** Number of frames to run in VCO openloop Characterization . If DRIFT_CHECK_EN
   is asserted, then this field indicates for how many frames the FCAL drift has
   to be measured @multiple */
  #define BLERD_CFG_6_FCAL_FRAMES_VCO_OL(v)        ((v) << 0)
  #define BLERD_CFG_6_FCAL_FRAMES_VCO_OL_SET(x, v) do { (x) = (((x) & ~0x7ff) | ((v) << 0)); } while(0)
  #define BLERD_CFG_6_FCAL_FRAMES_VCO_OL_GET(x)    (((x) >> 0) & 0x7ff)
/** Enable vco openloop characterization @multiple */
  #define BLERD_CFG_6_FCAL_VCO_OL_ENBL             0x0800
/** Enables the FCAL drift check, This needs to be set prior to the TX burst
   being programmed as it affects the timing sequence. Ensure that FB buffer has
   not been powered down such that the FCAL counter is left alive. This requires
   a cahgne to reg0xcc[5] to be set to 0 (disable FB buffer power save). This
   needs to be set piror to placing the part in TX mode @multiple */
  #define BLERD_CFG_6_FCAL_DRIFT_CHECK_EN          0x1000
  #define BLERD_CFG_6_FCAL_DRIFT_CHECK(v)          ((BLERD_CFG_6_FCAL_DRIFT_CHECK_##v) << 13)
  #define BLERD_CFG_6_FCAL_DRIFT_CHECK_SET(x, v)   do { (x) = (((x) & ~0x6000) | ((BLERD_CFG_6_FCAL_DRIFT_CHECK_##v) << 13)); } while(0)
  #define BLERD_CFG_6_FCAL_DRIFT_CHECK_SETVAL(x, v) do { (x) = (((x) & ~0x6000) | ((v) << 13)); } while(0)
  #define BLERD_CFG_6_FCAL_DRIFT_CHECK_GET(x)      (((x) >> 13) & 0x3)
/** start drift check when the TX driver is powered up */
    #define BLERD_CFG_6_FCAL_DRIFT_CHECK_ASAP        0x00000000
/** start drift check measurement 100us after TX driver is power ed up */
    #define BLERD_CFG_6_FCAL_DRIFT_CHECK_AFTER_100US 0x00000001
/** start drift check measurement 200us after the TX driver is powered up */
    #define BLERD_CFG_6_FCAL_DRIFT_CHECK_AFTER_200US 0x00000002
/** start drift check measurement 300us after the TX drive is powered up */
    #define BLERD_CFG_6_FCAL_DRIFT_CHECK_AFTER_300US 0x00000003

#define BLERD_FCAL_TEST_ADDR                         0x00000044
#define BLERD_FCAL_TEST_MASK                         0x00007fff
/** Force fine bits output of the FCAL engine when test_mode is set @multiple */
  #define BLERD_FCAL_TEST_FINE(v)                  ((v) << 0)
  #define BLERD_FCAL_TEST_FINE_SET(x, v)           do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_FCAL_TEST_FINE_GET(x)              (((x) >> 0) & 0xf)
/** Force coarse bits output of the FCAL engine when test_mode is set @multiple
   */
  #define BLERD_FCAL_TEST_COARSE(v)                ((v) << 4)
  #define BLERD_FCAL_TEST_COARSE_SET(x, v)         do { (x) = (((x) & ~0xff0) | ((v) << 4)); } while(0)
  #define BLERD_FCAL_TEST_COARSE_GET(x)            (((x) >> 4) & 0xff)
/** Force the coarse and fine bits of FCAL output enable @multiple */
  #define BLERD_FCAL_TEST_MODE                     0x1000
/** 1 inverts the polarity of the FCAL counter output coming in to the RFCTRL
   @multiple */
  #define BLERD_FCAL_TEST_CNT_POLARITY             0x2000
/** Inverts the polarity of the FCAL loop. Normal mode: DCAP code is increased if
   the observed count is greater than target_count. Inverted mode: the DCAP code
   is decreased if observed count is greater than target count. @multiple */
  #define BLERD_FCAL_TEST_LOOP_INVERTED            0x4000

#define BLERD_TEST_ADDR                              0x00000048
#define BLERD_TEST_MASK                              0x00007fff
/** Value forced as KV_CAL code when KVCAL_MODE = 1 @multiple */
  #define BLERD_TEST_KVCAL_GAIN(v)                 ((v) << 0)
  #define BLERD_TEST_KVCAL_GAIN_SET(x, v)          do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define BLERD_TEST_KVCAL_GAIN_GET(x)             (((x) >> 0) & 0x7f)
/** Force KV_CAL to the given code @multiple */
  #define BLERD_TEST_KVCAL_MODE                    0x0080
/** Value forced as the RC_CAL code when FRCCAL_MODE = 1 @multiple */
  #define BLERD_TEST_FRCCAL_CODE(v)                ((v) << 8)
  #define BLERD_TEST_FRCCAL_CODE_SET(x, v)         do { (x) = (((x) & ~0x1f00) | ((v) << 8)); } while(0)
  #define BLERD_TEST_FRCCAL_CODE_GET(x)            (((x) >> 8) & 0x1f)
/** Force RC_CAL to the given code @multiple */
  #define BLERD_TEST_FRCCAL_MODE                   0x2000
/** Invert RC CAL polarity. @multiple */
  #define BLERD_TEST_FRCCAL_POLARITY               0x4000

#define BLERD_FPD_TEST_ADDR                          0x0000004c
#define BLERD_FPD_TEST_MASK                          0x00003f9d
/** 1: forcefully powers down all the buffers in XO if CFGCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_FPD_TEST_BB_FPUP_XO_BUF_ALL        0x0001
/** 1: forcefully powers down xo buffer to ADC if CFGCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_FPD_TEST_BB_XO_BUF_ADC             0x0004
/** 1: forcefully powers down xo buffer to synth if CFGCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_FPD_TEST_BB_XO_BUF_SY              0x0008
/** 1: forcefully powers down the RC CAL block if CFGCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_FPD_TEST_BB_RCCAL_BLOCK            0x0010
/** 1: force power the fast charge bit for LDO Lopath if CFGCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_FPD_TEST_FAST_CHARGE               0x0080
/** 1: force power down SY LDOVCO if CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_FPD_TEST_SY_LDOVCO                 0x0100
/** 1: force power down SY LDO LOPATH if CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_FPD_TEST_SY_LDOLOPATH              0x0200
/** 1: force power down SY LDO LOFFFB if CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_FPD_TEST_SY_LDOFFFB                0x0400
/** 1: Balun HF LDO is forced power down if CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_FPD_TEST_BALUN_HFLDO               0x0800
/** 1: force powerdown Balun Ctune block if CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_FPD_TEST_BALUN_CTUNE               0x1000
/** This is used to force powerup the blocks controlled by this register. Fpd has
   higher precedence over force_powerup if CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_FPD_TEST_FPUP_ALL                  0x2000

#define BLERD_SY_ADDR                                0x00000050
#define BLERD_SY_MASK                                0x0000fff7
/** SY IBIAS block is forced powered down, if this bit is set and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_IBIAS                  0x0001
/** SY VCO block is forced powered down, if this bit is set and RF_TST_EN = 1
   @multiple */
  #define BLERD_SY_TEST_FPD_VCO                    0x0002
/** SY high speed divider block is forced powered down, if this bit is set and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_DIV2                   0x0004
/** SY LOpath DIVN buffer is forced powered down, if this bit is set and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_LOPATHDIVN             0x0010
/** SY LOpath FCAL buffer is forced powered down, if this bit is set and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_DIV2_BUF               0x0020
/** SY DIVN block is forced powered down, if this bit is set and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_DIVN                   0x0040
/** SY FCAL counter is forced powered down, if this bit is set and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_FCAL                   0x0080
/** SY CP and LPF are forced powered down, if this bit is set and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_CPLPF                  0x0100
/** SY LOpath TX buffer is forced powered down, if this bit is set and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_LOPATHTX               0x0200
/** the TX powersave bit si force to zero if this bit is asserted and and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_DIV2_DRV               0x0400
/** The fcal amp is forced powered down, if this bit is asserted and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_TX_POWERSAVE           0x0800
/** The fcal amp is forced powered down, if this bit is asserted and
   CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_FCAL_AMP               0x1000
/** The loop_freeze is forced low if this bit is asserted and CFGCTRL.TESTMODE_EN
   = 1 @multiple */
  #define BLERD_SY_TEST_FPD_OPENLOOP               0x2000
/** 1: loop freeze is forced low if CFGCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_SY_TEST_FPD_LOOP_FREEZE            0x4000
/** 1: all the blocks in SY are forced power up if CFGCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_SY_TEST_FPUP_ALL                   0x8000

#define BLERD_TEST2_SY_ADDR                          0x00000054
#define BLERD_TEST2_SY_MASK                          0x0000ffef
/** ICP code will be programmed with these bits. @multiple */
  #define BLERD_TEST2_SY_ICP_CODE(v)               ((v) << 0)
  #define BLERD_TEST2_SY_ICP_CODE_SET(x, v)        do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_TEST2_SY_ICP_CODE_GET(x)           (((x) >> 0) & 0xf)
/** DSM run signal is de-asserted if this bit si set and RFCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_TEST2_SY_FPD_DSM_RUN               0x0020
/** DSM_run signal is asserted if this bit is set and RFCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_TEST2_SY_FORCE_DSM_RUN             0x0040
  #define BLERD_TEST2_SY_FORCE_DSM_FRAC(v)         ((BLERD_TEST2_SY_FORCE_DSM_FRAC_##v) << 7)
  #define BLERD_TEST2_SY_FORCE_DSM_FRAC_SET(x, v)  do { (x) = (((x) & ~0x80) | ((BLERD_TEST2_SY_FORCE_DSM_FRAC_##v) << 7)); } while(0)
  #define BLERD_TEST2_SY_FORCE_DSM_FRAC_SETVAL(x, v) do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define BLERD_TEST2_SY_FORCE_DSM_FRAC_GET(x)     (((x) >> 7) & 0x1)
/** DSM fractional bits will be driven by Timing Engine */
    #define BLERD_TEST2_SY_FORCE_DSM_FRAC_TIMING_ENGINE 0x00000000
/** Force the MSB 8bit of the DSM fractional part with Reg[15-8]. The LSB bits should be 0. */
    #define BLERD_TEST2_SY_FORCE_DSM_FRAC_FORCE      0x00000001
/** fore bits for DSM fractional bits if test2_sy_force_dsm_frac=1 @multiple */
  #define BLERD_TEST2_SY_DSM_FRAC(v)               ((v) << 8)
  #define BLERD_TEST2_SY_DSM_FRAC_SET(x, v)        do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define BLERD_TEST2_SY_DSM_FRAC_GET(x)           (((x) >> 8) & 0xff)

#define BLERD_TX_ADDR                                0x00000058
#define BLERD_TX_MASK                                0x000001ff
/** 1: forced power down TX ibias if RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_TX_TEST_FPD_IBIAS                  0x0001
/** 1: forced power down TX DAC if RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_TX_TEST_FPD_DAC                    0x0002
/** 1: forced power down TX LPF if RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_TX_TEST_FPD_LPF                    0x0004
/** 1: forced power down TX driver if RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_TX_TEST_FPD_DRIVER                 0x0008
/** 1: forced power down TX pre-drive if RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_TX_TEST_FPD_PREDRIVER              0x0010
/** the modulator control signal f_n_txen is deasswerted, if this bit is set and
   RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_TX_TEST_FPD_FN_TXEN                0x0020
/** modulator will not enable negative 1Mhz frequency deviation mode, if this bit
   is set and rfctrl_testmdoe_en = 1 @multiple */
  #define BLERD_TX_TEST_FPD_KVM_NFDEV              0x0040
/** modulator will not enable positive 1Mhz frequency deviation mode, if this bit
   is set and rfctrl_testmdoe_en = 1 @multiple */
  #define BLERD_TX_TEST_FPD_KVM_PFDEV              0x0080
/** force powerup all the TX blocks if RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_TX_TEST_FPUP_TX_ALL                0x0100

#define BLERD_RX_ADDR                                0x0000005c
#define BLERD_RX_MASK                                0x00001fff
/** 1:force power down RX IBIAS block if this bit is set and RFCTRL.TESTMODE_EN =
   1 @multiple */
  #define BLERD_RX_TEST_FPD_IBIAS                  0x0001
/** 1:force power down RX ADC I Core block is force powerdown if this bit is set
   and RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_RX_TEST_FPD_ADC_ICORE              0x0002
/** 1:force power donw RX ADC IREF generation lock,if this bit is set and
   RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_RX_TEST_FPD_ADC_IREFGEN            0x0004
/** 1:force power down RX ADC Q Core block is force powerdown if this bit is set
   and RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_RX_TEST_FPD_ADC_QCORE              0x0008
/** 1:force power donw RX ADC QREF generation lock,if this bit is set and
   RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_RX_TEST_FPD_ADC_QREFGEN            0x0010
/** 1:force power down RX BPF, if this bit is set and RFCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_RX_TEST_FPD_BPF                    0x0020
/** 1:force power down RX TIA if this bit is set and RFCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_RX_TEST_FPD_TIA                    0x0040
/** 1:force power down RX MIXER LO block if this bit is set and
   RFCTRL.TESTMODE_EN = 1 @multiple */
  #define BLERD_RX_TEST_FPD_MIXER_LO               0x0080
/** 1: force power down RX MIXER RF block if RFCTRL.TESTMODE_EN = 1. @multiple */
  #define BLERD_RX_TEST_FPD_MIXER_RF               0x0100
/** 1: force power down RX LNA if this bit is set and RFCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_RX_TEST_FPD_LNA                    0x0200
/** 1:LNA HIZ signal is deasserted, if this bit is set and RFCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_RX_TEST_FPD_LNA_HIZ                0x0400
/** 1:the demodulator control signal f_n_rxen is deasserted if this bit is set
   and rfctrl_tesmode_en=1 @multiple */
  #define BLERD_RX_TEST_FPD_FN_RXEN                0x0800
/** 1:force powerup all RX blocks,if this bit is set and RFCTRL.TESTMODE_EN = 1
   @multiple */
  #define BLERD_RX_TEST_FPUP_RX_ALL                0x1000

#define BLERD_DIAG1_ADDR                             0x00000060
#define BLERD_DIAG1_MASK                             0x000003ff
/** Disable diagnaostics @multiple */
  #define BLERD_DIAG1_DISABLE                      0x0001
/** global diagnositic code, this is given to all the blocks. The block wihich
   has the diagnostics en- abled will decode this code @multiple */
  #define BLERD_DIAG1_CODE(v)                      ((v) << 1)
  #define BLERD_DIAG1_CODE_SET(x, v)               do { (x) = (((x) & ~0x1e) | ((v) << 1)); } while(0)
  #define BLERD_DIAG1_CODE_GET(x)                  (((x) >> 1) & 0xf)
/** This needs to be decoded and given to HardIP @multiple */
  #define BLERD_DIAG1_SEL(v)                       ((BLERD_DIAG1_SEL_##v) << 5)
  #define BLERD_DIAG1_SEL_SET(x, v)                do { (x) = (((x) & ~0x3e0) | ((BLERD_DIAG1_SEL_##v) << 5)); } while(0)
  #define BLERD_DIAG1_SEL_SETVAL(x, v)             do { (x) = (((x) & ~0x3e0) | ((v) << 5)); } while(0)
  #define BLERD_DIAG1_SEL_GET(x)                   (((x) >> 5) & 0x1f)
/** HFLDO */
    #define BLERD_DIAG1_SEL_HFLDO                    0x00000000
/** Balun */
    #define BLERD_DIAG1_SEL_BALUN                    0x00000001
/** BB_TRANCHAR */
    #define BLERD_DIAG1_SEL_BB_TRANCHAR              0x00000002
/** BB_LSLDO */
    #define BLERD_DIAG1_SEL_BB_LSLDO                 0x00000003
/** BB_V2ILDO */
    #define BLERD_DIAG1_SEL_BB_V2ILDO                0x00000004
/** BB_V2I */
    #define BLERD_DIAG1_SEL_BB_V2I                   0x00000005
/** BB BGAP */
    #define BLERD_DIAG1_SEL_BB_BGAP                  0x00000006
/** BB LFLDO */
    #define BLERD_DIAG1_SEL_BB_LFLDO                 0x00000007
/** BB RCCAL */
    #define BLERD_DIAG1_SEL_BB_RCCAL                 0x00000008
/** BB Refcore */
    #define BLERD_DIAG1_SEL_BB_REFCORE               0x00000009
/** BB XO */
    #define BLERD_DIAG1_SEL_BB_XO                    0x0000000a
/** RX IBIAS */
    #define BLERD_DIAG1_SEL_RX_IBIAS                 0x0000000b
/** RX ADC */
    #define BLERD_DIAG1_SEL_RX_ADC                   0x0000000c
/** RX CBPF2 */
    #define BLERD_DIAG1_SEL_RX_CBPF2                 0x0000000d
/** RX CBPF1 */
    #define BLERD_DIAG1_SEL_RX_CBPF1                 0x0000000e
/** RX TIA */
    #define BLERD_DIAG1_SEL_RX_TIA                   0x0000000f
/** RX Mixer */
    #define BLERD_DIAG1_SEL_RX_MIXER                 0x00000010
/** RX LNA */
    #define BLERD_DIAG1_SEL_RX_LNA                   0x00000011
/** TX IBIAS */
    #define BLERD_DIAG1_SEL_TX_IBIAS                 0x00000012
/** TX DAC */
    #define BLERD_DIAG1_SEL_TX_DAC                   0x00000013
/** TX LPF */
    #define BLERD_DIAG1_SEL_TX_LPF                   0x00000014
/** TX Driver */
    #define BLERD_DIAG1_SEL_TX_DRIVER                0x00000016
/** SY LDO Lopath */
    #define BLERD_DIAG1_SEL_SY_LDO_LOPATH            0x00000017
/** SY LDO FFFB */
    #define BLERD_DIAG1_SEL_SY_LDO_FFFB              0x00000019
/** SY IBIAS */
    #define BLERD_DIAG1_SEL_SY_IBIAS                 0x0000001a
/** SY LO Path */
    #define BLERD_DIAG1_SEL_SY_LO_PATH               0x0000001b
/** SY_DIVN_FCAL */
    #define BLERD_DIAG1_SEL_SY_DIVN_FCAL             0x0000001d
/** SY_PDCPLPF */
    #define BLERD_DIAG1_SEL_SY_PDCPLPF               0x0000001e
/** Injection Monitor */
    #define BLERD_DIAG1_SEL_INJECTION_MONITOR        0x0000001f

#define BLERD_IM_ADDR                                0x00000064
#define BLERD_IM_MASK                                0x00007fff
/** Globally disable the monitor @multiple */
  #define BLERD_IM_DIAG_MON_DISABLE                0x0001
/** Monitor code, this determines from lock the monitor is being driven @multiple
   */
  #define BLERD_IM_DIAG_MONI_CODE(v)               ((BLERD_IM_DIAG_MONI_CODE_##v) << 1)
  #define BLERD_IM_DIAG_MONI_CODE_SET(x, v)        do { (x) = (((x) & ~0x1e) | ((BLERD_IM_DIAG_MONI_CODE_##v) << 1)); } while(0)
  #define BLERD_IM_DIAG_MONI_CODE_SETVAL(x, v)     do { (x) = (((x) & ~0x1e) | ((v) << 1)); } while(0)
  #define BLERD_IM_DIAG_MONI_CODE_GET(x)           (((x) >> 1) & 0xf)
/** DAC Outp / GND */
    #define BLERD_IM_DIAG_MONI_CODE_DAC_OUT_GND      0x00000001
/** I/I TIA */
    #define BLERD_IM_DIAG_MONI_CODE_II_TIA           0x00000004
/** I/I CBPF */
    #define BLERD_IM_DIAG_MONI_CODE_II_CBPF          0x00000004
/** I/Q CBPF */
    #define BLERD_IM_DIAG_MONI_CODE_IQ_CBPF          0x00000004
/** Q/Q TIA */
    #define BLERD_IM_DIAG_MONI_CODE_QQ_TIA           0x00000005
/** Q/Q CBPF */
    #define BLERD_IM_DIAG_MONI_CODE_QQ_CBPF          0x00000005
/** Q/I CBPF */
    #define BLERD_IM_DIAG_MONI_CODE_QI_CBPF          0x00000005
/** Globally disable the injection when set @multiple */
  #define BLERD_IM_DIAG_INJ_DISABLE                0x0020
/** injection code. This determines for which block is the injection enabled
   @multiple */
  #define BLERD_IM_DIAG_INJ_CODE(v)                ((BLERD_IM_DIAG_INJ_CODE_##v) << 6)
  #define BLERD_IM_DIAG_INJ_CODE_SET(x, v)         do { (x) = (((x) & ~0x3c0) | ((BLERD_IM_DIAG_INJ_CODE_##v) << 6)); } while(0)
  #define BLERD_IM_DIAG_INJ_CODE_SETVAL(x, v)      do { (x) = (((x) & ~0x3c0) | ((v) << 6)); } while(0)
  #define BLERD_IM_DIAG_INJ_CODE_GET(x)            (((x) >> 6) & 0xf)
/** Vin LPF */
    #define BLERD_IM_DIAG_INJ_CODE_VIN_LPF           0x00000001
/** I/I TIA */
    #define BLERD_IM_DIAG_INJ_CODE_II_TIA            0x00000004
/** Q/Q TIA */
    #define BLERD_IM_DIAG_INJ_CODE_QQ_TIA            0x00000005
/** I/Q TIA */
    #define BLERD_IM_DIAG_INJ_CODE_IQ_TIA            0x00000006
/** Q/I TIA */
    #define BLERD_IM_DIAG_INJ_CODE_QI_TIA            0x00000007
/** I/I ADC */
    #define BLERD_IM_DIAG_INJ_CODE_II_ADC            0x00000008
/** Q/Q ADC */
    #define BLERD_IM_DIAG_INJ_CODE_QQ_ADC            0x00000009
  #define BLERD_IM_DIAG_LOOPBACK(v)                ((BLERD_IM_DIAG_LOOPBACK_##v) << 10)
  #define BLERD_IM_DIAG_LOOPBACK_SET(x, v)         do { (x) = (((x) & ~0x400) | ((BLERD_IM_DIAG_LOOPBACK_##v) << 10)); } while(0)
  #define BLERD_IM_DIAG_LOOPBACK_SETVAL(x, v)      do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define BLERD_IM_DIAG_LOOPBACK_GET(x)            (((x) >> 10) & 0x1)
/** No monitor to injection loopback */
    #define BLERD_IM_DIAG_LOOPBACK_NONE              0x00000000
/** This will be used to monitor various outputs in the chip and inject them to on-chip ADC */
    #define BLERD_IM_DIAG_LOOPBACK_MONITOR           0x00000001
/** Inj OTA ref. voltage @multiple */
  #define BLERD_IM_IM_DIAG_BUMP(v)                 ((BLERD_IM_IM_DIAG_BUMP_##v) << 11)
  #define BLERD_IM_IM_DIAG_BUMP_SET(x, v)          do { (x) = (((x) & ~0x1800) | ((BLERD_IM_IM_DIAG_BUMP_##v) << 11)); } while(0)
  #define BLERD_IM_IM_DIAG_BUMP_SETVAL(x, v)       do { (x) = (((x) & ~0x1800) | ((v) << 11)); } while(0)
  #define BLERD_IM_IM_DIAG_BUMP_GET(x)             (((x) >> 11) & 0x3)
/** 0.9V */
    #define BLERD_IM_IM_DIAG_BUMP_0_9V               0x00000000
/** 1.0V */
    #define BLERD_IM_IM_DIAG_BUMP_1_0V               0x00000001
/** 1.1V */
    #define BLERD_IM_IM_DIAG_BUMP_1_1V               0x00000002
/** 0.8V */
    #define BLERD_IM_IM_DIAG_BUMP_0_8V               0x00000003
/** Mon OTA ref. voltage @multiple */
  #define BLERD_IM_IM_DIAG_BUMP(v)                 ((BLERD_IM_IM_DIAG_BUMP_##v) << 13)
  #define BLERD_IM_IM_DIAG_BUMP_SET(x, v)          do { (x) = (((x) & ~0x6000) | ((BLERD_IM_IM_DIAG_BUMP_##v) << 13)); } while(0)
  #define BLERD_IM_IM_DIAG_BUMP_SETVAL(x, v)       do { (x) = (((x) & ~0x6000) | ((v) << 13)); } while(0)
  #define BLERD_IM_IM_DIAG_BUMP_GET(x)             (((x) >> 13) & 0x3)
/** 0.9V */
    #define BLERD_IM_IM_DIAG_BUMP_0_9V               0x00000000
/** 1.0V */
    #define BLERD_IM_IM_DIAG_BUMP_1_0V               0x00000001
/** 1.1V */
    #define BLERD_IM_IM_DIAG_BUMP_1_1V               0x00000002
/** 0.8V */
    #define BLERD_IM_IM_DIAG_BUMP_0_8V               0x00000003

#define BLERD_LDO_BYPASS_ADDR                        0x00000068
#define BLERD_LDO_BYPASS_MASK                        0x0000000f
/** 1: Synth LDO_VCO is bypassed. It should not be enable if line voltage is more
   than 2.1V. This bit should not toggle in scan mode @multiple */
  #define BLERD_LDO_BYPASS_SYLDOVCO                0x0001
/** 1: Synth LDO_LOPATH is bypassed. It should not be enable if line voltage is
   more than 2.1V. This bit should not toggle in scan mode @multiple */
  #define BLERD_LDO_BYPASS_SYLDOLOPATH             0x0002
/** 1: Synth LDO_FFFB is bypassed. It should not be enable if line voltage is
   more than 2.1V. This bit should not toggle in scan mode @multiple */
  #define BLERD_LDO_BYPASS_SYLDOFFFB               0x0004
/** 1: BB SY HF LDO is bypassed. It should not be enable if line voltage is more
   than 2.1V. This bit should not toggle in scan mode @multiple */
  #define BLERD_LDO_BYPASS_HFLDO                   0x0008

#define BLERD_LDO_ADDR                               0x0000006c
#define BLERD_LDO_MASK                               0x00000fff
/** HF LDO output @multiple */
  #define BLERD_LDO_BUMP_BALUM_HF(v)               ((BLERD_LDO_BUMP_BALUM_HF_##v) << 0)
  #define BLERD_LDO_BUMP_BALUM_HF_SET(x, v)        do { (x) = (((x) & ~0x7) | ((BLERD_LDO_BUMP_BALUM_HF_##v) << 0)); } while(0)
  #define BLERD_LDO_BUMP_BALUM_HF_SETVAL(x, v)     do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define BLERD_LDO_BUMP_BALUM_HF_GET(x)           (((x) >> 0) & 0x7)
/** 1.800V */
    #define BLERD_LDO_BUMP_BALUM_HF_1_800V           0x00000000
/** 1.846V */
    #define BLERD_LDO_BUMP_BALUM_HF_1_846V           0x00000001
/** 1.894V */
    #define BLERD_LDO_BUMP_BALUM_HF_1_894V           0x00000002
/** 1.946V */
    #define BLERD_LDO_BUMP_BALUM_HF_1_946V           0x00000003
/** VCO LDO outputs @multiple */
  #define BLERD_LDO_BUMP_SY_VCO(v)                 ((BLERD_LDO_BUMP_SY_VCO_##v) << 3)
  #define BLERD_LDO_BUMP_SY_VCO_SET(x, v)          do { (x) = (((x) & ~0x18) | ((BLERD_LDO_BUMP_SY_VCO_##v) << 3)); } while(0)
  #define BLERD_LDO_BUMP_SY_VCO_SETVAL(x, v)       do { (x) = (((x) & ~0x18) | ((v) << 3)); } while(0)
  #define BLERD_LDO_BUMP_SY_VCO_GET(x)             (((x) >> 3) & 0x3)
/** 1.413V */
    #define BLERD_LDO_BUMP_SY_VCO_1_413V             0x00000000
/** 1.494V */
    #define BLERD_LDO_BUMP_SY_VCO_1_494V             0x00000001
/** 1.329V */
    #define BLERD_LDO_BUMP_SY_VCO_1_329V             0x00000002
/** 1.371V */
    #define BLERD_LDO_BUMP_SY_VCO_1_371V             0x00000003
/** LOPATH LDO outputs @multiple */
  #define BLERD_LDO_BUMP_SY_LOPATH(v)              ((BLERD_LDO_BUMP_SY_LOPATH_##v) << 5)
  #define BLERD_LDO_BUMP_SY_LOPATH_SET(x, v)       do { (x) = (((x) & ~0x60) | ((BLERD_LDO_BUMP_SY_LOPATH_##v) << 5)); } while(0)
  #define BLERD_LDO_BUMP_SY_LOPATH_SETVAL(x, v)    do { (x) = (((x) & ~0x60) | ((v) << 5)); } while(0)
  #define BLERD_LDO_BUMP_SY_LOPATH_GET(x)          (((x) >> 5) & 0x3)
/** 1.762V */
    #define BLERD_LDO_BUMP_SY_LOPATH_1_762V          0x00000000
/** 1.861V */
    #define BLERD_LDO_BUMP_SY_LOPATH_1_861V          0x00000001
/** 1.673V */
    #define BLERD_LDO_BUMP_SY_LOPATH_1_673V          0x00000002
/** 1.716V */
    #define BLERD_LDO_BUMP_SY_LOPATH_1_716V          0x00000003
/** HV LDO outputs @multiple */
  #define BLERD_LDO_BUMP_SY_LHV(v)                 ((BLERD_LDO_BUMP_SY_LHV_##v) << 7)
  #define BLERD_LDO_BUMP_SY_LHV_SET(x, v)          do { (x) = (((x) & ~0x180) | ((BLERD_LDO_BUMP_SY_LHV_##v) << 7)); } while(0)
  #define BLERD_LDO_BUMP_SY_LHV_SETVAL(x, v)       do { (x) = (((x) & ~0x180) | ((v) << 7)); } while(0)
  #define BLERD_LDO_BUMP_SY_LHV_GET(x)             (((x) >> 7) & 0x3)
/** 1.894V */
    #define BLERD_LDO_BUMP_SY_LHV_1_894V             0x00000000
/** 2.000V */
    #define BLERD_LDO_BUMP_SY_LHV_2_000V             0x00000001
/** 1.800V */
    #define BLERD_LDO_BUMP_SY_LHV_1_800V             0x00000002
/** 1.846V */
    #define BLERD_LDO_BUMP_SY_LHV_1_846V             0x00000003
/** FF and FB LDO outputs @multiple */
  #define BLERD_LDO_BUMP_SY_FFFB(v)                ((BLERD_LDO_BUMP_SY_FFFB_##v) << 9)
  #define BLERD_LDO_BUMP_SY_FFFB_SET(x, v)         do { (x) = (((x) & ~0xe00) | ((BLERD_LDO_BUMP_SY_FFFB_##v) << 9)); } while(0)
  #define BLERD_LDO_BUMP_SY_FFFB_SETVAL(x, v)      do { (x) = (((x) & ~0xe00) | ((v) << 9)); } while(0)
  #define BLERD_LDO_BUMP_SY_FFFB_GET(x)            (((x) >> 9) & 0x7)
/** 1.800V */
    #define BLERD_LDO_BUMP_SY_FFFB_1_800V            0x00000000
/** 1.846V */
    #define BLERD_LDO_BUMP_SY_FFFB_1_846V            0x00000001
/** 1.894V */
    #define BLERD_LDO_BUMP_SY_FFFB_1_894V            0x00000002
/** 1.946V */
    #define BLERD_LDO_BUMP_SY_FFFB_1_946V            0x00000003
/** 2.000V */
    #define BLERD_LDO_BUMP_SY_FFFB_2_000V            0x00000004
/** 1.649V */
    #define BLERD_LDO_BUMP_SY_FFFB_1_649V            0x00000005
/** 1.701V */
    #define BLERD_LDO_BUMP_SY_FFFB_1_701V            0x00000006
/** 1.756V */
    #define BLERD_LDO_BUMP_SY_FFFB_1_756V            0x00000007

#define BLERD_BB_BUMP1_ADDR                          0x00000070
#define BLERD_BB_BUMP1_MASK                          0x0000c7ff
/** Bump the Ibias current of Refcore @multiple */
  #define BLERD_BB_BUMP1_REFCORE_VDD(v)            ((BLERD_BB_BUMP1_REFCORE_VDD_##v) << 0)
  #define BLERD_BB_BUMP1_REFCORE_VDD_SET(x, v)     do { (x) = (((x) & ~0x3) | ((BLERD_BB_BUMP1_REFCORE_VDD_##v) << 0)); } while(0)
  #define BLERD_BB_BUMP1_REFCORE_VDD_SETVAL(x, v)  do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define BLERD_BB_BUMP1_REFCORE_VDD_GET(x)        (((x) >> 0) & 0x3)
/** 10.0uA */
    #define BLERD_BB_BUMP1_REFCORE_VDD_10_0U         0x00000000
/** 9.1uA */
    #define BLERD_BB_BUMP1_REFCORE_VDD_9_1U          0x00000001
/** 11.1uA */
    #define BLERD_BB_BUMP1_REFCORE_VDD_11_1U         0x00000002
/** 12.5uA */
    #define BLERD_BB_BUMP1_REFCORE_VDD_12_5U         0x00000003
/** V2I LDO output @multiple */
  #define BLERD_BB_BUMP1_V2I_REG(v)                ((BLERD_BB_BUMP1_V2I_REG_##v) << 2)
  #define BLERD_BB_BUMP1_V2I_REG_SET(x, v)         do { (x) = (((x) & ~0xc) | ((BLERD_BB_BUMP1_V2I_REG_##v) << 2)); } while(0)
  #define BLERD_BB_BUMP1_V2I_REG_SETVAL(x, v)      do { (x) = (((x) & ~0xc) | ((v) << 2)); } while(0)
  #define BLERD_BB_BUMP1_V2I_REG_GET(x)            (((x) >> 2) & 0x3)
/** 1.80V */
    #define BLERD_BB_BUMP1_V2I_REG_1_80V             0x00000000
/** 1.85V */
    #define BLERD_BB_BUMP1_V2I_REG_1_85V             0x00000001
/** 1.90V */
    #define BLERD_BB_BUMP1_V2I_REG_1_90V             0x00000002
/** 1.75V */
    #define BLERD_BB_BUMP1_V2I_REG_1_75V             0x00000003
/** Error Amp quiescent current @multiple */
  #define BLERD_BB_BUMP1_V2I_REG_ERROR(v)          ((BLERD_BB_BUMP1_V2I_REG_ERROR_##v) << 4)
  #define BLERD_BB_BUMP1_V2I_REG_ERROR_SET(x, v)   do { (x) = (((x) & ~0x10) | ((BLERD_BB_BUMP1_V2I_REG_ERROR_##v) << 4)); } while(0)
  #define BLERD_BB_BUMP1_V2I_REG_ERROR_SETVAL(x, v) do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define BLERD_BB_BUMP1_V2I_REG_ERROR_GET(x)      (((x) >> 4) & 0x1)
/** 10uA */
    #define BLERD_BB_BUMP1_V2I_REG_ERROR_10U         0x00000000
/** 5uA */
    #define BLERD_BB_BUMP1_V2I_REG_ERROR_5U          0x00000001
/** LF LDO Output @multiple */
  #define BLERD_BB_BUMP1_LFLDO(v)                  ((BLERD_BB_BUMP1_LFLDO_##v) << 5)
  #define BLERD_BB_BUMP1_LFLDO_SET(x, v)           do { (x) = (((x) & ~0xe0) | ((BLERD_BB_BUMP1_LFLDO_##v) << 5)); } while(0)
  #define BLERD_BB_BUMP1_LFLDO_SETVAL(x, v)        do { (x) = (((x) & ~0xe0) | ((v) << 5)); } while(0)
  #define BLERD_BB_BUMP1_LFLDO_GET(x)              (((x) >> 5) & 0x7)
/** 1.800V */
    #define BLERD_BB_BUMP1_LFLDO_1_800V              0x00000000
/** 1.846V */
    #define BLERD_BB_BUMP1_LFLDO_1_846V              0x00000001
/** 1.894V */
    #define BLERD_BB_BUMP1_LFLDO_1_894V              0x00000002
/** 1.946V */
    #define BLERD_BB_BUMP1_LFLDO_1_946V              0x00000003
/** 1.649V */
    #define BLERD_BB_BUMP1_LFLDO_1_649V              0x00000004
/** 1.649V */
    #define BLERD_BB_BUMP1_LFLDO_1_649V              0x00000005
/** 1.701V */
    #define BLERD_BB_BUMP1_LFLDO_1_701V              0x00000006
/** 1.756V */
    #define BLERD_BB_BUMP1_LFLDO_1_756V              0x00000007
/** LS LDO Output @multiple */
  #define BLERD_BB_BUMP1_LSLDO(v)                  ((BLERD_BB_BUMP1_LSLDO_##v) << 8)
  #define BLERD_BB_BUMP1_LSLDO_SET(x, v)           do { (x) = (((x) & ~0x700) | ((BLERD_BB_BUMP1_LSLDO_##v) << 8)); } while(0)
  #define BLERD_BB_BUMP1_LSLDO_SETVAL(x, v)        do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define BLERD_BB_BUMP1_LSLDO_GET(x)              (((x) >> 8) & 0x7)
/** 1.708V */
    #define BLERD_BB_BUMP1_LSLDO_1_708V              0x00000000
/** 1.747V */
    #define BLERD_BB_BUMP1_LSLDO_1_747V              0x00000001
/** 1.802V */
    #define BLERD_BB_BUMP1_LSLDO_1_802V              0x00000002
/** 1.849V */
    #define BLERD_BB_BUMP1_LSLDO_1_849V              0x00000003
/** 1.904V */
    #define BLERD_BB_BUMP1_LSLDO_1_904V              0x00000004
/** 1.552V */
    #define BLERD_BB_BUMP1_LSLDO_1_552V              0x00000005
/** 1.591V */
    #define BLERD_BB_BUMP1_LSLDO_1_591V              0x00000006
/** 1.650V */
    #define BLERD_BB_BUMP1_LSLDO_1_650V              0x00000007
/** 1: force BG start up @multiple */
  #define BLERD_BB_BUMP1_FORCE_BGSTARTUP           0x4000
/** 1: Force Power down for refcore @multiple */
  #define BLERD_BB_BUMP1_FPD_REFORCE               0x8000

#define BLERD_BB_BUMP2_ADDR                          0x00000074
#define BLERD_BB_BUMP2_MASK                          0x0000ffff
  #define BLERD_BB_BUMP2_V2I_RCAL(v)               ((BLERD_BB_BUMP2_V2I_RCAL_##v) << 0)
  #define BLERD_BB_BUMP2_V2I_RCAL_SET(x, v)        do { (x) = (((x) & ~0xf) | ((BLERD_BB_BUMP2_V2I_RCAL_##v) << 0)); } while(0)
  #define BLERD_BB_BUMP2_V2I_RCAL_SETVAL(x, v)     do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_BB_BUMP2_V2I_RCAL_GET(x)           (((x) >> 0) & 0xf)
/** 0% */
    #define BLERD_BB_BUMP2_V2I_RCAL_PLUS_0           0x00000000
/** -2.5% */
    #define BLERD_BB_BUMP2_V2I_RCAL_MINUS_2_5        0x00000001
/** -5% */
    #define BLERD_BB_BUMP2_V2I_RCAL_MINUS_5          0x00000002
/** -7.5% */
    #define BLERD_BB_BUMP2_V2I_RCAL_MINUS_7_5        0x00000003
/** -10% */
    #define BLERD_BB_BUMP2_V2I_RCAL_MINUS_10         0x00000004
/** Error Amp quiescent current @multiple */
  #define BLERD_BB_BUMP2_V2I_RCAL_ERROR(v)         ((BLERD_BB_BUMP2_V2I_RCAL_ERROR_##v) << 4)
  #define BLERD_BB_BUMP2_V2I_RCAL_ERROR_SET(x, v)  do { (x) = (((x) & ~0x10) | ((BLERD_BB_BUMP2_V2I_RCAL_ERROR_##v) << 4)); } while(0)
  #define BLERD_BB_BUMP2_V2I_RCAL_ERROR_SETVAL(x, v) do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define BLERD_BB_BUMP2_V2I_RCAL_ERROR_GET(x)     (((x) >> 4) & 0x1)
/** 10uA */
    #define BLERD_BB_BUMP2_V2I_RCAL_ERROR_10U        0x00000000
/** 5uA */
    #define BLERD_BB_BUMP2_V2I_RCAL_ERROR_5U         0x00000001
/** BGR current trim @multiple */
  #define BLERD_BB_BUMP2_V2I(v)                    ((BLERD_BB_BUMP2_V2I_##v) << 5)
  #define BLERD_BB_BUMP2_V2I_SET(x, v)             do { (x) = (((x) & ~0x1e0) | ((BLERD_BB_BUMP2_V2I_##v) << 5)); } while(0)
  #define BLERD_BB_BUMP2_V2I_SETVAL(x, v)          do { (x) = (((x) & ~0x1e0) | ((v) << 5)); } while(0)
  #define BLERD_BB_BUMP2_V2I_GET(x)                (((x) >> 5) & 0xf)
/** 0% */
    #define BLERD_BB_BUMP2_V2I_PLUS_0                0x00000000
/** -2.5% */
    #define BLERD_BB_BUMP2_V2I_MINUS_2_5             0x00000001
/** -5% */
    #define BLERD_BB_BUMP2_V2I_MINUS_5               0x00000002
/** -7.5% */
    #define BLERD_BB_BUMP2_V2I_MINUS_7_5             0x00000003
/** -10% */
    #define BLERD_BB_BUMP2_V2I_MINUS_10              0x00000004
/** -12.5% */
    #define BLERD_BB_BUMP2_V2I_MINUS_12_5            0x00000005
/** -15% */
    #define BLERD_BB_BUMP2_V2I_MINUS_15              0x00000006
/** -17.5% */
    #define BLERD_BB_BUMP2_V2I_MINUS_17_5            0x00000007
/** 20% */
    #define BLERD_BB_BUMP2_V2I_PLUS_20               0x00000008
/** 17.5% */
    #define BLERD_BB_BUMP2_V2I_PLUS_17_5             0x00000009
/** 15% */
    #define BLERD_BB_BUMP2_V2I_PLUS_15               0x0000000a
/** 12.5% */
    #define BLERD_BB_BUMP2_V2I_PLUS_12_5             0x0000000b
/** 10% */
    #define BLERD_BB_BUMP2_V2I_PLUS_10               0x0000000c
/** 7.5% */
    #define BLERD_BB_BUMP2_V2I_PLUS_7_5              0x0000000d
/** 5% */
    #define BLERD_BB_BUMP2_V2I_PLUS_5                0x0000000e
/** 2.5% */
    #define BLERD_BB_BUMP2_V2I_PLUS_2_5              0x0000000f
/** Error Amp quiescent current @multiple */
  #define BLERD_BB_BUMP2_V2I_ERROR(v)              ((BLERD_BB_BUMP2_V2I_ERROR_##v) << 9)
  #define BLERD_BB_BUMP2_V2I_ERROR_SET(x, v)       do { (x) = (((x) & ~0x200) | ((BLERD_BB_BUMP2_V2I_ERROR_##v) << 9)); } while(0)
  #define BLERD_BB_BUMP2_V2I_ERROR_SETVAL(x, v)    do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define BLERD_BB_BUMP2_V2I_ERROR_GET(x)          (((x) >> 9) & 0x1)
/** 10uA */
    #define BLERD_BB_BUMP2_V2I_ERROR_10U             0x00000000
/** 5uA */
    #define BLERD_BB_BUMP2_V2I_ERROR_5U              0x00000001
/** Bandgap voltage Trim @multiple */
  #define BLERD_BB_BUMP2_VBG_TRIM(v)               ((BLERD_BB_BUMP2_VBG_TRIM_##v) << 10)
  #define BLERD_BB_BUMP2_VBG_TRIM_SET(x, v)        do { (x) = (((x) & ~0x1c00) | ((BLERD_BB_BUMP2_VBG_TRIM_##v) << 10)); } while(0)
  #define BLERD_BB_BUMP2_VBG_TRIM_SETVAL(x, v)     do { (x) = (((x) & ~0x1c00) | ((v) << 10)); } while(0)
  #define BLERD_BB_BUMP2_VBG_TRIM_GET(x)           (((x) >> 10) & 0x7)
/** 0% */
    #define BLERD_BB_BUMP2_VBG_TRIM_NONE             0x00000000
/** 1.6% */
    #define BLERD_BB_BUMP2_VBG_TRIM_PLUS_1_6         0x00000001
/** 3.2% */
    #define BLERD_BB_BUMP2_VBG_TRIM_PLUS_3_2         0x00000002
/** 4.8% */
    #define BLERD_BB_BUMP2_VBG_TRIM_PLUS_4_8         0x00000003
/** 6.4% */
    #define BLERD_BB_BUMP2_VBG_TRIM_PLUS_6_4         0x00000004
/** -4.8% */
    #define BLERD_BB_BUMP2_VBG_TRIM_MINUS_4_8        0x00000005
/** -3.2% */
    #define BLERD_BB_BUMP2_VBG_TRIM_MINUS_3_2        0x00000006
/** -1.6% */
    #define BLERD_BB_BUMP2_VBG_TRIM_MINUS_1_6        0x00000007
/** current bump for SY_IBIAS_ENABLE @multiple */
  #define BLERD_BB_BUMP2_SY_IBIAS(v)               ((BLERD_BB_BUMP2_SY_IBIAS_##v) << 13)
  #define BLERD_BB_BUMP2_SY_IBIAS_SET(x, v)        do { (x) = (((x) & ~0x6000) | ((BLERD_BB_BUMP2_SY_IBIAS_##v) << 13)); } while(0)
  #define BLERD_BB_BUMP2_SY_IBIAS_SETVAL(x, v)     do { (x) = (((x) & ~0x6000) | ((v) << 13)); } while(0)
  #define BLERD_BB_BUMP2_SY_IBIAS_GET(x)           (((x) >> 13) & 0x3)
/** 0% */
    #define BLERD_BB_BUMP2_SY_IBIAS_NONE             0x00000000
/** +12.5% */
    #define BLERD_BB_BUMP2_SY_IBIAS_PLUS_ONE_EIGTH   0x00000001
/** -25% */
    #define BLERD_BB_BUMP2_SY_IBIAS_MINUS_ONE_FOURTH 0x00000002
/** -12.5% */
    #define BLERD_BB_BUMP2_SY_IBIAS_MINUS_ONE_EIGTH  0x00000003
  #define BLERD_BB_BUMP2_SY_IBIAS_TARGET(v)        ((BLERD_BB_BUMP2_SY_IBIAS_TARGET_##v) << 15)
  #define BLERD_BB_BUMP2_SY_IBIAS_TARGET_SET(x, v) do { (x) = (((x) & ~0x8000) | ((BLERD_BB_BUMP2_SY_IBIAS_TARGET_##v) << 15)); } while(0)
  #define BLERD_BB_BUMP2_SY_IBIAS_TARGET_SETVAL(x, v) do { (x) = (((x) & ~0x8000) | ((v) << 15)); } while(0)
  #define BLERD_BB_BUMP2_SY_IBIAS_TARGET_GET(x)    (((x) >> 15) & 0x1)
    #define BLERD_BB_BUMP2_SY_IBIAS_TARGET_BG        0x00000000
    #define BLERD_BB_BUMP2_SY_IBIAS_TARGET_RCAL      0x00000001

#define BLERD_BB_XO_ADDR                             0x00000078
#define BLERD_BB_XO_MASK                             0x0000ffff
/** Enables/Disables the supply filter of the XO core. @multiple */
  #define BLERD_BB_XO_DIS_XOCORE_SUPFILT(v)        ((BLERD_BB_XO_DIS_XOCORE_SUPFILT_##v) << 0)
  #define BLERD_BB_XO_DIS_XOCORE_SUPFILT_SET(x, v) do { (x) = (((x) & ~0x1) | ((BLERD_BB_XO_DIS_XOCORE_SUPFILT_##v) << 0)); } while(0)
  #define BLERD_BB_XO_DIS_XOCORE_SUPFILT_SETVAL(x, v) do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define BLERD_BB_XO_DIS_XOCORE_SUPFILT_GET(x)    (((x) >> 0) & 0x1)
/** Enabled */
    #define BLERD_BB_XO_DIS_XOCORE_SUPFILT_ENABLED   0x00000000
/** Disabled */
    #define BLERD_BB_XO_DIS_XOCORE_SUPFILT_DISABLED  0x00000001
/** Enables/Disables the RC faststart block in the XO. When enabled, this block
   provides a surge current at xo startup to reduce the settling time of the XO.
   @multiple */
  #define BLERD_BB_XO_EN_RE_FASTSTART(v)           ((BLERD_BB_XO_EN_RE_FASTSTART_##v) << 1)
  #define BLERD_BB_XO_EN_RE_FASTSTART_SET(x, v)    do { (x) = (((x) & ~0x2) | ((BLERD_BB_XO_EN_RE_FASTSTART_##v) << 1)); } while(0)
  #define BLERD_BB_XO_EN_RE_FASTSTART_SETVAL(x, v) do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define BLERD_BB_XO_EN_RE_FASTSTART_GET(x)       (((x) >> 1) & 0x1)
/** RC Fast start in XO is disabled */
    #define BLERD_BB_XO_EN_RE_FASTSTART_DISABLED     0x00000000
/** RC Fast start in XO is enabled */
    #define BLERD_BB_XO_EN_RE_FASTSTART_ENABLED      0x00000001
/** This bit is used to force startup of the positive feedback loop in the
   amplitude detect block of the XO. @multiple */
  #define BLERD_BB_XO_EN_CURMEAS(v)                ((BLERD_BB_XO_EN_CURMEAS_##v) << 2)
  #define BLERD_BB_XO_EN_CURMEAS_SET(x, v)         do { (x) = (((x) & ~0x4) | ((BLERD_BB_XO_EN_CURMEAS_##v) << 2)); } while(0)
  #define BLERD_BB_XO_EN_CURMEAS_SETVAL(x, v)      do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define BLERD_BB_XO_EN_CURMEAS_GET(x)            (((x) >> 2) & 0x1)
/** Normal startup */
    #define BLERD_BB_XO_EN_CURMEAS_NORMAL            0x00000000
/** startup forced */
    #define BLERD_BB_XO_EN_CURMEAS_FORCED            0x00000001
/** This bit can be used to disable all the caps on both X1 node and X2 node.
   @multiple */
  #define BLERD_BB_XO_EN_AMPDET_CURMEAS(v)         ((BLERD_BB_XO_EN_AMPDET_CURMEAS_##v) << 3)
  #define BLERD_BB_XO_EN_AMPDET_CURMEAS_SET(x, v)  do { (x) = (((x) & ~0x8) | ((BLERD_BB_XO_EN_AMPDET_CURMEAS_##v) << 3)); } while(0)
  #define BLERD_BB_XO_EN_AMPDET_CURMEAS_SETVAL(x, v) do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define BLERD_BB_XO_EN_AMPDET_CURMEAS_GET(x)     (((x) >> 3) & 0x1)
/** Caps Enabled */
    #define BLERD_BB_XO_EN_AMPDET_CURMEAS_CAPS_ENABLED 0x00000000
/** Caps disabled. Even when all the caps are disabled, due to finite on/off ratio of the caps, the cap on both X1 and X2 node is still 3.69pF */
    #define BLERD_BB_XO_EN_AMPDET_CURMEAS_CAPS_DISABLED 0x00000001
/** This bit is used to force startup of the vtnbyr circuit in the
   biasgen_and_reg block of the XO. @multiple */
  #define BLERD_BB_XO_EN_AMPDET_FASTSTART(v)       ((BLERD_BB_XO_EN_AMPDET_FASTSTART_##v) << 4)
  #define BLERD_BB_XO_EN_AMPDET_FASTSTART_SET(x, v) do { (x) = (((x) & ~0x10) | ((BLERD_BB_XO_EN_AMPDET_FASTSTART_##v) << 4)); } while(0)
  #define BLERD_BB_XO_EN_AMPDET_FASTSTART_SETVAL(x, v) do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define BLERD_BB_XO_EN_AMPDET_FASTSTART_GET(x)   (((x) >> 4) & 0x1)
/** Normal startup */
    #define BLERD_BB_XO_EN_AMPDET_FASTSTART_NORMAL_STARTUP 0x00000000
/** startup forced */
    #define BLERD_BB_XO_EN_AMPDET_FASTSTART_STARTUP_FORCED 0x00000001
/** Controls the time constant with which the surge current from rc_faststart
   block decays down to zero. @multiple */
  #define BLERD_BB_XO_CTRL_RC_FASTSTART_RES(v)     ((BLERD_BB_XO_CTRL_RC_FASTSTART_RES_##v) << 5)
  #define BLERD_BB_XO_CTRL_RC_FASTSTART_RES_SET(x, v) do { (x) = (((x) & ~0x60) | ((BLERD_BB_XO_CTRL_RC_FASTSTART_RES_##v) << 5)); } while(0)
  #define BLERD_BB_XO_CTRL_RC_FASTSTART_RES_SETVAL(x, v) do { (x) = (((x) & ~0x60) | ((v) << 5)); } while(0)
  #define BLERD_BB_XO_CTRL_RC_FASTSTART_RES_GET(x) (((x) >> 5) & 0x3)
/** 387us */
    #define BLERD_BB_XO_CTRL_RC_FASTSTART_RES_387US  0x00000000
/** 309us */
    #define BLERD_BB_XO_CTRL_RC_FASTSTART_RES_309US  0x00000001
/** 232us */
    #define BLERD_BB_XO_CTRL_RC_FASTSTART_RES_232US  0x00000002
/** 464us */
    #define BLERD_BB_XO_CTRL_RC_FASTSTART_RES_464US  0x00000003
/** Controls the value of supply filter resistance in the xo core. This in turn
   controls the supply volt- age at which the core runs. @multiple */
  #define BLERD_BB_XO_CTRL_VDDL_XO(v)              ((BLERD_BB_XO_CTRL_VDDL_XO_##v) << 7)
  #define BLERD_BB_XO_CTRL_VDDL_XO_SET(x, v)       do { (x) = (((x) & ~0x380) | ((BLERD_BB_XO_CTRL_VDDL_XO_##v) << 7)); } while(0)
  #define BLERD_BB_XO_CTRL_VDDL_XO_SETVAL(x, v)    do { (x) = (((x) & ~0x380) | ((v) << 7)); } while(0)
  #define BLERD_BB_XO_CTRL_VDDL_XO_GET(x)          (((x) >> 7) & 0x7)
/** 0.769k */
    #define BLERD_BB_XO_CTRL_VDDL_XO_0_769K          0x00000000
/** 0.877k */
    #define BLERD_BB_XO_CTRL_VDDL_XO_0_877K          0x00000001
/** 1.023k */
    #define BLERD_BB_XO_CTRL_VDDL_XO_1_023K          0x00000002
/** 1.152k */
    #define BLERD_BB_XO_CTRL_VDDL_XO_1_152K          0x00000003
/** 1.413k */
    #define BLERD_BB_XO_CTRL_VDDL_XO_1_413K          0x00000004
/** 1.537k */
    #define BLERD_BB_XO_CTRL_VDDL_XO_1_537K          0x00000005
/** 0.376k */
    #define BLERD_BB_XO_CTRL_VDDL_XO_0_376K          0x00000006
/** 0.559k */
    #define BLERD_BB_XO_CTRL_VDDL_XO_0_559K          0x00000007
/** Controls the value of supply filter resistance in the inverter chain. This in
   turn controls the supply voltage at which the inverter chain runs. @multiple
   */
  #define BLERD_BB_XO_CTRL_VDDL_XB(v)              ((BLERD_BB_XO_CTRL_VDDL_XB_##v) << 10)
  #define BLERD_BB_XO_CTRL_VDDL_XB_SET(x, v)       do { (x) = (((x) & ~0x1c00) | ((BLERD_BB_XO_CTRL_VDDL_XB_##v) << 10)); } while(0)
  #define BLERD_BB_XO_CTRL_VDDL_XB_SETVAL(x, v)    do { (x) = (((x) & ~0x1c00) | ((v) << 10)); } while(0)
  #define BLERD_BB_XO_CTRL_VDDL_XB_GET(x)          (((x) >> 10) & 0x7)
/** 1.028k */
    #define BLERD_BB_XO_CTRL_VDDL_XB_1_028K          0x00000000
/** 1.172k */
    #define BLERD_BB_XO_CTRL_VDDL_XB_1_172K          0x00000001
/** 1.367k */
    #define BLERD_BB_XO_CTRL_VDDL_XB_1_367K          0x00000002
/** 1.540k */
    #define BLERD_BB_XO_CTRL_VDDL_XB_1_540K          0x00000003
/** 1.889k */
    #define BLERD_BB_XO_CTRL_VDDL_XB_1_889K          0x00000004
/** 2.055k */
    #define BLERD_BB_XO_CTRL_VDDL_XB_2_055K          0x00000005
/** 0.503k */
    #define BLERD_BB_XO_CTRL_VDDL_XB_0_503K          0x00000006
/** 0.747k */
    #define BLERD_BB_XO_CTRL_VDDL_XB_0_747K          0x00000007
/** Controls the reference voltage fed as input to the regulators which generate
   vdd_xo and vdd_xb. @multiple */
  #define BLERD_BB_XO_CTRL_RPREF(v)                ((BLERD_BB_XO_CTRL_RPREF_##v) << 13)
  #define BLERD_BB_XO_CTRL_RPREF_SET(x, v)         do { (x) = (((x) & ~0x6000) | ((BLERD_BB_XO_CTRL_RPREF_##v) << 13)); } while(0)
  #define BLERD_BB_XO_CTRL_RPREF_SETVAL(x, v)      do { (x) = (((x) & ~0x6000) | ((v) << 13)); } while(0)
  #define BLERD_BB_XO_CTRL_RPREF_GET(x)            (((x) >> 13) & 0x3)
/** 1.289V */
    #define BLERD_BB_XO_CTRL_RPREF_1_289V            0x00000000
/** 1.227V */
    #define BLERD_BB_XO_CTRL_RPREF_1_227V            0x00000001
/** 1.164V */
    #define BLERD_BB_XO_CTRL_RPREF_1_164V            0x00000002
/** 1.382V */
    #define BLERD_BB_XO_CTRL_RPREF_1_382V            0x00000003
/** reserved for feature @multiple */
  #define BLERD_BB_XO_REV_BB_XO                    0x8000

#define BLERD_BB_XO_CAPTRIM_ADDR                     0x0000007c
#define BLERD_BB_XO_CAPTRIM_MASK                     0x0000ffff
  #define BLERD_BB_XO_CAPTRIM_X2_FINE(v)           ((BLERD_BB_XO_CAPTRIM_X2_FINE_##v) << 0)
  #define BLERD_BB_XO_CAPTRIM_X2_FINE_SET(x, v)    do { (x) = (((x) & ~0x7f) | ((BLERD_BB_XO_CAPTRIM_X2_FINE_##v) << 0)); } while(0)
  #define BLERD_BB_XO_CAPTRIM_X2_FINE_SETVAL(x, v) do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define BLERD_BB_XO_CAPTRIM_X2_FINE_GET(x)       (((x) >> 0) & 0x7f)
    #define BLERD_BB_XO_CAPTRIM_X2_FINE_3_6900PF     0x00000000
    #define BLERD_BB_XO_CAPTRIM_X2_FINE_3_7911PF     0x00000001
    #define BLERD_BB_XO_CAPTRIM_X2_FINE_3_8922PF     0x00000002
    #define BLERD_BB_XO_CAPTRIM_X2_FINE_16_4280PF    0x0000007f
  #define BLERD_BB_XO_CAPTRIM_X2_COARSE(v)         ((BLERD_BB_XO_CAPTRIM_X2_COARSE_##v) << 7)
  #define BLERD_BB_XO_CAPTRIM_X2_COARSE_SET(x, v)  do { (x) = (((x) & ~0x80) | ((BLERD_BB_XO_CAPTRIM_X2_COARSE_##v) << 7)); } while(0)
  #define BLERD_BB_XO_CAPTRIM_X2_COARSE_SETVAL(x, v) do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define BLERD_BB_XO_CAPTRIM_X2_COARSE_GET(x)     (((x) >> 7) & 0x1)
/** Add 8.1 pF */
    #define BLERD_BB_XO_CAPTRIM_X2_COARSE_8_1PF      0x00000001
  #define BLERD_BB_XO_CAPTRIM_X1_FINE(v)           ((BLERD_BB_XO_CAPTRIM_X1_FINE_##v) << 8)
  #define BLERD_BB_XO_CAPTRIM_X1_FINE_SET(x, v)    do { (x) = (((x) & ~0x7f00) | ((BLERD_BB_XO_CAPTRIM_X1_FINE_##v) << 8)); } while(0)
  #define BLERD_BB_XO_CAPTRIM_X1_FINE_SETVAL(x, v) do { (x) = (((x) & ~0x7f00) | ((v) << 8)); } while(0)
  #define BLERD_BB_XO_CAPTRIM_X1_FINE_GET(x)       (((x) >> 8) & 0x7f)
    #define BLERD_BB_XO_CAPTRIM_X1_FINE_3_6900PF     0x00000000
    #define BLERD_BB_XO_CAPTRIM_X1_FINE_3_7911PF     0x00000001
    #define BLERD_BB_XO_CAPTRIM_X1_FINE_3_8922PF     0x00000002
    #define BLERD_BB_XO_CAPTRIM_X1_FINE_16_4280PF    0x0000007f
  #define BLERD_BB_XO_CAPTRIM_X1_COARSE(v)         ((BLERD_BB_XO_CAPTRIM_X1_COARSE_##v) << 15)
  #define BLERD_BB_XO_CAPTRIM_X1_COARSE_SET(x, v)  do { (x) = (((x) & ~0x8000) | ((BLERD_BB_XO_CAPTRIM_X1_COARSE_##v) << 15)); } while(0)
  #define BLERD_BB_XO_CAPTRIM_X1_COARSE_SETVAL(x, v) do { (x) = (((x) & ~0x8000) | ((v) << 15)); } while(0)
  #define BLERD_BB_XO_CAPTRIM_X1_COARSE_GET(x)     (((x) >> 15) & 0x1)
/** Add 8.1 pF */
    #define BLERD_BB_XO_CAPTRIM_X1_COARSE_8_1PF      0x00000001

#define BLERD_SY_BUMP1_ADDR                          0x00000080
#define BLERD_SY_BUMP1_MASK                          0x0000ffff
/** Bump bits for SY VCO block. Rt VCO (2 bits) - sy_bump1_vco [3:2] @multiple */
  #define BLERD_SY_BUMP1_VCO(v)                    ((BLERD_SY_BUMP1_VCO_##v) << 0)
  #define BLERD_SY_BUMP1_VCO_SET(x, v)             do { (x) = (((x) & ~0xf) | ((BLERD_SY_BUMP1_VCO_##v) << 0)); } while(0)
  #define BLERD_SY_BUMP1_VCO_SETVAL(x, v)          do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_SY_BUMP1_VCO_GET(x)                (((x) >> 0) & 0xf)
/** ~ 50 Ohms */
    #define BLERD_SY_BUMP1_VCO_50_OHMS               0x00000000
/** ~ 58 Ohms */
    #define BLERD_SY_BUMP1_VCO_58_OHMS               0x00000000
/** ~ 30 Ohms */
    #define BLERD_SY_BUMP1_VCO_30_OHMS               0x00000001
/** ~ 39 Ohms */
    #define BLERD_SY_BUMP1_VCO_39_OHMS               0x00000001
/** ~ 22 Ohms */
    #define BLERD_SY_BUMP1_VCO_22_OHMS               0x00000002
/** ~ 22 Ohms */
    #define BLERD_SY_BUMP1_VCO_22_OHMS               0x00000002
/** ~ 16 Ohms and Rb VCO (2 bits) - sy_bump1_vco[1:0] */
    #define BLERD_SY_BUMP1_VCO_16_OHMS               0x00000003
/** ~ 16 Ohms */
    #define BLERD_SY_BUMP1_VCO_16_OHMS               0x00000003
  #define BLERD_SY_BUMP1_LOFB_POWERSAVE(v)         ((BLERD_SY_BUMP1_LOFB_POWERSAVE_##v) << 4)
  #define BLERD_SY_BUMP1_LOFB_POWERSAVE_SET(x, v)  do { (x) = (((x) & ~0x10) | ((BLERD_SY_BUMP1_LOFB_POWERSAVE_##v) << 4)); } while(0)
  #define BLERD_SY_BUMP1_LOFB_POWERSAVE_SETVAL(x, v) do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define BLERD_SY_BUMP1_LOFB_POWERSAVE_GET(x)     (((x) >> 4) & 0x1)
/** disable powersave for LOFB buffer */
    #define BLERD_SY_BUMP1_LOFB_POWERSAVE_DISABLE_POWERSAVE_FOR_LOFB_BUFFER 0x00000000
/** enable powersave for LOFB buffer */
    #define BLERD_SY_BUMP1_LOFB_POWERSAVE_ENABLE_POWERSAVE_FOR_LOFB_BUFFER 0x00000001
/** bump bits for clkbias in lopath bump clk bias pM clk bias nM @multiple */
  #define BLERD_SY_BUMP1_IBIAS_LOPATH(v)           ((BLERD_SY_BUMP1_IBIAS_LOPATH_##v) << 5)
  #define BLERD_SY_BUMP1_IBIAS_LOPATH_SET(x, v)    do { (x) = (((x) & ~0x60) | ((BLERD_SY_BUMP1_IBIAS_LOPATH_##v) << 5)); } while(0)
  #define BLERD_SY_BUMP1_IBIAS_LOPATH_SETVAL(x, v) do { (x) = (((x) & ~0x60) | ((v) << 5)); } while(0)
  #define BLERD_SY_BUMP1_IBIAS_LOPATH_GET(x)       (((x) >> 5) & 0x3)
/** 0        vddo-vgsp              vgsn */
    #define BLERD_SY_BUMP1_IBIAS_LOPATH_0_VDDO_VGSP_VGSN 0x00000000
/** 1        vddlo-vgsp-100m    vgsn+100m */
    #define BLERD_SY_BUMP1_IBIAS_LOPATH_1_VDDLO_VGSP_100M_VGSN_100M 0x00000000
/** 0        vddlo-vgsp-200m    vgsn+200m */
    #define BLERD_SY_BUMP1_IBIAS_LOPATH_0_VDDLO_VGSP_200M_VGSN_200M 0x00000001
/** 1        vddlo-vgsp-400m    vgsn+400m */
    #define BLERD_SY_BUMP1_IBIAS_LOPATH_1_VDDLO_VGSP_400M_VGSN_400M 0x00000001
  #define BLERD_SY_BUMP1_LDOLO_FORCE_STARTUP(v)    ((BLERD_SY_BUMP1_LDOLO_FORCE_STARTUP_##v) << 7)
  #define BLERD_SY_BUMP1_LDOLO_FORCE_STARTUP_SET(x, v) do { (x) = (((x) & ~0x80) | ((BLERD_SY_BUMP1_LDOLO_FORCE_STARTUP_##v) << 7)); } while(0)
  #define BLERD_SY_BUMP1_LDOLO_FORCE_STARTUP_SETVAL(x, v) do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define BLERD_SY_BUMP1_LDOLO_FORCE_STARTUP_GET(x) (((x) >> 7) & 0x1)
/** no force start-up */
    #define BLERD_SY_BUMP1_LDOLO_FORCE_STARTUP_NO_FORCE_START_UP 0x00000000
/** force start-up of the VT/R circuit in VCOLOPATH LCO */
    #define BLERD_SY_BUMP1_LDOLO_FORCE_STARTUP_FORCE_START_UP_OF_THE_VT_R_CIRCUIT_IN_VCOLOPATH_LCO 0x00000001
/** Bump bits for LO path bulk bias. Goes to DIVN/FCAL/LOPATH for bumps. 2 bits
   for pBulk [3:2] and 2 bits for nBulk[1:0]. bump pbulk @multiple */
  #define BLERD_SY_BUMP1_LOPATH(v)                 ((BLERD_SY_BUMP1_LOPATH_##v) << 8)
  #define BLERD_SY_BUMP1_LOPATH_SET(x, v)          do { (x) = (((x) & ~0xf00) | ((BLERD_SY_BUMP1_LOPATH_##v) << 8)); } while(0)
  #define BLERD_SY_BUMP1_LOPATH_SETVAL(x, v)       do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define BLERD_SY_BUMP1_LOPATH_GET(x)             (((x) >> 8) & 0xf)
/** vddx-380mV */
    #define BLERD_SY_BUMP1_LOPATH_VDDX_380MV         0x00000000
/** vddx-320mV */
    #define BLERD_SY_BUMP1_LOPATH_VDDX_320MV         0x00000001
/** vddx-440mV */
    #define BLERD_SY_BUMP1_LOPATH_VDDX_440MV         0x00000002
/** vddx */
    #define BLERD_SY_BUMP1_LOPATH_VDDX               0x00000003
/** Bump for PD CP and LPF blocks.[2:0] is used to get range of -20%to +15% in 5%
   steps. ICP_BUMP[2:0] ICP @multiple */
  #define BLERD_SY_BUMP1_PDCPLPF(v)                ((BLERD_SY_BUMP1_PDCPLPF_##v) << 12)
  #define BLERD_SY_BUMP1_PDCPLPF_SET(x, v)         do { (x) = (((x) & ~0xf000) | ((BLERD_SY_BUMP1_PDCPLPF_##v) << 12)); } while(0)
  #define BLERD_SY_BUMP1_PDCPLPF_SETVAL(x, v)      do { (x) = (((x) & ~0xf000) | ((v) << 12)); } while(0)
  #define BLERD_SY_BUMP1_PDCPLPF_GET(x)            (((x) >> 12) & 0xf)
/** 00% */
    #define BLERD_SY_BUMP1_PDCPLPF_00                0x00000000
/** 05% */
    #define BLERD_SY_BUMP1_PDCPLPF_05                0x00000001
/** 10% */
    #define BLERD_SY_BUMP1_PDCPLPF_10                0x00000002
/** 15%. */
    #define BLERD_SY_BUMP1_PDCPLPF_15                0x00000003
/** -20% */
    #define BLERD_SY_BUMP1_PDCPLPF_20                0x00000004
/** -15% */
    #define BLERD_SY_BUMP1_PDCPLPF_15                0x00000005
/** -10% */
    #define BLERD_SY_BUMP1_PDCPLPF_10                0x00000006
/** -05% */
    #define BLERD_SY_BUMP1_PDCPLPF_05                0x00000007

#define BLERD_SY_BUMP2_ADDR                          0x00000084
#define BLERD_SY_BUMP2_MASK                          0x0000ffff
/** VCTRL bias voltage is selected based on these bits. Code[1:0] fcal_bias
   @multiple */
  #define BLERD_SY_BUMP2_FCAL_BIAS_SEL(v)          ((BLERD_SY_BUMP2_FCAL_BIAS_SEL_##v) << 0)
  #define BLERD_SY_BUMP2_FCAL_BIAS_SEL_SET(x, v)   do { (x) = (((x) & ~0x3) | ((BLERD_SY_BUMP2_FCAL_BIAS_SEL_##v) << 0)); } while(0)
  #define BLERD_SY_BUMP2_FCAL_BIAS_SEL_SETVAL(x, v) do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define BLERD_SY_BUMP2_FCAL_BIAS_SEL_GET(x)      (((x) >> 0) & 0x3)
/** Vddvco/2 */
    #define BLERD_SY_BUMP2_FCAL_BIAS_SEL_VDDVCO_2    0x00000000
/** Vddvco/2 +  5.6%(+100mV) */
    #define BLERD_SY_BUMP2_FCAL_BIAS_SEL_VDDVCO_2_5  0x00000001
/** Vddvco/2 -  2.8%(-050mV) */
    #define BLERD_SY_BUMP2_FCAL_BIAS_SEL_VDDVCO_2_2  0x00000002
/** Vddvco/2 -  5.6%(-100mV) */
    #define BLERD_SY_BUMP2_FCAL_BIAS_SEL_VDDVCO_2_5  0x00000003
/** ACAP bias voltage is selected based on these bits. Code[1:0] acapbias
   @multiple */
  #define BLERD_SY_BUMP2_ACAP_BIAS_SEL(v)          ((BLERD_SY_BUMP2_ACAP_BIAS_SEL_##v) << 2)
  #define BLERD_SY_BUMP2_ACAP_BIAS_SEL_SET(x, v)   do { (x) = (((x) & ~0xc) | ((BLERD_SY_BUMP2_ACAP_BIAS_SEL_##v) << 2)); } while(0)
  #define BLERD_SY_BUMP2_ACAP_BIAS_SEL_SETVAL(x, v) do { (x) = (((x) & ~0xc) | ((v) << 2)); } while(0)
  #define BLERD_SY_BUMP2_ACAP_BIAS_SEL_GET(x)      (((x) >> 2) & 0x3)
/** 630mV */
    #define BLERD_SY_BUMP2_ACAP_BIAS_SEL_630MV       0x00000000
/** 700mV */
    #define BLERD_SY_BUMP2_ACAP_BIAS_SEL_700MV       0x00000001
/** 560mV */
    #define BLERD_SY_BUMP2_ACAP_BIAS_SEL_560MV       0x00000002
/** 595mV */
    #define BLERD_SY_BUMP2_ACAP_BIAS_SEL_595MV       0x00000003
/** sy_bump2_icp_xfactor[1]: enable power save for SY FB buffers in TXPOWERSAVE
   mode, high active sy_bump2_icp_xfactor[0]: HSDIV2 is put in self oscillation
   mode, this can be used to find out the process corner of the chip, high active
   @multiple */
  #define BLERD_SY_BUMP2_ICP_XFACTOR(v)            ((v) << 4)
  #define BLERD_SY_BUMP2_ICP_XFACTOR_SET(x, v)     do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define BLERD_SY_BUMP2_ICP_XFACTOR_GET(x)        (((x) >> 4) & 0x3)
/** Bump bits to set the offset pulse width in RX mode Code[1:0] delay @multiple
   */
  #define BLERD_SY_BUMP2_ICP_OFFSET(v)             ((BLERD_SY_BUMP2_ICP_OFFSET_##v) << 6)
  #define BLERD_SY_BUMP2_ICP_OFFSET_SET(x, v)      do { (x) = (((x) & ~0xc0) | ((BLERD_SY_BUMP2_ICP_OFFSET_##v) << 6)); } while(0)
  #define BLERD_SY_BUMP2_ICP_OFFSET_SETVAL(x, v)   do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define BLERD_SY_BUMP2_ICP_OFFSET_GET(x)         (((x) >> 6) & 0x3)
/** 2.45n */
    #define BLERD_SY_BUMP2_ICP_OFFSET_2              0x00000000
/** 1.75ns */
    #define BLERD_SY_BUMP2_ICP_OFFSET_1              0x00000001
/** 1.3ns */
    #define BLERD_SY_BUMP2_ICP_OFFSET_1              0x00000002
/** 25ps */
    #define BLERD_SY_BUMP2_ICP_OFFSET_25PS           0x00000003
/** Control the NC_clock_mux. @multiple */
  #define BLERD_SY_BUMP2_CLKNC_MODE(v)             ((BLERD_SY_BUMP2_CLKNC_MODE_##v) << 8)
  #define BLERD_SY_BUMP2_CLKNC_MODE_SET(x, v)      do { (x) = (((x) & ~0x100) | ((BLERD_SY_BUMP2_CLKNC_MODE_##v) << 8)); } while(0)
  #define BLERD_SY_BUMP2_CLKNC_MODE_SETVAL(x, v)   do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define BLERD_SY_BUMP2_CLKNC_MODE_GET(x)         (((x) >> 8) & 0x1)
/** The NC clock is given from DIVN once openloop is made low. */
    #define BLERD_SY_BUMP2_CLKNC_MODE_THE_NC_CLOCK_IS_GIVEN_FROM_DIVN_ONCE_OPENLOOP_IS_MADE_LOW 0x00000000
/** The NC clock is always connected to Crystal clock */
    #define BLERD_SY_BUMP2_CLKNC_MODE_THE_NC_CLOCK_IS_ALWAYS_CONNECTED_TO_CRYSTAL_CLOCK 0x00000001
/** 1:Test mode to monitor buffered 1x output on the injmon buffer @multiple */
  #define BLERD_SY_BUMP2_PUP_MON                   0x0200
/** 1: Test mode to pull down for noise simulation @multiple */
  #define BLERD_SY_BUMP2_VCTRL_PULLDN              0x0400
/** 1: Pull down control for the modulating port @multiple */
  #define BLERD_SY_BUMP2_VMOD_PULLDN               0x0800
/** Bumping the reset (up+down) delay. Code[1:0] delay @multiple */
  #define BLERD_SY_BUMP2_RST_DLY(v)                ((BLERD_SY_BUMP2_RST_DLY_##v) << 12)
  #define BLERD_SY_BUMP2_RST_DLY_SET(x, v)         do { (x) = (((x) & ~0x3000) | ((BLERD_SY_BUMP2_RST_DLY_##v) << 12)); } while(0)
  #define BLERD_SY_BUMP2_RST_DLY_SETVAL(x, v)      do { (x) = (((x) & ~0x3000) | ((v) << 12)); } while(0)
  #define BLERD_SY_BUMP2_RST_DLY_GET(x)            (((x) >> 12) & 0x3)
/** 500ps */
    #define BLERD_SY_BUMP2_RST_DLY_500PS             0x00000000
/** 424ps */
    #define BLERD_SY_BUMP2_RST_DLY_424PS             0x00000001
/** 350ps */
    #define BLERD_SY_BUMP2_RST_DLY_350PS             0x00000002
/** 300ps */
    #define BLERD_SY_BUMP2_RST_DLY_300PS             0x00000003
/** Bump for the bias voltage of the 8x node. sel[1:0] R2 Vbp @multiple */
  #define BLERD_SY_BUMP2_PDCP_OFFSET(v)            ((BLERD_SY_BUMP2_PDCP_OFFSET_##v) << 14)
  #define BLERD_SY_BUMP2_PDCP_OFFSET_SET(x, v)     do { (x) = (((x) & ~0xc000) | ((BLERD_SY_BUMP2_PDCP_OFFSET_##v) << 14)); } while(0)
  #define BLERD_SY_BUMP2_PDCP_OFFSET_SETVAL(x, v)  do { (x) = (((x) & ~0xc000) | ((v) << 14)); } while(0)
  #define BLERD_SY_BUMP2_PDCP_OFFSET_GET(x)        (((x) >> 14) & 0x3)
/** 38.5k   925mV  (Default) */
    #define BLERD_SY_BUMP2_PDCP_OFFSET_38            0x00000000
/** 43.0k   925mV+108mV */
    #define BLERD_SY_BUMP2_PDCP_OFFSET_43            0x00000001
/** 31.9k   925mV-158mV */
    #define BLERD_SY_BUMP2_PDCP_OFFSET_31            0x00000002
/** 35.2k   925mV-080mV */
    #define BLERD_SY_BUMP2_PDCP_OFFSET_35            0x00000003

#define BLERD_TX_BUMP1_ADDR                          0x00000088
#define BLERD_TX_BUMP1_MASK                          0x0000ffff
/** Driver bias current selection bump bit tx_bump1_tx_driver[3] Driver bias
   current tx_bump1_tx_driver[0] PTAT current selection Additional Class AB
   driver bias voltage bump related to Tx_bump2_drv_ab_vbias[3:0] @multiple */
  #define BLERD_TX_BUMP1_TX_DRIVER(v)              ((v) << 0)
  #define BLERD_TX_BUMP1_TX_DRIVER_SET(x, v)       do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_TX_BUMP1_TX_DRIVER_GET(x)          (((x) >> 0) & 0xf)
/** Bumping the reset (up+down) delay. @multiple */
  #define BLERD_TX_BUMP1_SY_RST_DLY_TX(v)          ((BLERD_TX_BUMP1_SY_RST_DLY_TX_##v) << 4)
  #define BLERD_TX_BUMP1_SY_RST_DLY_TX_SET(x, v)   do { (x) = (((x) & ~0x30) | ((BLERD_TX_BUMP1_SY_RST_DLY_TX_##v) << 4)); } while(0)
  #define BLERD_TX_BUMP1_SY_RST_DLY_TX_SETVAL(x, v) do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define BLERD_TX_BUMP1_SY_RST_DLY_TX_GET(x)      (((x) >> 4) & 0x3)
/** 500ps */
    #define BLERD_TX_BUMP1_SY_RST_DLY_TX_500PS       0x00000000
/** 424ps */
    #define BLERD_TX_BUMP1_SY_RST_DLY_TX_424PS       0x00000001
/** 350ps */
    #define BLERD_TX_BUMP1_SY_RST_DLY_TX_350PS       0x00000002
/** 300ps */
    #define BLERD_TX_BUMP1_SY_RST_DLY_TX_300PS       0x00000003
/** Bump bits for TX LPF op-amp bias current @multiple */
  #define BLERD_TX_BUMP1_TX_LPF_BIAS(v)            ((BLERD_TX_BUMP1_TX_LPF_BIAS_##v) << 6)
  #define BLERD_TX_BUMP1_TX_LPF_BIAS_SET(x, v)     do { (x) = (((x) & ~0xc0) | ((BLERD_TX_BUMP1_TX_LPF_BIAS_##v) << 6)); } while(0)
  #define BLERD_TX_BUMP1_TX_LPF_BIAS_SETVAL(x, v)  do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define BLERD_TX_BUMP1_TX_LPF_BIAS_GET(x)        (((x) >> 6) & 0x3)
/** Bumps the opamp bias current  to 10u */
    #define BLERD_TX_BUMP1_TX_LPF_BIAS_10U           0x00000000
/** Bumps the opamp bias current  to 12.5u */
    #define BLERD_TX_BUMP1_TX_LPF_BIAS_12_5U         0x00000001
/** Bumps the opamp bias current  to 8.3u */
    #define BLERD_TX_BUMP1_TX_LPF_BIAS_8_3U          0x00000002
/** Bumps the opamp bias current  to 7.7u */
    #define BLERD_TX_BUMP1_TX_LPF_BIAS_7_7U          0x00000003
/** Bump bits for TX LPF op-amp reference voltage @multiple */
  #define BLERD_TX_BUMP1_TX_LPF_REF(v)             ((BLERD_TX_BUMP1_TX_LPF_REF_##v) << 8)
  #define BLERD_TX_BUMP1_TX_LPF_REF_SET(x, v)      do { (x) = (((x) & ~0x300) | ((BLERD_TX_BUMP1_TX_LPF_REF_##v) << 8)); } while(0)
  #define BLERD_TX_BUMP1_TX_LPF_REF_SETVAL(x, v)   do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define BLERD_TX_BUMP1_TX_LPF_REF_GET(x)         (((x) >> 8) & 0x3)
/** Bumps the opamp ref voltage to 400mV */
    #define BLERD_TX_BUMP1_TX_LPF_REF_400MV          0x00000000
/** Bumps the opamp ref voltage to 450mV */
    #define BLERD_TX_BUMP1_TX_LPF_REF_450MV          0x00000001
/** Bumps the opamp ref voltage to 300mV */
    #define BLERD_TX_BUMP1_TX_LPF_REF_300MV          0x00000002
/** Bumps the opamp ref voltage to 350mV */
    #define BLERD_TX_BUMP1_TX_LPF_REF_350MV          0x00000003
/** TX Modulation port varactor vtxref bias voltage bump settings @multiple */
  #define BLERD_TX_BUMP1_TX_VTXREF_PROG(v)         ((BLERD_TX_BUMP1_TX_VTXREF_PROG_##v) << 10)
  #define BLERD_TX_BUMP1_TX_VTXREF_PROG_SET(x, v)  do { (x) = (((x) & ~0x3c00) | ((BLERD_TX_BUMP1_TX_VTXREF_PROG_##v) << 10)); } while(0)
  #define BLERD_TX_BUMP1_TX_VTXREF_PROG_SETVAL(x, v) do { (x) = (((x) & ~0x3c00) | ((v) << 10)); } while(0)
  #define BLERD_TX_BUMP1_TX_VTXREF_PROG_GET(x)     (((x) >> 10) & 0xf)
/** Sets  vtxref value to 100mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_100MV      0x00000000
/** Sets  vtxref value to 150mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_150MV      0x00000001
/** Sets  vtxref value to 200mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_200MV      0x00000002
/** Sets  vtxref value to 250mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_250MV      0x00000003
/** Sets  vtxref value to 300mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_300MV      0x00000004
/** Sets  vtxref value to 350mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_350MV      0x00000005
/** Sets  vtxref value to 400mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_400MV      0x00000006
/** Sets  vtxref value to 450mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_450MV      0x00000007
/** Sets  vtxref value to 500mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_500MV      0x00000008
/** Sets  vtxref value to 550mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_550MV      0x00000009
/** Sets  vtxref value to 600mV */
    #define BLERD_TX_BUMP1_TX_VTXREF_PROG_600MV      0x0000000a
/** Divn power save bits pup freeze txpowersave<1:0> PupBlocks 0 0 X X NONE 1 0 X
   X ALL 1 1 0 0 ALL 1 1 0 1 ALL-D2 1 1 1 0 ALL-D2-D1 1 1 1 1 ALL-D2-D1-Buf
   @multiple */
  #define BLERD_TX_BUMP1_SY_DIVN_TXPOWERSAVE(v)    ((v) << 14)
  #define BLERD_TX_BUMP1_SY_DIVN_TXPOWERSAVE_SET(x, v) do { (x) = (((x) & ~0xc000) | ((v) << 14)); } while(0)
  #define BLERD_TX_BUMP1_SY_DIVN_TXPOWERSAVE_GET(x) (((x) >> 14) & 0x3)

#define BLERD_TX_BUMP2_ADDR                          0x0000008c
#define BLERD_TX_BUMP2_MASK                          0x0000ffff
/** Bias voltage for the class-AB driver with tx_bump1_tx_driver[1:0]=00
   Tx_bump2_drv_ab_vbias[3:0] Vbias_AB , mV @multiple */
  #define BLERD_TX_BUMP2_DRV_AB_VBIAS(v)           ((BLERD_TX_BUMP2_DRV_AB_VBIAS_##v) << 0)
  #define BLERD_TX_BUMP2_DRV_AB_VBIAS_SET(x, v)    do { (x) = (((x) & ~0xf) | ((BLERD_TX_BUMP2_DRV_AB_VBIAS_##v) << 0)); } while(0)
  #define BLERD_TX_BUMP2_DRV_AB_VBIAS_SETVAL(x, v) do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_TX_BUMP2_DRV_AB_VBIAS_GET(x)       (((x) >> 0) & 0xf)
/** 571.224 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_571          0x00000000
/** 604.508 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_604          0x00000001
/** 626.357 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_626          0x00000002
/** 641.856 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_641          0x00000003
/** 656.04 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_656          0x00000004
/** 667.096 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_667          0x00000005
/** 678.775 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_678          0x00000006
/** 688.005 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_688          0x00000007
/** 698.817 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_698          0x00000008
/** 707.272 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_707          0x00000009
/** 718.103 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_718          0x0000000a
/** 726.411 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_726          0x0000000b
/** 737.995 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_737          0x0000000c
/** 746.708 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_746          0x0000000d
/** 759.919 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_759          0x0000000e
/** 769.735 */
    #define BLERD_TX_BUMP2_DRV_AB_VBIAS_769          0x0000000f
/** Programs the driver cascode gate bias voltage @multiple */
  #define BLERD_TX_BUMP2_DRV_VCASCH(v)             ((BLERD_TX_BUMP2_DRV_VCASCH_##v) << 4)
  #define BLERD_TX_BUMP2_DRV_VCASCH_SET(x, v)      do { (x) = (((x) & ~0x30) | ((BLERD_TX_BUMP2_DRV_VCASCH_##v) << 4)); } while(0)
  #define BLERD_TX_BUMP2_DRV_VCASCH_SETVAL(x, v)   do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define BLERD_TX_BUMP2_DRV_VCASCH_GET(x)         (((x) >> 4) & 0x3)
/** Vdd_driver + 0.3V */
    #define BLERD_TX_BUMP2_DRV_VCASCH_0_3V           0x00000000
/** Vdd_driver + 0.2V */
    #define BLERD_TX_BUMP2_DRV_VCASCH_0_2V           0x00000001
/** Vdd_driver + 0.1V */
    #define BLERD_TX_BUMP2_DRV_VCASCH_0_1V           0x00000002
/** Vdd_driver */
    #define BLERD_TX_BUMP2_DRV_VCASCH_0V             0x00000003
/** Enables a bandgap (low temp coeff) for the @multiple */
  #define BLERD_TX_BUMP2_SY_LDOBGREF_EN(v)         ((BLERD_TX_BUMP2_SY_LDOBGREF_EN_##v) << 6)
  #define BLERD_TX_BUMP2_SY_LDOBGREF_EN_SET(x, v)  do { (x) = (((x) & ~0xc0) | ((BLERD_TX_BUMP2_SY_LDOBGREF_EN_##v) << 6)); } while(0)
  #define BLERD_TX_BUMP2_SY_LDOBGREF_EN_SETVAL(x, v) do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define BLERD_TX_BUMP2_SY_LDOBGREF_EN_GET(x)     (((x) >> 6) & 0x3)
/** None */
    #define BLERD_TX_BUMP2_SY_LDOBGREF_EN_NONE       0x00000000
/** VCO ldo */
    #define BLERD_TX_BUMP2_SY_LDOBGREF_EN_VCO_LDO    0x00000001
/** LOPATH ldo */
    #define BLERD_TX_BUMP2_SY_LDOBGREF_EN_LOPATH_LDO 0x00000002
/** VCO+LOPATH ldo */
    #define BLERD_TX_BUMP2_SY_LDOBGREF_EN_VCO_LOPATH_LDO 0x00000003
/** Bump bits to set the offset pulse width in TX mode @multiple */
  #define BLERD_TX_BUMP2_SY_ICP_OFFSET_TX(v)       ((BLERD_TX_BUMP2_SY_ICP_OFFSET_TX_##v) << 8)
  #define BLERD_TX_BUMP2_SY_ICP_OFFSET_TX_SET(x, v) do { (x) = (((x) & ~0x300) | ((BLERD_TX_BUMP2_SY_ICP_OFFSET_TX_##v) << 8)); } while(0)
  #define BLERD_TX_BUMP2_SY_ICP_OFFSET_TX_SETVAL(x, v) do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define BLERD_TX_BUMP2_SY_ICP_OFFSET_TX_GET(x)   (((x) >> 8) & 0x3)
/** 2.45ns */
    #define BLERD_TX_BUMP2_SY_ICP_OFFSET_TX_2_45NS   0x00000000
/** 1.75ns */
    #define BLERD_TX_BUMP2_SY_ICP_OFFSET_TX_1_75NS   0x00000001
/** 1.3ns */
    #define BLERD_TX_BUMP2_SY_ICP_OFFSET_TX_1_3NS    0x00000002
/** 25ps */
    #define BLERD_TX_BUMP2_SY_ICP_OFFSET_TX_25PS     0x00000003
/** TX DAC load resistor bump settings @multiple */
  #define BLERD_TX_BUMP2_DAC_RES(v)                ((BLERD_TX_BUMP2_DAC_RES_##v) << 10)
  #define BLERD_TX_BUMP2_DAC_RES_SET(x, v)         do { (x) = (((x) & ~0x3c00) | ((BLERD_TX_BUMP2_DAC_RES_##v) << 10)); } while(0)
  #define BLERD_TX_BUMP2_DAC_RES_SETVAL(x, v)      do { (x) = (((x) & ~0x3c00) | ((v) << 10)); } while(0)
  #define BLERD_TX_BUMP2_DAC_RES_GET(x)            (((x) >> 10) & 0xf)
/** DAC output resistor bump by -20% */
    #define BLERD_TX_BUMP2_DAC_RES_MIN_20            0x00000000
/** DAC output resistor bump by -17.5% */
    #define BLERD_TX_BUMP2_DAC_RES_MIN_17            0x00000001
/** DAC output resistor bump by -15% */
    #define BLERD_TX_BUMP2_DAC_RES_MIN_15            0x00000002
/** DAC output resistor bump by -12.5% */
    #define BLERD_TX_BUMP2_DAC_RES_MIN_12            0x00000003
/** DAC output resistor bump by -10% */
    #define BLERD_TX_BUMP2_DAC_RES_MIN_10            0x00000004
/** DAC output resistor bump by -7.5% */
    #define BLERD_TX_BUMP2_DAC_RES_MIN_7             0x00000005
/** DAC output resistor bump by -5% */
    #define BLERD_TX_BUMP2_DAC_RES_MIN_5             0x00000006
/** DAC output resistor bump by -2.5% */
    #define BLERD_TX_BUMP2_DAC_RES_MIN_2             0x00000007
/** DAC output resistor bump by 0% */
    #define BLERD_TX_BUMP2_DAC_RES_ZERO              0x00000008
/** DAC output resistor bump by 2.5% */
    #define BLERD_TX_BUMP2_DAC_RES_PLUS_2            0x00000009
/** DAC output resistor bump by 5% */
    #define BLERD_TX_BUMP2_DAC_RES_PLUS_5            0x0000000a
/** DAC output resistor bump by 7.5% */
    #define BLERD_TX_BUMP2_DAC_RES_PLUS_7            0x0000000b
/** DAC output resistor bump by 10% */
    #define BLERD_TX_BUMP2_DAC_RES_PLUS_10           0x0000000c
/** DAC output resistor bump by 12.5% */
    #define BLERD_TX_BUMP2_DAC_RES_PLUS_12           0x0000000d
/** DAC output resistor bump by 15% */
    #define BLERD_TX_BUMP2_DAC_RES_PLUS_15           0x0000000e
/** DAC output resistor bump by 17.5% */
    #define BLERD_TX_BUMP2_DAC_RES_PLUS_17           0x0000000f
/** Charge pump power save bits pup freeze txpowersave<1:0> PupBlocks 0 0 X X
   NONE 1 0 X X ALL 1 1 0 0 ALL 1 1 0 1 ALL-8x CP 1 1 1 0 ALL-8x-1x CP 1 1 1 1
   ALL-buffer @multiple */
  #define BLERD_TX_BUMP2_SY_CP_TXPOWERSAVE(v)      ((v) << 14)
  #define BLERD_TX_BUMP2_SY_CP_TXPOWERSAVE_SET(x, v) do { (x) = (((x) & ~0xc000) | ((v) << 14)); } while(0)
  #define BLERD_TX_BUMP2_SY_CP_TXPOWERSAVE_GET(x)  (((x) >> 14) & 0x3)

#define BLERD_RX_BUMP1_ADDR                          0x00000090
#define BLERD_RX_BUMP1_MASK                          0x0000ffff
/** TIA OTA CMFB tail current (Bias current 8.5uA) @multiple */
  #define BLERD_RX_BUMP1_TIA_OTA(v)                ((BLERD_RX_BUMP1_TIA_OTA_##v) << 0)
  #define BLERD_RX_BUMP1_TIA_OTA_SET(x, v)         do { (x) = (((x) & ~0x3) | ((BLERD_RX_BUMP1_TIA_OTA_##v) << 0)); } while(0)
  #define BLERD_RX_BUMP1_TIA_OTA_SETVAL(x, v)      do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define BLERD_RX_BUMP1_TIA_OTA_GET(x)            (((x) >> 0) & 0x3)
/** 69uA */
    #define BLERD_RX_BUMP1_TIA_OTA_69UA              0x00000000
/** 78uA */
    #define BLERD_RX_BUMP1_TIA_OTA_78UA              0x00000001
/** 86uA */
    #define BLERD_RX_BUMP1_TIA_OTA_86UA              0x00000002
/** 95uA */
    #define BLERD_RX_BUMP1_TIA_OTA_95UA              0x00000003
/** TIA CM ref voltage 850mV and 1V for iref bias current = X @multiple */
  #define BLERD_RX_BUMP1_TIA_CM(v)                 ((BLERD_RX_BUMP1_TIA_CM_##v) << 2)
  #define BLERD_RX_BUMP1_TIA_CM_SET(x, v)          do { (x) = (((x) & ~0x4) | ((BLERD_RX_BUMP1_TIA_CM_##v) << 2)); } while(0)
  #define BLERD_RX_BUMP1_TIA_CM_SETVAL(x, v)       do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define BLERD_RX_BUMP1_TIA_CM_GET(x)             (((x) >> 2) & 0x1)
/** 8.5uA */
    #define BLERD_RX_BUMP1_TIA_CM_8_5UA              0x00000000
/** 10uA */
    #define BLERD_RX_BUMP1_TIA_CM_10UA               0x00000001
/** CBPF OTA2 CMFB tail current (Bias current 8.5uA) @multiple */
  #define BLERD_RX_BUMP1_CBPF_OTA2(v)              ((BLERD_RX_BUMP1_CBPF_OTA2_##v) << 3)
  #define BLERD_RX_BUMP1_CBPF_OTA2_SET(x, v)       do { (x) = (((x) & ~0x8) | ((BLERD_RX_BUMP1_CBPF_OTA2_##v) << 3)); } while(0)
  #define BLERD_RX_BUMP1_CBPF_OTA2_SETVAL(x, v)    do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define BLERD_RX_BUMP1_CBPF_OTA2_GET(x)          (((x) >> 3) & 0x1)
/** 17.27uA */
    #define BLERD_RX_BUMP1_CBPF_OTA2_17_27UA         0x00000000
/** 21.58uA */
    #define BLERD_RX_BUMP1_CBPF_OTA2_21_58UA         0x00000001
/** CBPF OTA1 CMFB tail current (Bias current 8.5uA) @multiple */
  #define BLERD_RX_BUMP1_CBPF_OTA1(v)              ((BLERD_RX_BUMP1_CBPF_OTA1_##v) << 4)
  #define BLERD_RX_BUMP1_CBPF_OTA1_SET(x, v)       do { (x) = (((x) & ~0x10) | ((BLERD_RX_BUMP1_CBPF_OTA1_##v) << 4)); } while(0)
  #define BLERD_RX_BUMP1_CBPF_OTA1_SETVAL(x, v)    do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define BLERD_RX_BUMP1_CBPF_OTA1_GET(x)          (((x) >> 4) & 0x1)
/** 17.27uA */
    #define BLERD_RX_BUMP1_CBPF_OTA1_17_27UA         0x00000000
/** 21.58uA */
    #define BLERD_RX_BUMP1_CBPF_OTA1_21_58UA         0x00000001
/** CBPF CM ref voltage 850mV and 1V for 1st stage and 2nd stage resp. for irefbg
   = X @multiple */
  #define BLERD_RX_BUMP1_CBPF_CM(v)                ((BLERD_RX_BUMP1_CBPF_CM_##v) << 5)
  #define BLERD_RX_BUMP1_CBPF_CM_SET(x, v)         do { (x) = (((x) & ~0x20) | ((BLERD_RX_BUMP1_CBPF_CM_##v) << 5)); } while(0)
  #define BLERD_RX_BUMP1_CBPF_CM_SETVAL(x, v)      do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define BLERD_RX_BUMP1_CBPF_CM_GET(x)            (((x) >> 5) & 0x1)
/** 8.5uA */
    #define BLERD_RX_BUMP1_CBPF_CM_8_5UA             0x00000000
/** 10uA */
    #define BLERD_RX_BUMP1_CBPF_CM_10UA              0x00000001
/** Bit Setting Offset DAC LSB @multiple */
  #define BLERD_RX_BUMP1_IF_OFFSET_CALDAC(v)       ((BLERD_RX_BUMP1_IF_OFFSET_CALDAC_##v) << 6)
  #define BLERD_RX_BUMP1_IF_OFFSET_CALDAC_SET(x, v) do { (x) = (((x) & ~0xc0) | ((BLERD_RX_BUMP1_IF_OFFSET_CALDAC_##v) << 6)); } while(0)
  #define BLERD_RX_BUMP1_IF_OFFSET_CALDAC_SETVAL(x, v) do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define BLERD_RX_BUMP1_IF_OFFSET_CALDAC_GET(x)   (((x) >> 6) & 0x3)
/** 132.4nA */
    #define BLERD_RX_BUMP1_IF_OFFSET_CALDAC_132_4NA  0x00000000
/** 150.8nA */
    #define BLERD_RX_BUMP1_IF_OFFSET_CALDAC_150_8NA  0x00000001
/** 118.0nA */
    #define BLERD_RX_BUMP1_IF_OFFSET_CALDAC_118_0NA  0x00000002
/** 106.5nA */
    #define BLERD_RX_BUMP1_IF_OFFSET_CALDAC_106_5NA  0x00000003
/** Bump bits for Mixer VBIAS switch Mixer Bias Programmability @multiple */
  #define BLERD_RX_BUMP1_MIXER_VBIAS_SW(v)         ((BLERD_RX_BUMP1_MIXER_VBIAS_SW_##v) << 8)
  #define BLERD_RX_BUMP1_MIXER_VBIAS_SW_SET(x, v)  do { (x) = (((x) & ~0x300) | ((BLERD_RX_BUMP1_MIXER_VBIAS_SW_##v) << 8)); } while(0)
  #define BLERD_RX_BUMP1_MIXER_VBIAS_SW_SETVAL(x, v) do { (x) = (((x) & ~0x300) | ((v) << 8)); } while(0)
  #define BLERD_RX_BUMP1_MIXER_VBIAS_SW_GET(x)     (((x) >> 8) & 0x3)
/** TIA CM + 0.3V */
    #define BLERD_RX_BUMP1_MIXER_VBIAS_SW_PLUS_0_3V  0x00000000
/** TIA CM + 0.38V */
    #define BLERD_RX_BUMP1_MIXER_VBIAS_SW_PLUS_0_38V 0x00000001
/** TIA CM + 0.17V */
    #define BLERD_RX_BUMP1_MIXER_VBIAS_SW_PLUS_0_17V 0x00000002
/** TIA CM + 0.255V */
    #define BLERD_RX_BUMP1_MIXER_VBIAS_SW_PLUS_0_255V 0x00000003
/** bump bits to control LNA gate bias voltage in RX mode @multiple */
  #define BLERD_RX_BUMP1_MIXER(v)                  ((BLERD_RX_BUMP1_MIXER_##v) << 10)
  #define BLERD_RX_BUMP1_MIXER_SET(x, v)           do { (x) = (((x) & ~0xc00) | ((BLERD_RX_BUMP1_MIXER_##v) << 10)); } while(0)
  #define BLERD_RX_BUMP1_MIXER_SETVAL(x, v)        do { (x) = (((x) & ~0xc00) | ((v) << 10)); } while(0)
  #define BLERD_RX_BUMP1_MIXER_GET(x)              (((x) >> 10) & 0x3)
/** 0.4V */
    #define BLERD_RX_BUMP1_MIXER_0_4V                0x00000000
/** 0.5V */
    #define BLERD_RX_BUMP1_MIXER_0_5V                0x00000001
/** 0.2V */
    #define BLERD_RX_BUMP1_MIXER_0_2V                0x00000002
/** 0.3V */
    #define BLERD_RX_BUMP1_MIXER_0_3V                0x00000003
/** Forces the TIA to have lower feedback resistor to aviode EVM degratation in
   the TIA dut to complex filter distortion caused by I/Q cross talk if feedback
   resistors is high in the TIA @multiple */
  #define BLERD_RX_BUMP1_TIA_LOWER_FEEDBACK        0x1000
/** Boost the LNA bias current ot HP equivalent (1.5mA current penalty) if LNA
   gain is at 101 (66dB setting) and this bit is set. this boosts sensitivity by
   2-3dB but the hit in the current consumption is only at 66dB gain setting. so
   average current comsumption in field should not be impacted much but a 2dB
   boost in sensitivity is seen @multiple */
  #define BLERD_RX_BUMP1_LNA_BOOST                 0x2000
/** forces pull donwn of inputs of LNA (post AC coupling) if LNA is powered up in
   Hi-Z mode to ensure good isolation during DC offset calibration of Receiver
   chain @multiple */
  #define BLERD_RX_BUMP1_LNA_PULL_DONWN            0x4000
/** enables the HG and LG LNA section's cascode biases to be alive independent of
   whether LNA is HG or LG mode. This enables fast transition from LG to HG in
   AGC events @multiple */
  #define BLERD_RX_BUMP1_LNA_CASCODE               0x8000

#define BLERD_RX_BUMP2_ADDR                          0x00000094
#define BLERD_RX_BUMP2_MASK                          0x00003fff
/** Bump bits for PTAT bias currents of LNA (Default is 00). Play with these to
   enable Low Power and Ultra Low Power modes in the LNA. @multiple */
  #define BLERD_RX_BUMP2_LNA_IBIAS(v)              ((BLERD_RX_BUMP2_LNA_IBIAS_##v) << 0)
  #define BLERD_RX_BUMP2_LNA_IBIAS_SET(x, v)       do { (x) = (((x) & ~0x3) | ((BLERD_RX_BUMP2_LNA_IBIAS_##v) << 0)); } while(0)
  #define BLERD_RX_BUMP2_LNA_IBIAS_SETVAL(x, v)    do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define BLERD_RX_BUMP2_LNA_IBIAS_GET(x)          (((x) >> 0) & 0x3)
/** IBias+0% (Default) */
    #define BLERD_RX_BUMP2_LNA_IBIAS_IBIAS_PLUS_0    0x00000000
/** IBias+15% */
    #define BLERD_RX_BUMP2_LNA_IBIAS_IBIAS_PLUS_15   0x00000001
/** IBias-50% */
    #define BLERD_RX_BUMP2_LNA_IBIAS_IBIAS_MINUS_50  0x00000002
/** IBias-25% */
    #define BLERD_RX_BUMP2_LNA_IBIAS_IBIAS_MINUS_25  0x00000003
/** Bump bits for RCAL bias currents of the TIA and the CBPF amplifiers (Default
   is 11 for current saving). @multiple */
  #define BLERD_RX_BUMP2_TIA_IBIAS(v)              ((BLERD_RX_BUMP2_TIA_IBIAS_##v) << 2)
  #define BLERD_RX_BUMP2_TIA_IBIAS_SET(x, v)       do { (x) = (((x) & ~0xc) | ((BLERD_RX_BUMP2_TIA_IBIAS_##v) << 2)); } while(0)
  #define BLERD_RX_BUMP2_TIA_IBIAS_SETVAL(x, v)    do { (x) = (((x) & ~0xc) | ((v) << 2)); } while(0)
  #define BLERD_RX_BUMP2_TIA_IBIAS_GET(x)          (((x) >> 2) & 0x3)
/** IBias+0% */
    #define BLERD_RX_BUMP2_TIA_IBIAS_IBIAS_PLUS_0    0x00000000
/** IBias+15% */
    #define BLERD_RX_BUMP2_TIA_IBIAS_IBIAS_PLUS_15   0x00000001
/** IBias-20% */
    #define BLERD_RX_BUMP2_TIA_IBIAS_IBIAS_MINUS_20  0x00000002
/** IBias-15% (Default) */
    #define BLERD_RX_BUMP2_TIA_IBIAS_IBIAS_MINUS_15  0x00000003
/** Bump bits for BGR bias currents of Offset Calibration DAC (Default is 00)
   @multiple */
  #define BLERD_RX_BUMP2_CBPF_IBIAS(v)             ((BLERD_RX_BUMP2_CBPF_IBIAS_##v) << 4)
  #define BLERD_RX_BUMP2_CBPF_IBIAS_SET(x, v)      do { (x) = (((x) & ~0x30) | ((BLERD_RX_BUMP2_CBPF_IBIAS_##v) << 4)); } while(0)
  #define BLERD_RX_BUMP2_CBPF_IBIAS_SETVAL(x, v)   do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define BLERD_RX_BUMP2_CBPF_IBIAS_GET(x)         (((x) >> 4) & 0x3)
/** IBias_0% (Default) */
    #define BLERD_RX_BUMP2_CBPF_IBIAS_IBIAS_PLUS_0   0x00000000
/** IBias+15% */
    #define BLERD_RX_BUMP2_CBPF_IBIAS_IBIAS_PLUS_15  0x00000001
/** IBias-20% */
    #define BLERD_RX_BUMP2_CBPF_IBIAS_IBIAS_MINUS_20 0x00000002
/** IBias-15% */
    #define BLERD_RX_BUMP2_CBPF_IBIAS_IBIAS_MINUS_15 0x00000003
/** Bump bits for Common mode setting currents of the TIA and the CBPF amplifiers
   (Default is 11 for current saving). @multiple */
  #define BLERD_RX_BUMP2_IF_CM_IBIAS(v)            ((BLERD_RX_BUMP2_IF_CM_IBIAS_##v) << 6)
  #define BLERD_RX_BUMP2_IF_CM_IBIAS_SET(x, v)     do { (x) = (((x) & ~0xc0) | ((BLERD_RX_BUMP2_IF_CM_IBIAS_##v) << 6)); } while(0)
  #define BLERD_RX_BUMP2_IF_CM_IBIAS_SETVAL(x, v)  do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define BLERD_RX_BUMP2_IF_CM_IBIAS_GET(x)        (((x) >> 6) & 0x3)
/** IBias+0% */
    #define BLERD_RX_BUMP2_IF_CM_IBIAS_IBIAS_PLUS_0  0x00000000
/** IBias+15% */
    #define BLERD_RX_BUMP2_IF_CM_IBIAS_IBIAS_PLUS_15 0x00000001
/** IBias-20% */
    #define BLERD_RX_BUMP2_IF_CM_IBIAS_IBIAS_MINUS_20 0x00000002
/** IBias-15% (Default) */
    #define BLERD_RX_BUMP2_IF_CM_IBIAS_IBIAS_MINUS_15 0x00000003
/** Setting this bit to 1 configures the CBPF output as hi-Z enabling independent
   ADC testing with the injection system @multiple */
  #define BLERD_RX_BUMP2_CBPF_HIZ_ENABLE           0x0100
/** setting this bit to disables the complex operation for the band pass filter
   configuring it as two low pass filters @multiple */
  #define BLERD_RX_BUMP2_COMPLEX_DISABLE           0x0200
/** Enables a higher R2 mode for loop stabilization with low Kv and debug mode.
   @multiple */
  #define BLERD_RX_BUMP2_SY_R2HIGHMODE(v)          ((BLERD_RX_BUMP2_SY_R2HIGHMODE_##v) << 10)
  #define BLERD_RX_BUMP2_SY_R2HIGHMODE_SET(x, v)   do { (x) = (((x) & ~0x400) | ((BLERD_RX_BUMP2_SY_R2HIGHMODE_##v) << 10)); } while(0)
  #define BLERD_RX_BUMP2_SY_R2HIGHMODE_SETVAL(x, v) do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define BLERD_RX_BUMP2_SY_R2HIGHMODE_GET(x)      (((x) >> 10) & 0x1)
/** 40 kohms */
    #define BLERD_RX_BUMP2_SY_R2HIGHMODE_40_KOHMS    0x00000000
/** 60 kohms */
    #define BLERD_RX_BUMP2_SY_R2HIGHMODE_60_KOHMS    0x00000001
/** Switches the RX mode between settings used in TX vs a higher linearity
   setting. @multiple */
  #define BLERD_RX_BUMP2_SY_HILINEARITYR2_MODE(v)  ((BLERD_RX_BUMP2_SY_HILINEARITYR2_MODE_##v) << 11)
  #define BLERD_RX_BUMP2_SY_HILINEARITYR2_MODE_SET(x, v) do { (x) = (((x) & ~0x800) | ((BLERD_RX_BUMP2_SY_HILINEARITYR2_MODE_##v) << 11)); } while(0)
  #define BLERD_RX_BUMP2_SY_HILINEARITYR2_MODE_SETVAL(x, v) do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define BLERD_RX_BUMP2_SY_HILINEARITYR2_MODE_GET(x) (((x) >> 11) & 0x1)
/** Use same as TX */
    #define BLERD_RX_BUMP2_SY_HILINEARITYR2_MODE_SAME_AS_TX 0x00000000
/** Use alternative bias for RX. Effective only in RX mode. This is don't care in TX mode */
    #define BLERD_RX_BUMP2_SY_HILINEARITYR2_MODE_ALTERNATIVE 0x00000001
/** Enables a lower Kv/2 mode @multiple */
  #define BLERD_RX_BUMP2_SY_LOWKVAMODE(v)          ((BLERD_RX_BUMP2_SY_LOWKVAMODE_##v) << 12)
  #define BLERD_RX_BUMP2_SY_LOWKVAMODE_SET(x, v)   do { (x) = (((x) & ~0x1000) | ((BLERD_RX_BUMP2_SY_LOWKVAMODE_##v) << 12)); } while(0)
  #define BLERD_RX_BUMP2_SY_LOWKVAMODE_SETVAL(x, v) do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
  #define BLERD_RX_BUMP2_SY_LOWKVAMODE_GET(x)      (((x) >> 12) & 0x1)
/** 70 MHz/V */
    #define BLERD_RX_BUMP2_SY_LOWKVAMODE_70_MHZ_V    0x00000000
/** 45 MHz/V */
    #define BLERD_RX_BUMP2_SY_LOWKVAMODE_45_MHZ_V    0x00000001
/** Enables a lower Kv/2 mode @multiple */
  #define BLERD_RX_BUMP2_SY_LOWKVMMODE(v)          ((BLERD_RX_BUMP2_SY_LOWKVMMODE_##v) << 13)
  #define BLERD_RX_BUMP2_SY_LOWKVMMODE_SET(x, v)   do { (x) = (((x) & ~0x2000) | ((BLERD_RX_BUMP2_SY_LOWKVMMODE_##v) << 13)); } while(0)
  #define BLERD_RX_BUMP2_SY_LOWKVMMODE_SETVAL(x, v) do { (x) = (((x) & ~0x2000) | ((v) << 13)); } while(0)
  #define BLERD_RX_BUMP2_SY_LOWKVMMODE_GET(x)      (((x) >> 13) & 0x1)
/** 10 MHz/V */
    #define BLERD_RX_BUMP2_SY_LOWKVMMODE_10_MHZ_V    0x00000000
/** 5 MHz/V */
    #define BLERD_RX_BUMP2_SY_LOWKVMMODE_5_MHZ_V     0x00000001

#define BLERD_ADC_BUMP1_ADDR                         0x00000098
#define BLERD_ADC_BUMP1_MASK                         0x0000ffff
/** Bump bits for the channel-I reference voltage. (2s complement interpretation)
   Every bit changes the reference voltage by 10mV. See the above table @multiple
   */
  #define BLERD_ADC_BUMP1_I_REF(v)                 ((v) << 0)
  #define BLERD_ADC_BUMP1_I_REF_SET(x, v)          do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define BLERD_ADC_BUMP1_I_REF_GET(x)             (((x) >> 0) & 0x7)
/** Bump bits for the channel-Q reference voltage. (2s complement interpretation)
   Every bit changes the reference voltage by 10mV. @multiple */
  #define BLERD_ADC_BUMP1_Q_REF(v)                 ((BLERD_ADC_BUMP1_Q_REF_##v) << 3)
  #define BLERD_ADC_BUMP1_Q_REF_SET(x, v)          do { (x) = (((x) & ~0x38) | ((BLERD_ADC_BUMP1_Q_REF_##v) << 3)); } while(0)
  #define BLERD_ADC_BUMP1_Q_REF_SETVAL(x, v)       do { (x) = (((x) & ~0x38) | ((v) << 3)); } while(0)
  #define BLERD_ADC_BUMP1_Q_REF_GET(x)             (((x) >> 3) & 0x7)
/** 650 mV */
    #define BLERD_ADC_BUMP1_Q_REF_650_MV             0x00000000
/** 680 mV */
    #define BLERD_ADC_BUMP1_Q_REF_680_MV             0x00000003
/** 610 mV */
    #define BLERD_ADC_BUMP1_Q_REF_610_MV             0x00000004
/** Bump bits for the preamps bias current. X00 +0 % (Ibias - 0 A) X01 +25 %
   (Ibias - 12.5 A) X10 -50 % (Ibias - 5 A) X11 -25 % (Ibias - 7.5 A) @multiple
   */
  #define BLERD_ADC_BUMP1_IBG_CAL(v)               ((v) << 6)
  #define BLERD_ADC_BUMP1_IBG_CAL_SET(x, v)        do { (x) = (((x) & ~0x1c0) | ((v) << 6)); } while(0)
  #define BLERD_ADC_BUMP1_IBG_CAL_GET(x)           (((x) >> 6) & 0x7)
/** Loop delay control in SAR return path. @multiple */
  #define BLERD_ADC_BUMP1_LOOPDLY(v)               ((BLERD_ADC_BUMP1_LOOPDLY_##v) << 9)
  #define BLERD_ADC_BUMP1_LOOPDLY_SET(x, v)        do { (x) = (((x) & ~0x600) | ((BLERD_ADC_BUMP1_LOOPDLY_##v) << 9)); } while(0)
  #define BLERD_ADC_BUMP1_LOOPDLY_SETVAL(x, v)     do { (x) = (((x) & ~0x600) | ((v) << 9)); } while(0)
  #define BLERD_ADC_BUMP1_LOOPDLY_GET(x)           (((x) >> 9) & 0x3)
/** Min delay */
    #define BLERD_ADC_BUMP1_LOOPDLY_MIN              0x00000000
/** Max delay */
    #define BLERD_ADC_BUMP1_LOOPDLY_MAX              0x00000003
/** Loop delay increment by 4x in SAR return path @multiple */
  #define BLERD_ADC_BUMP1_LOOPDLY4X_EN(v)          ((BLERD_ADC_BUMP1_LOOPDLY4X_EN_##v) << 11)
  #define BLERD_ADC_BUMP1_LOOPDLY4X_EN_SET(x, v)   do { (x) = (((x) & ~0x800) | ((BLERD_ADC_BUMP1_LOOPDLY4X_EN_##v) << 11)); } while(0)
  #define BLERD_ADC_BUMP1_LOOPDLY4X_EN_SETVAL(x, v) do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define BLERD_ADC_BUMP1_LOOPDLY4X_EN_GET(x)      (((x) >> 11) & 0x1)
/** Delay determined by loopdly[1:0] */
    #define BLERD_ADC_BUMP1_LOOPDLY4X_EN_1X          0x00000000
/** 4x the Delay */
    #define BLERD_ADC_BUMP1_LOOPDLY4X_EN_4X          0x00000001
/** rCurrent reduction mode in the reference generator. @multiple */
  #define BLERD_ADC_BUMP1_LOWPOWER(v)              ((BLERD_ADC_BUMP1_LOWPOWER_##v) << 12)
  #define BLERD_ADC_BUMP1_LOWPOWER_SET(x, v)       do { (x) = (((x) & ~0x1000) | ((BLERD_ADC_BUMP1_LOWPOWER_##v) << 12)); } while(0)
  #define BLERD_ADC_BUMP1_LOWPOWER_SETVAL(x, v)    do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
  #define BLERD_ADC_BUMP1_LOWPOWER_GET(x)          (((x) >> 12) & 0x1)
/** No bump */
    #define BLERD_ADC_BUMP1_LOWPOWER_NO_BUMP         0x00000000
/** 50% bump */
    #define BLERD_ADC_BUMP1_LOWPOWER_50_BUMP         0x00000001
/** Bypass op-amp and diode connect reference generator's servo loop @multiple */
  #define BLERD_ADC_BUMP1_OPAMP_BYPASS(v)          ((BLERD_ADC_BUMP1_OPAMP_BYPASS_##v) << 13)
  #define BLERD_ADC_BUMP1_OPAMP_BYPASS_SET(x, v)   do { (x) = (((x) & ~0x2000) | ((BLERD_ADC_BUMP1_OPAMP_BYPASS_##v) << 13)); } while(0)
  #define BLERD_ADC_BUMP1_OPAMP_BYPASS_SETVAL(x, v) do { (x) = (((x) & ~0x2000) | ((v) << 13)); } while(0)
  #define BLERD_ADC_BUMP1_OPAMP_BYPASS_GET(x)      (((x) >> 13) & 0x1)
/** Op-amp enabled */
    #define BLERD_ADC_BUMP1_OPAMP_BYPASS_ENABLED     0x00000000
/** Op-amp bypassed */
    #define BLERD_ADC_BUMP1_OPAMP_BYPASS_BYPASSED    0x00000001
/** Reference generators bandwidth boost by injecting current in the output arm.
   Injection Current @multiple */
  #define BLERD_ADC_BUMP1_BWCTRL(v)                ((BLERD_ADC_BUMP1_BWCTRL_##v) << 14)
  #define BLERD_ADC_BUMP1_BWCTRL_SET(x, v)         do { (x) = (((x) & ~0xc000) | ((BLERD_ADC_BUMP1_BWCTRL_##v) << 14)); } while(0)
  #define BLERD_ADC_BUMP1_BWCTRL_SETVAL(x, v)      do { (x) = (((x) & ~0xc000) | ((v) << 14)); } while(0)
  #define BLERD_ADC_BUMP1_BWCTRL_GET(x)            (((x) >> 14) & 0x3)
/** 0 A */
    #define BLERD_ADC_BUMP1_BWCTRL_0_A               0x00000000
/** 20 A */
    #define BLERD_ADC_BUMP1_BWCTRL_20_A              0x00000001
/** 40 A */
    #define BLERD_ADC_BUMP1_BWCTRL_40_A              0x00000002
/** 60 A */
    #define BLERD_ADC_BUMP1_BWCTRL_60_A              0x00000003

#define BLERD_ADC_BUMP2_ADDR                         0x0000009c
#define BLERD_ADC_BUMP2_MASK                         0x00007fff
/** Enable redundant conversion cycle at b2 position. @multiple */
  #define BLERD_ADC_BUMP2_CYCLE_B2_DELAY(v)        ((BLERD_ADC_BUMP2_CYCLE_B2_DELAY_##v) << 0)
  #define BLERD_ADC_BUMP2_CYCLE_B2_DELAY_SET(x, v) do { (x) = (((x) & ~0x1) | ((BLERD_ADC_BUMP2_CYCLE_B2_DELAY_##v) << 0)); } while(0)
  #define BLERD_ADC_BUMP2_CYCLE_B2_DELAY_SETVAL(x, v) do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define BLERD_ADC_BUMP2_CYCLE_B2_DELAY_GET(x)    (((x) >> 0) & 0x1)
/** Enabled */
    #define BLERD_ADC_BUMP2_CYCLE_B2_DELAY_ENABLED   0x00000000
/** Disabled */
    #define BLERD_ADC_BUMP2_CYCLE_B2_DELAY_DISABLED  0x00000001
/** Enable redundant conversion cycle at b5 position. @multiple */
  #define BLERD_ADC_BUMP2_CYCLE_B5_DELAY(v)        ((BLERD_ADC_BUMP2_CYCLE_B5_DELAY_##v) << 1)
  #define BLERD_ADC_BUMP2_CYCLE_B5_DELAY_SET(x, v) do { (x) = (((x) & ~0x2) | ((BLERD_ADC_BUMP2_CYCLE_B5_DELAY_##v) << 1)); } while(0)
  #define BLERD_ADC_BUMP2_CYCLE_B5_DELAY_SETVAL(x, v) do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define BLERD_ADC_BUMP2_CYCLE_B5_DELAY_GET(x)    (((x) >> 1) & 0x1)
/** Disabled */
    #define BLERD_ADC_BUMP2_CYCLE_B5_DELAY_DISABLED  0x00000000
/** Enabled */
    #define BLERD_ADC_BUMP2_CYCLE_B5_DELAY_ENABLED   0x00000001
/** Clock duty cycle control @multiple */
  #define BLERD_ADC_BUMP2_DUTCYCLE_25(v)           ((BLERD_ADC_BUMP2_DUTCYCLE_25_##v) << 2)
  #define BLERD_ADC_BUMP2_DUTCYCLE_25_SET(x, v)    do { (x) = (((x) & ~0x4) | ((BLERD_ADC_BUMP2_DUTCYCLE_25_##v) << 2)); } while(0)
  #define BLERD_ADC_BUMP2_DUTCYCLE_25_SETVAL(x, v) do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define BLERD_ADC_BUMP2_DUTCYCLE_25_GET(x)       (((x) >> 2) & 0x1)
/** 50 % time for track phase  & 50 %  time for convert phase */
    #define BLERD_ADC_BUMP2_DUTCYCLE_25_50_TRACK_50_CONVERT 0x00000000
/** 25 % time for track phase & 75 %  time for convert phase */
    #define BLERD_ADC_BUMP2_DUTCYCLE_25_25_TRACK_75_CONVERT 0x00000001
/** Enable meta detection @multiple */
  #define BLERD_ADC_BUMP2_METADET_EN               0x0008
/** 6dB attenuation in CBPF gain only at lowest gain setting to improve the Max
   signal level the receiver can tolarate Note: in order to chare the tub width
   with AGC disabled, this back off mode is effective only with AGC profile set
   to rev** mode. This is in reg0xa4[3] which needs to be set to '0' for rev**
   profile @multiple */
  #define BLERD_ADC_BUMP2_IBUMP                    0x0010
/** Disconnect source coupled node of the preamp during track phase. @multiple */
  #define BLERD_ADC_BUMP2_PREAMP_SOURCECTRL_N(v)   ((BLERD_ADC_BUMP2_PREAMP_SOURCECTRL_N_##v) << 5)
  #define BLERD_ADC_BUMP2_PREAMP_SOURCECTRL_N_SET(x, v) do { (x) = (((x) & ~0x20) | ((BLERD_ADC_BUMP2_PREAMP_SOURCECTRL_N_##v) << 5)); } while(0)
  #define BLERD_ADC_BUMP2_PREAMP_SOURCECTRL_N_SETVAL(x, v) do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define BLERD_ADC_BUMP2_PREAMP_SOURCECTRL_N_GET(x) (((x) >> 5) & 0x1)
/** Functionality enabled */
    #define BLERD_ADC_BUMP2_PREAMP_SOURCECTRL_N_ENABLED 0x00000000
/** Functionality disabled */
    #define BLERD_ADC_BUMP2_PREAMP_SOURCECTRL_N_DISABLED 0x00000001
/** Enable preamps low/high gain modes over conversion cycle. @multiple */
  #define BLERD_ADC_BUMP2_PREAMP_GAINCTRL_N(v)     ((BLERD_ADC_BUMP2_PREAMP_GAINCTRL_N_##v) << 6)
  #define BLERD_ADC_BUMP2_PREAMP_GAINCTRL_N_SET(x, v) do { (x) = (((x) & ~0x40) | ((BLERD_ADC_BUMP2_PREAMP_GAINCTRL_N_##v) << 6)); } while(0)
  #define BLERD_ADC_BUMP2_PREAMP_GAINCTRL_N_SETVAL(x, v) do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define BLERD_ADC_BUMP2_PREAMP_GAINCTRL_N_GET(x) (((x) >> 6) & 0x1)
/** Functionality enabled */
    #define BLERD_ADC_BUMP2_PREAMP_GAINCTRL_N_ENABLED 0x00000000
/** Functionality disabled */
    #define BLERD_ADC_BUMP2_PREAMP_GAINCTRL_N_DISABLED 0x00000001
/** Put the ADC in idle channel mode. Inputs are shorted to locally generated 1V
   signal. @multiple */
  #define BLERD_ADC_BUMP2_SHORT_INPUT(v)           ((BLERD_ADC_BUMP2_SHORT_INPUT_##v) << 7)
  #define BLERD_ADC_BUMP2_SHORT_INPUT_SET(x, v)    do { (x) = (((x) & ~0x80) | ((BLERD_ADC_BUMP2_SHORT_INPUT_##v) << 7)); } while(0)
  #define BLERD_ADC_BUMP2_SHORT_INPUT_SETVAL(x, v) do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define BLERD_ADC_BUMP2_SHORT_INPUT_GET(x)       (((x) >> 7) & 0x1)
/** Normal operation */
    #define BLERD_ADC_BUMP2_SHORT_INPUT_NORMAL_OPERATION 0x00000000
/** Idle channel mode */
    #define BLERD_ADC_BUMP2_SHORT_INPUT_IDLE_CHANNEL_MODE 0x00000001
/** Delaying the sampling clock from the comparator wrt to the data. @multiple */
  #define BLERD_ADC_BUMP2_RETURN_SKEW(v)           ((BLERD_ADC_BUMP2_RETURN_SKEW_##v) << 8)
  #define BLERD_ADC_BUMP2_RETURN_SKEW_SET(x, v)    do { (x) = (((x) & ~0x700) | ((BLERD_ADC_BUMP2_RETURN_SKEW_##v) << 8)); } while(0)
  #define BLERD_ADC_BUMP2_RETURN_SKEW_SETVAL(x, v) do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define BLERD_ADC_BUMP2_RETURN_SKEW_GET(x)       (((x) >> 8) & 0x7)
/** Min delay */
    #define BLERD_ADC_BUMP2_RETURN_SKEW_MIN_DELAY    0x00000000
/** Max delay */
    #define BLERD_ADC_BUMP2_RETURN_SKEW_MAX_DELAY    0x00000007
/** Swaps the I and Q channel Vbg/R for ref.gen @multiple */
  #define BLERD_ADC_BUMP2_IQSWAP(v)                ((BLERD_ADC_BUMP2_IQSWAP_##v) << 11)
  #define BLERD_ADC_BUMP2_IQSWAP_SET(x, v)         do { (x) = (((x) & ~0x800) | ((BLERD_ADC_BUMP2_IQSWAP_##v) << 11)); } while(0)
  #define BLERD_ADC_BUMP2_IQSWAP_SETVAL(x, v)      do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define BLERD_ADC_BUMP2_IQSWAP_GET(x)            (((x) >> 11) & 0x1)
/** No swap */
    #define BLERD_ADC_BUMP2_IQSWAP_NO_SWAP           0x00000000
/** Enable swapping */
    #define BLERD_ADC_BUMP2_IQSWAP_ENABLE_SWAPPING   0x00000001
/** Bandwidth bump bits for the preamp. Each bit connects a 5fF cap to the output
   nodes. No cap is connected by default @multiple */
  #define BLERD_ADC_BUMP2_PREAMP_BWCTRL(v)         ((v) << 12)
  #define BLERD_ADC_BUMP2_PREAMP_BWCTRL_SET(x, v)  do { (x) = (((x) & ~0x3000) | ((v) << 12)); } while(0)
  #define BLERD_ADC_BUMP2_PREAMP_BWCTRL_GET(x)     (((x) >> 12) & 0x3)
/** Enable clean Vdd for the cascodes & op-amp in refgen. The clean Vdd supplied
   through the diag. ( Diag code = 0101 for channel I and Diag code =1101 for
   channel Q). Default connection to the internal Vdd @multiple */
  #define BLERD_ADC_BUMP2_REV_ADC_BUMP2            0x4000

#define BLERD_BALUN_ADDR                             0x000000a0
#define BLERD_BALUN_MASK                             0x000000ff
/** Programmable bits to change tuning capacitance in the Balun primary side in
   RX operation (fF) @multiple */
  #define BLERD_BALUN_BUMP_RX_CTUNE(v)             ((BLERD_BALUN_BUMP_RX_CTUNE_##v) << 0)
  #define BLERD_BALUN_BUMP_RX_CTUNE_SET(x, v)      do { (x) = (((x) & ~0xf) | ((BLERD_BALUN_BUMP_RX_CTUNE_##v) << 0)); } while(0)
  #define BLERD_BALUN_BUMP_RX_CTUNE_SETVAL(x, v)   do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_BALUN_BUMP_RX_CTUNE_GET(x)         (((x) >> 0) & 0xf)
/** 42.5 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_42_5           0x00000000
/** 48.8 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_48_8           0x00000001
/** 55.1 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_55_1           0x00000002
/** 61.4 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_61_4           0x00000003
/** 67.7 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_67_7           0x00000004
    #define BLERD_BALUN_BUMP_RX_CTUNE_74__74         0x00000005
/** 80.3 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_80_3           0x00000006
/** 86.6 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_86_6           0x00000007
/** 92.9 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_92_9           0x00000008
/** 99.2 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_99_2           0x00000009
/** 105.5 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_105_5          0x0000000a
/** 111.8 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_111_8          0x0000000b
/** 118.1 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_118_1          0x0000000c
/** 124.4 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_124_4          0x0000000d
/** 130.7 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_130_7          0x0000000e
/** 137 */
    #define BLERD_BALUN_BUMP_RX_CTUNE_137            0x0000000f
/** Programmable bits to change tuning capacitance in the Balun primary side in
   TX operation (fF) @multiple */
  #define BLERD_BALUN_BUMP_TX_CTUNE(v)             ((BLERD_BALUN_BUMP_TX_CTUNE_##v) << 4)
  #define BLERD_BALUN_BUMP_TX_CTUNE_SET(x, v)      do { (x) = (((x) & ~0xf0) | ((BLERD_BALUN_BUMP_TX_CTUNE_##v) << 4)); } while(0)
  #define BLERD_BALUN_BUMP_TX_CTUNE_SETVAL(x, v)   do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define BLERD_BALUN_BUMP_TX_CTUNE_GET(x)         (((x) >> 4) & 0xf)
/** 42.5 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_42_5           0x00000000
/** 48.8 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_48_8           0x00000001
/** 55.1 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_55_1           0x00000002
/** 61.4 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_61_4           0x00000003
/** 67.7 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_67_7           0x00000004
    #define BLERD_BALUN_BUMP_TX_CTUNE_74__74         0x00000005
/** 80.3 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_80_3           0x00000006
/** 86.6 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_86_6           0x00000007
/** 92.9 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_92_9           0x00000008
/** 99.2 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_99_2           0x00000009
/** 105.5 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_105_5          0x0000000a
/** 111.8 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_111_8          0x0000000b
/** 118.1 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_118_1          0x0000000c
/** 124.4 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_124_4          0x0000000d
/** 130.7 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_130_7          0x0000000e
/** 137 */
    #define BLERD_BALUN_BUMP_TX_CTUNE_137            0x0000000f

#define BLERD_CTR1_ADDR                              0x000000a4
#define BLERD_CTR1_MASK                              0x0000ffff
/** VCO warm up time @multiple */
  #define BLERD_CTR1_VCO_WARMUP_TIME(v)            ((BLERD_CTR1_VCO_WARMUP_TIME_##v) << 0)
  #define BLERD_CTR1_VCO_WARMUP_TIME_SET(x, v)     do { (x) = (((x) & ~0x1) | ((BLERD_CTR1_VCO_WARMUP_TIME_##v) << 0)); } while(0)
  #define BLERD_CTR1_VCO_WARMUP_TIME_SETVAL(x, v)  do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define BLERD_CTR1_VCO_WARMUP_TIME_GET(x)        (((x) >> 0) & 0x1)
    #define BLERD_CTR1_VCO_WARMUP_TIME_5US           0x00000000
    #define BLERD_CTR1_VCO_WARMUP_TIME_10US          0x00000001
/** PLL setting time @multiple */
  #define BLERD_CTR1_PLL_SETTLING_TIME(v)          ((BLERD_CTR1_PLL_SETTLING_TIME_##v) << 1)
  #define BLERD_CTR1_PLL_SETTLING_TIME_SET(x, v)   do { (x) = (((x) & ~0x6) | ((BLERD_CTR1_PLL_SETTLING_TIME_##v) << 1)); } while(0)
  #define BLERD_CTR1_PLL_SETTLING_TIME_SETVAL(x, v) do { (x) = (((x) & ~0x6) | ((v) << 1)); } while(0)
  #define BLERD_CTR1_PLL_SETTLING_TIME_GET(x)      (((x) >> 1) & 0x3)
/** 25us */
    #define BLERD_CTR1_PLL_SETTLING_TIME_25US        0x00000000
/** 30us */
    #define BLERD_CTR1_PLL_SETTLING_TIME_30US        0x00000001
/** 40us */
    #define BLERD_CTR1_PLL_SETTLING_TIME_40US        0x00000002
/** 50us */
    #define BLERD_CTR1_PLL_SETTLING_TIME_50US        0x00000003
/** tx freeze time @multiple */
  #define BLERD_CTR1_TX_FREEZE_TIME(v)             ((BLERD_CTR1_TX_FREEZE_TIME_##v) << 3)
  #define BLERD_CTR1_TX_FREEZE_TIME_SET(x, v)      do { (x) = (((x) & ~0x18) | ((BLERD_CTR1_TX_FREEZE_TIME_##v) << 3)); } while(0)
  #define BLERD_CTR1_TX_FREEZE_TIME_SETVAL(x, v)   do { (x) = (((x) & ~0x18) | ((v) << 3)); } while(0)
  #define BLERD_CTR1_TX_FREEZE_TIME_GET(x)         (((x) >> 3) & 0x3)
/** 30us */
    #define BLERD_CTR1_TX_FREEZE_TIME_30US           0x00000000
/** 40us */
    #define BLERD_CTR1_TX_FREEZE_TIME_40US           0x00000001
/** 50us */
    #define BLERD_CTR1_TX_FREEZE_TIME_50US           0x00000002
/** 25us */
    #define BLERD_CTR1_TX_FREEZE_TIME_25US           0x00000003
/** PA predrive pup time @multiple */
  #define BLERD_CTR1_TX_PREDRV_TIME(v)             ((BLERD_CTR1_TX_PREDRV_TIME_##v) << 5)
  #define BLERD_CTR1_TX_PREDRV_TIME_SET(x, v)      do { (x) = (((x) & ~0x20) | ((BLERD_CTR1_TX_PREDRV_TIME_##v) << 5)); } while(0)
  #define BLERD_CTR1_TX_PREDRV_TIME_SETVAL(x, v)   do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define BLERD_CTR1_TX_PREDRV_TIME_GET(x)         (((x) >> 5) & 0x1)
/** Powered up after KVCAL */
    #define BLERD_CTR1_TX_PREDRV_TIME_AFTER_KVCAL    0x00000000
/** Powered up after LDO */
    #define BLERD_CTR1_TX_PREDRV_TIME_AFTER_LDO      0x00000001
/** this controls the time between the PUP_TX_DRIVER going high and when F_N_TXEN
   is asserted, in us. @multiple */
  #define BLERD_CTR1_TX_MODSTART_TIME(v)           ((v) << 6)
  #define BLERD_CTR1_TX_MODSTART_TIME_SET(x, v)    do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define BLERD_CTR1_TX_MODSTART_TIME_GET(x)       (((x) >> 6) & 0x3)
  #define BLERD_CTR1_TX_DF2_SEL(v)                 ((BLERD_CTR1_TX_DF2_SEL_##v) << 8)
  #define BLERD_CTR1_TX_DF2_SEL_SET(x, v)          do { (x) = (((x) & ~0x100) | ((BLERD_CTR1_TX_DF2_SEL_##v) << 8)); } while(0)
  #define BLERD_CTR1_TX_DF2_SEL_SETVAL(x, v)       do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define BLERD_CTR1_TX_DF2_SEL_GET(x)             (((x) >> 8) & 0x1)
/** DF2 Max frequency deviation as 224KHz */
    #define BLERD_CTR1_TX_DF2_SEL_224KHZ             0x00000000
/** DF2 Max frequency deviation as 242KHz */
    #define BLERD_CTR1_TX_DF2_SEL_242KHZ             0x00000001
/** When this is set and CTR1.DBG_SELECT is ADC, ADC full swing detection can be
   monitored in debug pin @multiple */
  #define BLERD_CTR1_ADC_FULL_SWING_MONI_EN        0x0200
  #define BLERD_CTR1_DBG_SELECT(v)                 ((BLERD_CTR1_DBG_SELECT_##v) << 10)
  #define BLERD_CTR1_DBG_SELECT_SET(x, v)          do { (x) = (((x) & ~0xc00) | ((BLERD_CTR1_DBG_SELECT_##v) << 10)); } while(0)
  #define BLERD_CTR1_DBG_SELECT_SETVAL(x, v)       do { (x) = (((x) & ~0xc00) | ((v) << 10)); } while(0)
  #define BLERD_CTR1_DBG_SELECT_GET(x)             (((x) >> 10) & 0x3)
/** demod soft reset / AGC reset, */
    #define BLERD_CTR1_DBG_SELECT_DEMOD              0x00000000
/** AGC FSM MSB and f_n_rxen */
    #define BLERD_CTR1_DBG_SELECT_AGC                0x00000001
/** gain decrease and gain increase. */
    #define BLERD_CTR1_DBG_SELECT_GAIN               0x00000002
/** ADC full swing detection and ADC saturation detected signal */
    #define BLERD_CTR1_DBG_SELECT_ADC                0x00000003
/** Demodulation soft reset to DC cancellation enabled, high active @multiple */
  #define BLERD_CTR1_RX_DC_FREEZE_EN               0x1000
/** Demodulation soft reset to frequency tracking enabled, high active @multiple
   */
  #define BLERD_CTR1_RX_ENV_FREEZE_EN              0x2000
/** Delay @multiple */
  #define BLERD_CTR1_AGC_RST_DLY(v)                ((BLERD_CTR1_AGC_RST_DLY_##v) << 14)
  #define BLERD_CTR1_AGC_RST_DLY_SET(x, v)         do { (x) = (((x) & ~0xc000) | ((BLERD_CTR1_AGC_RST_DLY_##v) << 14)); } while(0)
  #define BLERD_CTR1_AGC_RST_DLY_SETVAL(x, v)      do { (x) = (((x) & ~0xc000) | ((v) << 14)); } while(0)
  #define BLERD_CTR1_AGC_RST_DLY_GET(x)            (((x) >> 14) & 0x3)
/** 0.25us */
    #define BLERD_CTR1_AGC_RST_DLY_0_25US            0x00000000
/** 1.25us */
    #define BLERD_CTR1_AGC_RST_DLY_1_25US            0x00000001
/** 2.25us */
    #define BLERD_CTR1_AGC_RST_DLY_2_25US            0x00000002
/** 3.25us */
    #define BLERD_CTR1_AGC_RST_DLY_3_25US            0x00000003

#define BLERD_AGC_ADDR                               0x000000a8
#define BLERD_AGC_MASK                               0x0000ffff
/** AGC soft reset Enable @multiple */
  #define BLERD_AGC_RST_EN                         0x0001
  #define BLERD_AGC_CHECK_SAT_EN(v)                ((BLERD_AGC_CHECK_SAT_EN_##v) << 1)
  #define BLERD_AGC_CHECK_SAT_EN_SET(x, v)         do { (x) = (((x) & ~0x2) | ((BLERD_AGC_CHECK_SAT_EN_##v) << 1)); } while(0)
  #define BLERD_AGC_CHECK_SAT_EN_SETVAL(x, v)      do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define BLERD_AGC_CHECK_SAT_EN_GET(x)            (((x) >> 1) & 0x1)
/** Measure ADC power at fixed period */
    #define BLERD_AGC_CHECK_SAT_EN_FIXED             0x00000000
/** Quick check saturated ADC */
    #define BLERD_AGC_CHECK_SAT_EN_QUICK             0x00000001
/** ADC saturated detection timing @multiple */
  #define BLERD_AGC_SAT_CHK_TIM(v)                 ((BLERD_AGC_SAT_CHK_TIM_##v) << 2)
  #define BLERD_AGC_SAT_CHK_TIM_SET(x, v)          do { (x) = (((x) & ~0x4) | ((BLERD_AGC_SAT_CHK_TIM_##v) << 2)); } while(0)
  #define BLERD_AGC_SAT_CHK_TIM_SETVAL(x, v)       do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define BLERD_AGC_SAT_CHK_TIM_GET(x)             (((x) >> 2) & 0x1)
/** 3 12MHz clock */
    #define BLERD_AGC_SAT_CHK_TIM_3_12MHZ_CLOCK      0x00000000
/** 1/3 12MHz clock */
    #define BLERD_AGC_SAT_CHK_TIM_1_3_12MHZ_CLOCK    0x00000001
  #define BLERD_AGC_GAIN_MAPPING_MODE(v)           ((BLERD_AGC_GAIN_MAPPING_MODE_##v) << 3)
  #define BLERD_AGC_GAIN_MAPPING_MODE_SET(x, v)    do { (x) = (((x) & ~0x8) | ((BLERD_AGC_GAIN_MAPPING_MODE_##v) << 3)); } while(0)
  #define BLERD_AGC_GAIN_MAPPING_MODE_SETVAL(x, v) do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define BLERD_AGC_GAIN_MAPPING_MODE_GET(x)       (((x) >> 3) & 0x1)
/** Atlantis TC rev** gain mapping */
    #define BLERD_AGC_GAIN_MAPPING_MODE_REV_OTHER    0x00000000
/** Atlantis TC revA gain mapping */
    #define BLERD_AGC_GAIN_MAPPING_MODE_REV_A        0x00000001
/** ADC saturated detection threshold for doing a fast transition, in dBm
   @multiple */
  #define BLERD_AGC_GAIN_SAT_THRES(v)              ((v) << 4)
  #define BLERD_AGC_GAIN_SAT_THRES_SET(x, v)       do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define BLERD_AGC_GAIN_SAT_THRES_GET(x)          (((x) >> 4) & 0x3)
/** AGC power measurement time @multiple */
  #define BLERD_AGC_PWR_MEAS_TIM(v)                ((BLERD_AGC_PWR_MEAS_TIM_##v) << 6)
  #define BLERD_AGC_PWR_MEAS_TIM_SET(x, v)         do { (x) = (((x) & ~0xc0) | ((BLERD_AGC_PWR_MEAS_TIM_##v) << 6)); } while(0)
  #define BLERD_AGC_PWR_MEAS_TIM_SETVAL(x, v)      do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define BLERD_AGC_PWR_MEAS_TIM_GET(x)            (((x) >> 6) & 0x3)
/** 0.25us */
    #define BLERD_AGC_PWR_MEAS_TIM_0_25US            0x00000000
/** 0.5us */
    #define BLERD_AGC_PWR_MEAS_TIM_0_5US             0x00000001
/** 0.75us */
    #define BLERD_AGC_PWR_MEAS_TIM_0_75US            0x00000002
/** 1us */
    #define BLERD_AGC_PWR_MEAS_TIM_1US               0x00000003
/** Gain stable time after gain assignment. (* 12 MHz) @multiple */
  #define BLERD_AGC_GAIN_STABLE_TIM(v)             ((v) << 8)
  #define BLERD_AGC_GAIN_STABLE_TIM_SET(x, v)      do { (x) = (((x) & ~0x1f00) | ((v) << 8)); } while(0)
  #define BLERD_AGC_GAIN_STABLE_TIM_GET(x)         (((x) >> 8) & 0x1f)
/** Start AGC waiting time when RFCTRL set AGC enable, in us @multiple */
  #define BLERD_AGC_START_WAIT_TIM(v)              ((v) << 13)
  #define BLERD_AGC_START_WAIT_TIM_SET(x, v)       do { (x) = (((x) & ~0xe000) | ((v) << 13)); } while(0)
  #define BLERD_AGC_START_WAIT_TIM_GET(x)          (((x) >> 13) & 0x7)

#define BLERD_THRSHD1_ADDR                           0x000000ac
#define BLERD_THRSHD1_MASK                           0x00003f3f
/** threshold gain changge from 66dB to60dB @multiple */
  #define BLERD_THRSHD1_AGC60_66(v)                ((v) << 0)
  #define BLERD_THRSHD1_AGC60_66_SET(x, v)         do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define BLERD_THRSHD1_AGC60_66_GET(x)            (((x) >> 0) & 0x3f)
/** threshold gain changge from 60dB to 48dB @multiple */
  #define BLERD_THRSHD1_AGC66_60(v)                ((v) << 8)
  #define BLERD_THRSHD1_AGC66_60_SET(x, v)         do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define BLERD_THRSHD1_AGC66_60_GET(x)            (((x) >> 8) & 0x3f)

#define BLERD_THRSHD2_ADDR                           0x000000b0
#define BLERD_THRSHD2_MASK                           0x00003f3f
/** threshold gain changge from 60dB to48dB @multiple */
  #define BLERD_THRSHD2_AGC48_60(v)                ((v) << 0)
  #define BLERD_THRSHD2_AGC48_60_SET(x, v)         do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define BLERD_THRSHD2_AGC48_60_GET(x)            (((x) >> 0) & 0x3f)
/** threshold gain changge from 48dB to 60dB @multiple */
  #define BLERD_THRSHD2_AGC60_48(v)                ((v) << 8)
  #define BLERD_THRSHD2_AGC60_48_SET(x, v)         do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define BLERD_THRSHD2_AGC60_48_GET(x)            (((x) >> 8) & 0x3f)

#define BLERD_THRSHD3_ADDR                           0x000000b4
#define BLERD_THRSHD3_MASK                           0x00003f3f
/** threshold gain changge from 48dB to 36dB @multiple */
  #define BLERD_THRSHD3_AGC36_48(v)                ((v) << 0)
  #define BLERD_THRSHD3_AGC36_48_SET(x, v)         do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define BLERD_THRSHD3_AGC36_48_GET(x)            (((x) >> 0) & 0x3f)
/** threshold gain changge from 366dB to 48dB @multiple */
  #define BLERD_THRSHD3_AGC48_36(v)                ((v) << 8)
  #define BLERD_THRSHD3_AGC48_36_SET(x, v)         do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define BLERD_THRSHD3_AGC48_36_GET(x)            (((x) >> 8) & 0x3f)

#define BLERD_THRSHD4_ADDR                           0x000000b8
#define BLERD_THRSHD4_MASK                           0x00003f3f
/** threshold gain changge from 36dB to 18dB @multiple */
  #define BLERD_THRSHD4_AGC18_36(v)                ((v) << 0)
  #define BLERD_THRSHD4_AGC18_36_SET(x, v)         do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define BLERD_THRSHD4_AGC18_36_GET(x)            (((x) >> 0) & 0x3f)
/** threshold gain changge from 18dB to 36dB @multiple */
  #define BLERD_THRSHD4_AGC36_18(v)                ((v) << 8)
  #define BLERD_THRSHD4_AGC36_18_SET(x, v)         do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define BLERD_THRSHD4_AGC36_18_GET(x)            (((x) >> 8) & 0x3f)

#define BLERD_THRSHD5_ADDR                           0x000000bc
#define BLERD_THRSHD5_MASK                           0x00003f3f
/** threshold for gain change from 18dB to 0dB @multiple */
  #define BLERD_THRSHD5_AGC0_18(v)                 ((v) << 0)
  #define BLERD_THRSHD5_AGC0_18_SET(x, v)          do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define BLERD_THRSHD5_AGC0_18_GET(x)             (((x) >> 0) & 0x3f)
/** threshold for gain change from 0dB to 18dB @multiple */
  #define BLERD_THRSHD5_AGC18_0(v)                 ((v) << 8)
  #define BLERD_THRSHD5_AGC18_0_SET(x, v)          do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define BLERD_THRSHD5_AGC18_0_GET(x)             (((x) >> 8) & 0x3f)

#define BLERD_DC_ADDR                                0x000000c0
#define BLERD_DC_MASK                                0x0000ffff
/** this code is removed from the ADC I output. This field can be progamrmed to
   remove systematci DC offset @multiple */
  #define BLERD_DC_COMP_Q_CODE(v)                  ((v) << 0)
  #define BLERD_DC_COMP_Q_CODE_SET(x, v)           do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define BLERD_DC_COMP_Q_CODE_GET(x)              (((x) >> 0) & 0xff)
/** this code is removed from the ADC Q output. This field can be progamrmed to
   remove systematci DC offset @multiple */
  #define BLERD_DC_COMP_I_CODE(v)                  ((v) << 8)
  #define BLERD_DC_COMP_I_CODE_SET(x, v)           do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define BLERD_DC_COMP_I_CODE_GET(x)              (((x) >> 8) & 0xff)

#define BLERD_IQMIS_ADDR                             0x000000c4
#define BLERD_IQMIS_MASK                             0x0000ffff
/** I-component of the IQ mismatch correction @multiple */
  #define BLERD_IQMIS_IQCOMP_QVAL(v)               ((v) << 0)
  #define BLERD_IQMIS_IQCOMP_QVAL_SET(x, v)        do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define BLERD_IQMIS_IQCOMP_QVAL_GET(x)           (((x) >> 0) & 0xff)
/** Q-component of the IQ mismatch correction @multiple */
  #define BLERD_IQMIS_IQCOMP_IVAL(v)               ((v) << 8)
  #define BLERD_IQMIS_IQCOMP_IVAL_SET(x, v)        do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define BLERD_IQMIS_IQCOMP_IVAL_GET(x)           (((x) >> 8) & 0xff)

#define BLERD_DCCAL_ADDR                             0x000000c8
#define BLERD_DCCAL_MASK                             0x00007fff
/** this value is driven to DCCAL Icode if the DCCA: test mode enabled @multiple
   */
  #define BLERD_DCCAL_TEST_IBITS(v)                ((v) << 0)
  #define BLERD_DCCAL_TEST_IBITS_SET(x, v)         do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define BLERD_DCCAL_TEST_IBITS_GET(x)            (((x) >> 0) & 0x3f)
/** this value is driven to DCCAL Qcode if the DCCA: test mode enabled @multiple
   */
  #define BLERD_DCCAL_TEST_QBITS(v)                ((v) << 6)
  #define BLERD_DCCAL_TEST_QBITS_SET(x, v)         do { (x) = (((x) & ~0xfc0) | ((v) << 6)); } while(0)
  #define BLERD_DCCAL_TEST_QBITS_GET(x)            (((x) >> 6) & 0x3f)
/** enable the DCCAL test mode @multiple */
  #define BLERD_DCCAL_TEST_MODE                    0x1000
/** 1: inverts the polarity of DCCAL Q code @multiple */
  #define BLERD_DCCAL_TEST_Q_POLARITY              0x2000
/** 1: inverts the polarity of DCCAL I code @multiple */
  #define BLERD_DCCAL_TEST_I_POLARITY              0x4000

#define BLERD_RCCAL_ADDR                             0x000000cc
#define BLERD_RCCAL_MASK                             0x0000fbff
/** Force RC code for TIA/CBPF under test mode @multiple */
  #define BLERD_RCCAL_CODE_RX(v)                   ((v) << 0)
  #define BLERD_RCCAL_CODE_RX_SET(x, v)            do { (x) = (((x) & ~0x1f) | ((v) << 0)); } while(0)
  #define BLERD_RCCAL_CODE_RX_GET(x)               (((x) >> 0) & 0x1f)
/** Force RC code for TX LPF under test mode @multiple */
  #define BLERD_RCCAL_CODE_TX(v)                   ((v) << 5)
  #define BLERD_RCCAL_CODE_TX_SET(x, v)            do { (x) = (((x) & ~0x3e0) | ((v) << 5)); } while(0)
  #define BLERD_RCCAL_CODE_TX_GET(x)               (((x) >> 5) & 0x1f)
/** Soft reset power change detection @multiple */
  #define BLERD_RCCAL_SOFTRST_POWER_DIFF(v)        ((BLERD_RCCAL_SOFTRST_POWER_DIFF_##v) << 11)
  #define BLERD_RCCAL_SOFTRST_POWER_DIFF_SET(x, v) do { (x) = (((x) & ~0x800) | ((BLERD_RCCAL_SOFTRST_POWER_DIFF_##v) << 11)); } while(0)
  #define BLERD_RCCAL_SOFTRST_POWER_DIFF_SETVAL(x, v) do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define BLERD_RCCAL_SOFTRST_POWER_DIFF_GET(x)    (((x) >> 11) & 0x1)
    #define BLERD_RCCAL_SOFTRST_POWER_DIFF_6DB       0x00000000
    #define BLERD_RCCAL_SOFTRST_POWER_DIFF_12DB      0x00000001
/** Soft reset is enabled to STR block @multiple */
  #define BLERD_RCCAL_SOFTRST_EN_TOSTR             0x1000
/** Soft reset is enable to diffdet block @multiple */
  #define BLERD_RCCAL_SOFTRST_EN_TODIFF            0x2000
/** AGC gain increase requirement wait times: @multiple */
  #define BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES(v)  ((BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES_##v) << 14)
  #define BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES_SET(x, v) do { (x) = (((x) & ~0xc000) | ((BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES_##v) << 14)); } while(0)
  #define BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES_SETVAL(x, v) do { (x) = (((x) & ~0xc000) | ((v) << 14)); } while(0)
  #define BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES_GET(x) (((x) >> 14) & 0x3)
/** respose for 1st gain increase request */
    #define BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES_1ST 0x00000000
/** respone for 2nd gain increase request */
    #define BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES_2ND 0x00000001
/** respons for 3rd gain increase request */
    #define BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES_3RD 0x00000002
/** respons for 4th gain increase request */
    #define BLERD_RCCAL_AGC_GAIN_INC_TIMES_THRES_4TH 0x00000003

#define BLERD_DSM1_ADDR                              0x000000d0
#define BLERD_DSM1_MASK                              0x0000ffff
/** index at which DSM code should be freezed when fection value = 3/24 @multiple
   */
  #define BLERD_DSM1_INDX_CODE3(v)                 ((v) << 0)
  #define BLERD_DSM1_INDX_CODE3_SET(x, v)          do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_DSM1_INDX_CODE3_GET(x)             (((x) >> 0) & 0xf)
/** index at which DSM code should be freezed when fection value = 2/24 @multiple
   */
  #define BLERD_DSM1_INDX_CODE2(v)                 ((v) << 4)
  #define BLERD_DSM1_INDX_CODE2_SET(x, v)          do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define BLERD_DSM1_INDX_CODE2_GET(x)             (((x) >> 4) & 0xf)
/** index at which DSM code should be freezed when fection value = 1/24 @multiple
   */
  #define BLERD_DSM1_INDX_CODE1(v)                 ((v) << 8)
  #define BLERD_DSM1_INDX_CODE1_SET(x, v)          do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define BLERD_DSM1_INDX_CODE1_GET(x)             (((x) >> 8) & 0xf)
/** index at which DSM code should be freezed when fection value = 0 @multiple */
  #define BLERD_DSM1_INDX_CODE0(v)                 ((v) << 12)
  #define BLERD_DSM1_INDX_CODE0_SET(x, v)          do { (x) = (((x) & ~0xf000) | ((v) << 12)); } while(0)
  #define BLERD_DSM1_INDX_CODE0_GET(x)             (((x) >> 12) & 0xf)

#define BLERD_DSM2_ADDR                              0x000000d4
#define BLERD_DSM2_MASK                              0x0000ffff
/** index at which DSM code should be freezed when fection value = 7/24 @multiple
   */
  #define BLERD_DSM2_INDX_CODE7(v)                 ((v) << 0)
  #define BLERD_DSM2_INDX_CODE7_SET(x, v)          do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_DSM2_INDX_CODE7_GET(x)             (((x) >> 0) & 0xf)
/** index at which DSM code should be freezed when fection value = 6/24 @multiple
   */
  #define BLERD_DSM2_INDX_CODE6(v)                 ((v) << 4)
  #define BLERD_DSM2_INDX_CODE6_SET(x, v)          do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define BLERD_DSM2_INDX_CODE6_GET(x)             (((x) >> 4) & 0xf)
/** index at which DSM code should be freezed when fection value = 5/24 @multiple
   */
  #define BLERD_DSM2_INDX_CODE5(v)                 ((v) << 8)
  #define BLERD_DSM2_INDX_CODE5_SET(x, v)          do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define BLERD_DSM2_INDX_CODE5_GET(x)             (((x) >> 8) & 0xf)
/** index at which DSM code should be freezed when fection value = 4/24 @multiple
   */
  #define BLERD_DSM2_INDX_CODE4(v)                 ((v) << 12)
  #define BLERD_DSM2_INDX_CODE4_SET(x, v)          do { (x) = (((x) & ~0xf000) | ((v) << 12)); } while(0)
  #define BLERD_DSM2_INDX_CODE4_GET(x)             (((x) >> 12) & 0xf)

#define BLERD_DSM3_ADDR                              0x000000d8
#define BLERD_DSM3_MASK                              0x0000ffff
/** index at which DSM code should be freezed when fection value = 11/24
   @multiple */
  #define BLERD_DSM3_INDX_CODE11(v)                ((v) << 0)
  #define BLERD_DSM3_INDX_CODE11_SET(x, v)         do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_DSM3_INDX_CODE11_GET(x)            (((x) >> 0) & 0xf)
/** index at which DSM code should be freezed when fection value = 10/24
   @multiple */
  #define BLERD_DSM3_INDX_CODE10(v)                ((v) << 4)
  #define BLERD_DSM3_INDX_CODE10_SET(x, v)         do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define BLERD_DSM3_INDX_CODE10_GET(x)            (((x) >> 4) & 0xf)
/** index at which DSM code should be freezed when fection value = 9/24 @multiple
   */
  #define BLERD_DSM3_INDX_CODE9(v)                 ((v) << 8)
  #define BLERD_DSM3_INDX_CODE9_SET(x, v)          do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define BLERD_DSM3_INDX_CODE9_GET(x)             (((x) >> 8) & 0xf)
/** index at which DSM code should be freezed when fection value = 8/24 @multiple
   */
  #define BLERD_DSM3_INDX_CODE8(v)                 ((v) << 12)
  #define BLERD_DSM3_INDX_CODE8_SET(x, v)          do { (x) = (((x) & ~0xf000) | ((v) << 12)); } while(0)
  #define BLERD_DSM3_INDX_CODE8_GET(x)             (((x) >> 12) & 0xf)

#define BLERD_DSM4_ADDR                              0x000000dc
#define BLERD_DSM4_MASK                              0x0000ffff
/** index at which DSM code should be freezed when fection value = 15/24
   @multiple */
  #define BLERD_DSM4_INDX_CODE15(v)                ((v) << 0)
  #define BLERD_DSM4_INDX_CODE15_SET(x, v)         do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_DSM4_INDX_CODE15_GET(x)            (((x) >> 0) & 0xf)
/** index at which DSM code should be freezed when fection value = 14/24
   @multiple */
  #define BLERD_DSM4_INDX_CODE14(v)                ((v) << 4)
  #define BLERD_DSM4_INDX_CODE14_SET(x, v)         do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define BLERD_DSM4_INDX_CODE14_GET(x)            (((x) >> 4) & 0xf)
/** index at which DSM code should be freezed when fection value = 13/24
   @multiple */
  #define BLERD_DSM4_INDX_CODE13(v)                ((v) << 8)
  #define BLERD_DSM4_INDX_CODE13_SET(x, v)         do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define BLERD_DSM4_INDX_CODE13_GET(x)            (((x) >> 8) & 0xf)
/** index at which DSM code should be freezed when fection value = 12/24
   @multiple */
  #define BLERD_DSM4_INDX_CODE12(v)                ((v) << 12)
  #define BLERD_DSM4_INDX_CODE12_SET(x, v)         do { (x) = (((x) & ~0xf000) | ((v) << 12)); } while(0)
  #define BLERD_DSM4_INDX_CODE12_GET(x)            (((x) >> 12) & 0xf)

#define BLERD_DSM5_ADDR                              0x000000e0
#define BLERD_DSM5_MASK                              0x0000ffff
/** index at which DSM code should be freezed when fection value = 19/24
   @multiple */
  #define BLERD_DSM5_INDX_CODE19(v)                ((v) << 0)
  #define BLERD_DSM5_INDX_CODE19_SET(x, v)         do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_DSM5_INDX_CODE19_GET(x)            (((x) >> 0) & 0xf)
/** index at which DSM code should be freezed when fection value = 18/24
   @multiple */
  #define BLERD_DSM5_INDX_CODE18(v)                ((v) << 4)
  #define BLERD_DSM5_INDX_CODE18_SET(x, v)         do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define BLERD_DSM5_INDX_CODE18_GET(x)            (((x) >> 4) & 0xf)
/** index at which DSM code should be freezed when fection value = 17/24
   @multiple */
  #define BLERD_DSM5_INDX_CODE17(v)                ((v) << 8)
  #define BLERD_DSM5_INDX_CODE17_SET(x, v)         do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define BLERD_DSM5_INDX_CODE17_GET(x)            (((x) >> 8) & 0xf)
/** index at which DSM code should be freezed when fection value = 16/24
   @multiple */
  #define BLERD_DSM5_INDX_CODE16(v)                ((v) << 12)
  #define BLERD_DSM5_INDX_CODE16_SET(x, v)         do { (x) = (((x) & ~0xf000) | ((v) << 12)); } while(0)
  #define BLERD_DSM5_INDX_CODE16_GET(x)            (((x) >> 12) & 0xf)

#define BLERD_DSM6_ADDR                              0x000000e4
#define BLERD_DSM6_MASK                              0x0000ffff
/** index at which DSM code should be freezed when fection value = 23/24
   @multiple */
  #define BLERD_DSM6_INDX_CODE23(v)                ((v) << 0)
  #define BLERD_DSM6_INDX_CODE23_SET(x, v)         do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_DSM6_INDX_CODE23_GET(x)            (((x) >> 0) & 0xf)
/** index at which DSM code should be freezed when fection value = 22/24
   @multiple */
  #define BLERD_DSM6_INDX_CODE22(v)                ((v) << 4)
  #define BLERD_DSM6_INDX_CODE22_SET(x, v)         do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define BLERD_DSM6_INDX_CODE22_GET(x)            (((x) >> 4) & 0xf)
/** index at which DSM code should be freezed when fection value = 21/24
   @multiple */
  #define BLERD_DSM6_INDX_CODE21(v)                ((v) << 8)
  #define BLERD_DSM6_INDX_CODE21_SET(x, v)         do { (x) = (((x) & ~0xf00) | ((v) << 8)); } while(0)
  #define BLERD_DSM6_INDX_CODE21_GET(x)            (((x) >> 8) & 0xf)
/** index at which DSM code should be freezed when fection value = 20/24
   @multiple */
  #define BLERD_DSM6_INDX_CODE20(v)                ((v) << 12)
  #define BLERD_DSM6_INDX_CODE20_SET(x, v)         do { (x) = (((x) & ~0xf000) | ((v) << 12)); } while(0)
  #define BLERD_DSM6_INDX_CODE20_GET(x)            (((x) >> 12) & 0xf)

#define BLERD_MONI_ADDR                              0x000000e8
#define BLERD_MONI_MASK                              0x0000ffff
/** RX ADC ICORE power up @multiple */
  #define BLERD_MONI_RX_ADC_ICORE                  0x0001
/** RX CBPF power up @multiple */
  #define BLERD_MONI_RX_CBPF                       0x0002
/** RX LNA power up @multiple */
  #define BLERD_MONI_RX_LNA                        0x0004
/** TX driver power up @multiple */
  #define BLERD_MONI_TX_DRIVER                     0x0008
/** TX LPF power up @multiple */
  #define BLERD_MONI_TX_LPF                        0x0010
/** TX DAC power up @multiple */
  #define BLERD_MONI_TX_DAC                        0x0020
/** TX bias power up @multiple */
  #define BLERD_MONI_TX_BIAS                       0x0040
/** SY VCO power up @multiple */
  #define BLERD_MONI_SY_VCO                        0x0080
/** SY bias power up @multiple */
  #define BLERD_MONI_SY_BIAS                       0x0100
/** balun LDO power up @multiple */
  #define BLERD_MONI_BALUN_LDO                     0x0200
/** iso_eanble power up @multiple */
  #define BLERD_MONI_ISO_EANBLE                    0x0400
/** CBPF gain code read back @multiple */
  #define BLERD_MONI_CBPF_CODE(v)                  ((v) << 11)
  #define BLERD_MONI_CBPF_CODE_SET(x, v)           do { (x) = (((x) & ~0x1800) | ((v) << 11)); } while(0)
  #define BLERD_MONI_CBPF_CODE_GET(x)              (((x) >> 11) & 0x3)
/** LNA gain code read back @multiple */
  #define BLERD_MONI_LNA_CODE(v)                   ((v) << 13)
  #define BLERD_MONI_LNA_CODE_SET(x, v)            do { (x) = (((x) & ~0xe000) | ((v) << 13)); } while(0)
  #define BLERD_MONI_LNA_CODE_GET(x)               (((x) >> 13) & 0x7)

#define BLERD_DBG_BB_ADDR                            0x000000ec
#define BLERD_DBG_BB_MASK                            0x0000ffff
/** when modem_read_dc_offset_sel = 1, RX DCCAL Q path can be read through this
   field. When modem_read_dc_offset_sel = 0, RC DC offset capture Q code can be
   read through this field rx offsetcal Q code can be read through this field if
   modem_read_dc_offset_sel = 0 @multiple */
  #define BLERD_DBG_BB_RX_OFFSET_Q_CODE(v)         ((v) << 0)
  #define BLERD_DBG_BB_RX_OFFSET_Q_CODE_SET(x, v)  do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define BLERD_DBG_BB_RX_OFFSET_Q_CODE_GET(x)     (((x) >> 0) & 0xff)
/** when modem_read_dc_offset_sel = 1, RX DCCAL I path can be read through this
   field. When modem_read_dc_offset_sel = 0, RC DC offset capture I code can be
   read through this field rx offsetcal Q code can be read through this field if
   modem_read_dc_offset_sel = 0 @multiple */
  #define BLERD_DBG_BB_RX_OFFSET_I_CODE(v)         ((v) << 8)
  #define BLERD_DBG_BB_RX_OFFSET_I_CODE_SET(x, v)  do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define BLERD_DBG_BB_RX_OFFSET_I_CODE_GET(x)     (((x) >> 8) & 0xff)

#define BLERD_DBG_1_ADDR                             0x000000f0
#define BLERD_DBG_1_MASK                             0x00007fff
/** The FCAL fine code is reflected in this field @multiple */
  #define BLERD_DBG_1_FCAL_FINE_CODE(v)            ((v) << 0)
  #define BLERD_DBG_1_FCAL_FINE_CODE_SET(x, v)     do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_DBG_1_FCAL_FINE_CODE_GET(x)        (((x) >> 0) & 0xf)
/** The FCAL coars code is reflected in this field @multiple */
  #define BLERD_DBG_1_FCAL_COARSE_CODE(v)          ((v) << 4)
  #define BLERD_DBG_1_FCAL_COARSE_CODE_SET(x, v)   do { (x) = (((x) & ~0xff0) | ((v) << 4)); } while(0)
  #define BLERD_DBG_1_FCAL_COARSE_CODE_GET(x)      (((x) >> 4) & 0xff)
/** 1: indicates when frequency calibration is done @multiple */
  #define BLERD_DBG_1_FCAL_DONE                    0x1000
/** 1: indicates TX KV calibration is done for current packet @multiple */
  #define BLERD_DBG_1_KVCAL_DONE                   0x2000
/** 1: indicates RX DC calibration is done for current packet @multiple */
  #define BLERD_DBG_1_DCCAL_DONE                   0x4000

#define BLERD_DBG_2_ADDR                             0x000000f4
#define BLERD_DBG_2_MASK                             0x0000ffff
/** the dbg_fcal_cnt_sel value, the 16 LSB bits of the corresponding debug
   counter is pouplated in this register [6:0] is kvcal_gain when select
   kvcal_gain @multiple */
  #define BLERD_DBG_2_FCAL_CNT_LSB(v)              ((v) << 0)
  #define BLERD_DBG_2_FCAL_CNT_LSB_SET(x, v)       do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define BLERD_DBG_2_FCAL_CNT_LSB_GET(x)          (((x) >> 0) & 0xffff)

#define BLERD_DBG_3_ADDR                             0x000000f8
#define BLERD_DBG_3_MASK                             0x0000fc0f
/** the dbg_fcal_cnt_sel value, the 4 MSB bits of the corresponding debug counter
   is pouplated in this register @multiple */
  #define BLERD_DBG_3_FCAL_CNT_MSB(v)              ((v) << 0)
  #define BLERD_DBG_3_FCAL_CNT_MSB_SET(x, v)       do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BLERD_DBG_3_FCAL_CNT_MSB_GET(x)          (((x) >> 0) & 0xf)
/** RCCAL code read out through register @multiple */
  #define BLERD_DBG_3_RD_RCCAL_CODE(v)             ((v) << 10)
  #define BLERD_DBG_3_RD_RCCAL_CODE_SET(x, v)      do { (x) = (((x) & ~0x7c00) | ((v) << 10)); } while(0)
  #define BLERD_DBG_3_RD_RCCAL_CODE_GET(x)         (((x) >> 10) & 0x1f)
/** RCCAL done indictor @multiple */
  #define BLERD_DBG_3_RD_RCCAL_DONE                0x8000

/** ADC Data I and Q @multiple */
#define BLERD_READ_IQ_ADDR(ridx)                     (0x00000100 + (ridx) * 4)
#define BLERD_READ_IQ_COUNT                          4
#define BLERD_READ_IQ_MASK                           0x00000000

#endif

