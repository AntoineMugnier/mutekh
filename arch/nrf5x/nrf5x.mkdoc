@section TP {nRF51/nRF52 Architecture support}

Nordic's nRF51 and nRF52 architecture support.

@section {Drivers}

  @section Clocks
    Clocking in nRF5x is quite simple because most clock dependencies
    are handled automatically by hardware, and because there are only
    two clock sources, using fixed frequencies.  Nevertheless, clock
    driver handles many tedious aspects of the clocking of the device:

    @list
      @item it handles LFCLK calibration when there is no external
        chrystal available,
      @item it monitors temperature to see whether to calibrate LFCLK,
      @item it tries to delay LFCLK calibration to a later time where
        HFCLK runs,
      @item it handles switching source for LFCLK when requested, and
        indicates when precision changes,
      @item it handles switching source for HFCLK when requested, and
        indicates when precision changes.
    @end list
  @end section

  @section GPIO
    GPIO controller implements both the GPIO class and the ICU class,
    so that an external peripheral can use a GPIO as an interrupt
    sink.  This feature uses GPIOTE channels in Event mode.  @see
    GPIOTE.
  @end section

  @section PWM
    PWM is a composite device using a timer, PPIs and GPIOTE channels.
    GPIOTE are used in Task mode.  @see GPIOTE.
  @end section
  
@end section

@section {Implementation notes}

  @section {Device register access}
    nRF5x devices all look the same and regular.  Device at address
    0x4000000 has number 0 and interrupt 0, device at address 0x40001000
    has number 1 and interrupt 1, and so on.  Inside a device register
    map, there are tasks, events, shorts, interrupt handling, and then
    configuration registers.

    This regular pattern explains why nRF5x architecture declaration
    adds an overlay on top of cpu_mem_read_32 and cpu_mem_write_32 to
    access hardware registers.  nRF5x code use the following accessors:
    @list
      @item nrf_task_trigger,
      @item nrf_event_check,
      @item nrf_event_clear,
      @item nrf_event_wait,
      @item nrf_event_wait_clear,
      @item nrf_it_is_enabled,
      @item nrf_it_set_mask,
      @item nrf_it_enable,
      @item nrf_it_enable_mask,
      @item nrf_it_disable,
      @item nrf_it_disable_mask,
      @item nrf_short_set,
      @item nrf_short_enable,
      @item nrf_short_enable_mask,
      @item nrf_short_disable,
      @item nrf_short_disable_mask,
      @item nrf_reg_get,
      @item nrf_reg_set.
    @end list

    All these accessors take device base address and task/event/register
    number as arguments.  These accessors make the code obvious about
    what the driver intends to do.
  @end section
  
  @section PPI
    PPIs are statically allocated by drivers as needed.  This is done
    through the @tt CONFIG_DRIVER_NRF5X_PPI_ENUM enum config token.
  @end section

  @section GPIOTE
    GPIOTE channels are partitioned between GPIO ICU input and PWM
    outputs.  Allocation between those two modules is static.
  @end section

@end section
@end section
