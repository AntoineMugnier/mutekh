@section TP {nRF51/nRF52 Architecture support}

@parse{
arch/nrf5x/ids.h
arch/nrf5x/peripheral.h
}

Nordic's nRF51 and nRF52 architectures are supported for most of their
hardware features.  Most development boards are supported as well.

@section {Drivers}

  @section {Clocks}
    Clocking in nRF5x is quite simple because most clock dependencies
    are handled automatically by hardware, and because there are only
    two clock sources, using fixed frequencies.  Nevertheless, clock
    driver handles many tedious aspects of the clocking of the device:

    @list
      @item it handles LFCLK calibration when there is no external
        crystal available,
      @item it monitors temperature to see whether to calibrate LFCLK,
      @item it tries to delay LFCLK calibration to a later time where
        HFCLK runs,
      @item it handles switching source for LFCLK when requested, and
        indicates when precision changes,
      @item it handles switching source for HFCLK when requested, and
        indicates when precision changes.
    @end list

    Clock tree is designed to be as straightforward as possible to
    use. Clock driver exports four clocks:
    @list
      @item @ref {NRF_CLOCK_LF} {Low Frequency clock, with unspecified
        precision},
      @item @ref {NRF_CLOCK_LF_PRECISE} {Low Frequency clock, with
        specified precision}, calibrated or not (depending on whether
        LFCLK source is internal RC or an external crystal),
      @item @ref {NRF_CLOCK_HF} {High Frequency clock, with
        unspecified precision},
      @item @ref {NRF_CLOCK_HF_PRECISE} {High Frequency clock, with
        specified precision}.
    @end list

    Both the low frequency and both the high frequency clocks
    described here actually are the same internal clock tree, but
    requesting the precise version enables crystal oscillator or
    calibration.  This way, in the device tree, platform designer may
    connect either the low precision or high precision clock,
    depending on needs.
  @end section

  @section {GPIO}
    GPIO controller implements both the GPIO class and the ICU class,
    so that an external peripheral can use a GPIO as an interrupt
    sink.  This feature uses GPIOTE channels in Event mode.  @see
    GPIOTE.
  @end section

  @section {PWM}
    PWM is a composite device using a timer, PPIs and GPIOTE channels.
    GPIOTE are used in Task mode.  @see GPIOTE.
  @end section

  @section {UART}
    UART is implemented as a Character Device, fully interrupt driven.
    Optionnally, nRF UART driver may also be enabled to handle the
    UART class to support dynamic port reconfiguration.

    Printk support is also implemented, it has transparent coexistence
    support with char/uart device driver on the same hardware block.

    Declaration of UART device is board-specific.
  @end section

  @section {I2C}
    Hardware I2C block is available with full interrupt support.  It
    only supports master operation, this is a hardware limitation.
  @end section

  @section {SPI}
    Hardware SPI-master block is available with full interrupt
    support.

    Slave SPI block is unsupported.
  @end section

  @section {RTC}
    RTC is supported as a Timer device.  When driver is compiled in,
    RTC1 instance is declared built-in as "rtc1".  RTC0 is left
    available for BLE radio driver.  User may instantiate RTC0 on its
    own if radio driver is unused.
  @end section

  @section {NVMC}
    Flash controller is implemented with two concurrent classes:
    @list
      @item Memory controller,
      @item Persistent data controller.
    @end list

    This allows to implement persistent data support and yet have
    concurrent raw block accesses.

    Flash access is polled and fully blocking when writing.  This is a
    hardware-enforced requirement.
  @end section

  @section {Timer}
    Timers are implemented as Timer devices.  When driver is enabled,
    Timer1 is instantiated as "timer1".  Timer0 is left available for
    BLE radio driver.  User may instantiate Timer0 on its own if radio
    driver is unused.
  @end section

  @section {BLE Radio}
    BLE Radio driver implements various network layers, depending on
    the @ref {+Bluetooth Low Energy library} configuration:

    @list
      @item @ref {@ble/net/adv.h} {Advertising} layer,
      @item @ref {@ble/net/scanner.h} {Scanner} layer (Oberver,
        Scanner, Initiator),
      @item @ref {@ble/net/phy.h} {Slave},
      @item @ref {@ble/net/phy.h} {Master}.
    @end list

    Link-layer (LL demux, Crypto and LLCP) is handled through generic
    libble network layers.

    This driver uses 3 hardware blocks: @tt Radio, @tt RTC0 and @tt
    Timer0.  @tt Timer0 and @tt RTC0 blocks may not be changed to
    others as there are some hardwired @tt PPIs between them.

    Nordic assigns Static Random addresses to its chips.  Driver
    retrieves device address from @tt FICR.
  @end section
  
  @section {AES}
    Hardware AES encrypt block is supported through a crypto driver
    which supports 4 functions:

    @list
      @item Basic AES block encrypt,
      @item a custom AES-based seedable DRBG,
      @item BLE-CCM mode (it only supports CCM operation with
        BLE-specific parameters),
      @item AES-CMAC, a keyed-hash algorithm used in Bluetooth
    @end list

    As most operations are fast and shorter than an interrupt
    round-trip, cryptographical operations use a @ref
    {dev_request_dlqueue_s} {delayed queued} to handle request from
    interruptible mode, in a busy-wait manner.
  @end section

  @section {RNG}
    Hardware Thermal noise random number generator is supported as a
    Cryptographic device yielding a random stream without context.
    Derivation compensation is enabled.

    This driver should only be used to seed another RNG.
  @end section

  @section {ADC}
    ADC is handled through relevant @ref {VALIO_ADC_VALUE} {Valio}
    @ref {valio_adc_group_s} {subclass}.  Analog pin configuration is
    done at driver instantiation time.
  @end section

@end section

@section {Unsupported hardware features}
  @list
    @item @tt {SPI Slave}: MutekH has no driver class for this;
    @item @tt AAR: This is of no usefulness for current MutekH BLE
      stack implementation;
    @item @tt WDT: Watchdog is not a kernel feature;
    @item @tt QDEC: MutekH has no such device definition yet,
    @item @tt nRF52 UARTE, SPIM, TWIE blocks with EasyDMA,
    @item @tt nRF52 NFC tag interface,
    @item @tt nRF52 I2S and PDM audio interfaces.
  @end list
@end section

@section {Boards}

  @section {nRF51822-Dongle}
    PCA10000 is the most simple board.  UART is driven as a character
    device, RGB LED can be controlled through GPIOs or PWM drivers.
  @end section

  @section {nRF51822-DK nRFgo boards}
    PCA10004 and PCA10005 are actually the same boards from a software
    point of view.  Only difference is on the PCB antenna vs. SMA connector.

    Their support is quite basic, connection with hardware on the
    nRFgo mother board has not been explored.
  @end section

  @section {nRF51822-mKit}
    This board is mBed-based development board for nRF51.  It has all
    IO ports routed to external headers, user may use IOs as needed.
    UART is routed to USB controller and declared.  All other IOs
    (including LEDs and buttons) are left to user code.
  @end section

  @section {nRF51-SmartRemote}
    PCA20002 is daugther-board for SmartRemote.  This board only
    contains the nRF51 chip and an I2C extender (PCA9557).  It is
    meant to be plugged to a SmartRemote motherboard.

    In PCA20002 defintion, all SmartRemote peripherals are declared as
    well.  Not all of them are driven by MutekH yet, though.
  @end section

  @section {nRF51-Beacon}
    PCA20006 contains no other IC than the nRF51.  UART is declared as
    defined in schematic (goes to tag-connect).  RGB-LED and buttons
    are left to user code.
  @end section

  @section {nRF52-Preview-DK}
    PCA10036 board definition declares buttons.  All other IOs are
    left to the user.
  @end section

  @section {nRF51-DK}
    PCA10028 board definition declares buttons.  All other IOs are
    left to the user.
  @end section

  @section {nRF51-Dongle}
    PCA10031 is successor of nRF51822-Dongle (PCA10000).  It shares
    basic layout, with some GPIOs going out of the board on PCB side.
  @end section

  @section {Seeed Studio Tiny BLE}
    @url {Tiny BLE} {http://www.seeedstudio.com/wiki/Tiny_BLE} is a
    board designed by Seeed Studio.  It contains a RGB Led, a MPU6050
    6-axis accelerometer + gyroscope, and a button.  All peripherals
    are supported in MutekH.
  @end section

@end section

@section {Implementation notes}

  @section {Device register access}
    @insert {@arch/nrf5x/ids.h} decl_inline_doc
    @insert {@arch/nrf5x/peripheral.h} decl_inline_doc
  @end section
  
  @section {PPI}
    PPIs are statically allocated by drivers as needed.  This is done
    through the @tt CONFIG_DRIVER_NRF5X_PPI_ENUM enum config token.
  @end section

  @section {GPIOTE}
    GPIOTE channels are partitioned between GPIO ICU input and PWM
    outputs.  Allocation between those two modules is static.
  @end section

@end section

@end section
