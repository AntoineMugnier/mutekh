/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_mask=1 cdefs_use_field_set=1                   \
     cdefs_use_field_get=1 reg_prefix=STM32 field_prefix=STM32                 \
     cdefs_use_field_mask=1 cdefs_use_field_setval=1
*/

#ifndef _SPI_BFGEN_DEFS_
#define _SPI_BFGEN_DEFS_

#define STM32_SPI_CR1_ADDR                           0x00000000
#define STM32_SPI_CR1_MASK                           0x0000ffff
  #define STM32_SPI_CR1_CPHA_MASK                  0x00000001
  #define STM32_SPI_CR1_CPHA(v)                    ((STM32_SPI_CR1_CPHA_##v) << 0)
  #define STM32_SPI_CR1_CPHA_SET(x, v)             do { (x) = (((x) & ~0x1) | ((STM32_SPI_CR1_CPHA_##v) << 0)); } while(0)
  #define STM32_SPI_CR1_CPHA_SETVAL(x, v)          do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define STM32_SPI_CR1_CPHA_GET(x)                (((x) >> 0) & 0x1)
    #define STM32_SPI_CR1_CPHA_FIRST_TRANS           0x00000000
    #define STM32_SPI_CR1_CPHA_SECOND_TRANS          0x00000001
  #define STM32_SPI_CR1_CPOL_MASK                  0x00000001
  #define STM32_SPI_CR1_CPOL                       0x00000002
  #define STM32_SPI_CR1_CPOL_SET(x, v)             do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define STM32_SPI_CR1_CPOL_GET(x)                (((x) >> 1) & 0x1)
  #define STM32_SPI_CR1_MSTR_MASK                  0x00000001
  #define STM32_SPI_CR1_MSTR(v)                    ((STM32_SPI_CR1_MSTR_##v) << 2)
  #define STM32_SPI_CR1_MSTR_SET(x, v)             do { (x) = (((x) & ~0x4) | ((STM32_SPI_CR1_MSTR_##v) << 2)); } while(0)
  #define STM32_SPI_CR1_MSTR_SETVAL(x, v)          do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define STM32_SPI_CR1_MSTR_GET(x)                (((x) >> 2) & 0x1)
    #define STM32_SPI_CR1_MSTR_SLAVE                 0x00000000
    #define STM32_SPI_CR1_MSTR_MASTER                0x00000001
  #define STM32_SPI_CR1_BR_MASK                    0x00000007
  #define STM32_SPI_CR1_BR(v)                      ((STM32_SPI_CR1_BR_##v) << 3)
  #define STM32_SPI_CR1_BR_SET(x, v)               do { (x) = (((x) & ~0x38) | ((STM32_SPI_CR1_BR_##v) << 3)); } while(0)
  #define STM32_SPI_CR1_BR_SETVAL(x, v)            do { (x) = (((x) & ~0x38) | ((v) << 3)); } while(0)
  #define STM32_SPI_CR1_BR_GET(x)                  (((x) >> 3) & 0x7)
    #define STM32_SPI_CR1_BR_PCLK_DIV_2              0x00000000
    #define STM32_SPI_CR1_BR_PCLK_DIV_4              0x00000001
    #define STM32_SPI_CR1_BR_PCLK_DIV_8              0x00000002
    #define STM32_SPI_CR1_BR_PCLK_DIV_16             0x00000003
    #define STM32_SPI_CR1_BR_PCLK_DIV_32             0x00000004
    #define STM32_SPI_CR1_BR_PCLK_DIV_64             0x00000005
    #define STM32_SPI_CR1_BR_PCLK_DIV_128            0x00000006
    #define STM32_SPI_CR1_BR_PCLK_DIV_256            0x00000007
  #define STM32_SPI_CR1_SPE_MASK                   0x00000001
  #define STM32_SPI_CR1_SPE                        0x00000040
  #define STM32_SPI_CR1_SPE_SET(x, v)              do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define STM32_SPI_CR1_SPE_GET(x)                 (((x) >> 6) & 0x1)
  #define STM32_SPI_CR1_LSBFIRST_MASK              0x00000001
  #define STM32_SPI_CR1_LSBFIRST                   0x00000080
  #define STM32_SPI_CR1_LSBFIRST_SET(x, v)         do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define STM32_SPI_CR1_LSBFIRST_GET(x)            (((x) >> 7) & 0x1)
  #define STM32_SPI_CR1_SSI_MASK                   0x00000001
  #define STM32_SPI_CR1_SSI                        0x00000100
  #define STM32_SPI_CR1_SSI_SET(x, v)              do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define STM32_SPI_CR1_SSI_GET(x)                 (((x) >> 8) & 0x1)
  #define STM32_SPI_CR1_SSM_MASK                   0x00000001
  #define STM32_SPI_CR1_SSM                        0x00000200
  #define STM32_SPI_CR1_SSM_SET(x, v)              do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define STM32_SPI_CR1_SSM_GET(x)                 (((x) >> 9) & 0x1)
  #define STM32_SPI_CR1_RXONLY_MASK                0x00000001
  #define STM32_SPI_CR1_RXONLY(v)                  ((STM32_SPI_CR1_RXONLY_##v) << 10)
  #define STM32_SPI_CR1_RXONLY_SET(x, v)           do { (x) = (((x) & ~0x400) | ((STM32_SPI_CR1_RXONLY_##v) << 10)); } while(0)
  #define STM32_SPI_CR1_RXONLY_SETVAL(x, v)        do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define STM32_SPI_CR1_RXONLY_GET(x)              (((x) >> 10) & 0x1)
    #define STM32_SPI_CR1_RXONLY_FULL_DUPLEX         0x00000000
    #define STM32_SPI_CR1_RXONLY_OUTPUT_DISABLED     0x00000001
  #define STM32_SPI_CR1_DFF_MASK                   0x00000001
  #define STM32_SPI_CR1_DFF(v)                     ((STM32_SPI_CR1_DFF_##v) << 11)
  #define STM32_SPI_CR1_DFF_SET(x, v)              do { (x) = (((x) & ~0x800) | ((STM32_SPI_CR1_DFF_##v) << 11)); } while(0)
  #define STM32_SPI_CR1_DFF_SETVAL(x, v)           do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define STM32_SPI_CR1_DFF_GET(x)                 (((x) >> 11) & 0x1)
    #define STM32_SPI_CR1_DFF_8_BITS                 0x00000000
    #define STM32_SPI_CR1_DFF_16_BITS                0x00000001
  #define STM32_SPI_CR1_CRCNEXT_MASK               0x00000001
  #define STM32_SPI_CR1_CRCNEXT(v)                 ((STM32_SPI_CR1_CRCNEXT_##v) << 12)
  #define STM32_SPI_CR1_CRCNEXT_SET(x, v)          do { (x) = (((x) & ~0x1000) | ((STM32_SPI_CR1_CRCNEXT_##v) << 12)); } while(0)
  #define STM32_SPI_CR1_CRCNEXT_SETVAL(x, v)       do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
  #define STM32_SPI_CR1_CRCNEXT_GET(x)             (((x) >> 12) & 0x1)
    #define STM32_SPI_CR1_CRCNEXT_DATA_PHASE         0x00000000
    #define STM32_SPI_CR1_CRCNEXT_NEXT_TRANSFER      0x00000001
  #define STM32_SPI_CR1_CRCEN_MASK                 0x00000001
  #define STM32_SPI_CR1_CRCEN                      0x00002000
  #define STM32_SPI_CR1_CRCEN_SET(x, v)            do { (x) = (((x) & ~0x2000) | ((v) << 13)); } while(0)
  #define STM32_SPI_CR1_CRCEN_GET(x)               (((x) >> 13) & 0x1)
  #define STM32_SPI_CR1_BIDIOE_MASK                0x00000001
  #define STM32_SPI_CR1_BIDIOE                     0x00004000
  #define STM32_SPI_CR1_BIDIOE_SET(x, v)           do { (x) = (((x) & ~0x4000) | ((v) << 14)); } while(0)
  #define STM32_SPI_CR1_BIDIOE_GET(x)              (((x) >> 14) & 0x1)
  #define STM32_SPI_CR1_BIDIMODE_MASK              0x00000001
  #define STM32_SPI_CR1_BIDIMODE(v)                ((STM32_SPI_CR1_BIDIMODE_##v) << 15)
  #define STM32_SPI_CR1_BIDIMODE_SET(x, v)         do { (x) = (((x) & ~0x8000) | ((STM32_SPI_CR1_BIDIMODE_##v) << 15)); } while(0)
  #define STM32_SPI_CR1_BIDIMODE_SETVAL(x, v)      do { (x) = (((x) & ~0x8000) | ((v) << 15)); } while(0)
  #define STM32_SPI_CR1_BIDIMODE_GET(x)            (((x) >> 15) & 0x1)
    #define STM32_SPI_CR1_BIDIMODE_2_LINE_BIDIRECTIONAL 0x00000000
    #define STM32_SPI_CR1_BIDIMODE_1_LINE_BIDIRECTIONAL 0x00000001

#define STM32_SPI_CR2_ADDR                           0x00000004
#define STM32_SPI_CR2_MASK                           0x000000fb
  #define STM32_SPI_CR2_RXDMAEN_MASK               0x00000001
  #define STM32_SPI_CR2_RXDMAEN                    0x00000001
  #define STM32_SPI_CR2_RXDMAEN_SET(x, v)          do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define STM32_SPI_CR2_RXDMAEN_GET(x)             (((x) >> 0) & 0x1)
  #define STM32_SPI_CR2_TXDMAEN_MASK               0x00000001
  #define STM32_SPI_CR2_TXDMAEN                    0x00000002
  #define STM32_SPI_CR2_TXDMAEN_SET(x, v)          do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define STM32_SPI_CR2_TXDMAEN_GET(x)             (((x) >> 1) & 0x1)
  #define STM32_SPI_CR2_SSOE_MASK                  0x00000001
  #define STM32_SPI_CR2_SSOE                       0x00000008
  #define STM32_SPI_CR2_SSOE_SET(x, v)             do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define STM32_SPI_CR2_SSOE_GET(x)                (((x) >> 3) & 0x1)
  #define STM32_SPI_CR2_FRF_MASK                   0x00000001
  #define STM32_SPI_CR2_FRF(v)                     ((STM32_SPI_CR2_FRF_##v) << 4)
  #define STM32_SPI_CR2_FRF_SET(x, v)              do { (x) = (((x) & ~0x10) | ((STM32_SPI_CR2_FRF_##v) << 4)); } while(0)
  #define STM32_SPI_CR2_FRF_SETVAL(x, v)           do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define STM32_SPI_CR2_FRF_GET(x)                 (((x) >> 4) & 0x1)
    #define STM32_SPI_CR2_FRF_MOTOROLA_MODE          0x00000000
    #define STM32_SPI_CR2_FRF_TI_MODE                0x00000001
  #define STM32_SPI_CR2_ERRIE_MASK                 0x00000001
  #define STM32_SPI_CR2_ERRIE                      0x00000020
  #define STM32_SPI_CR2_ERRIE_SET(x, v)            do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define STM32_SPI_CR2_ERRIE_GET(x)               (((x) >> 5) & 0x1)
  #define STM32_SPI_CR2_RXNEIE_MASK                0x00000001
  #define STM32_SPI_CR2_RXNEIE                     0x00000040
  #define STM32_SPI_CR2_RXNEIE_SET(x, v)           do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define STM32_SPI_CR2_RXNEIE_GET(x)              (((x) >> 6) & 0x1)
  #define STM32_SPI_CR2_TXEIE_MASK                 0x00000001
  #define STM32_SPI_CR2_TXEIE                      0x00000080
  #define STM32_SPI_CR2_TXEIE_SET(x, v)            do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define STM32_SPI_CR2_TXEIE_GET(x)               (((x) >> 7) & 0x1)

#define STM32_SPI_SR_ADDR                            0x00000008
#define STM32_SPI_SR_MASK                            0x000001ff
  #define STM32_SPI_SR_RXNE_MASK                   0x00000001
  #define STM32_SPI_SR_RXNE                        0x00000001
  #define STM32_SPI_SR_RXNE_SET(x, v)              do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define STM32_SPI_SR_RXNE_GET(x)                 (((x) >> 0) & 0x1)
  #define STM32_SPI_SR_TXE_MASK                    0x00000001
  #define STM32_SPI_SR_TXE                         0x00000002
  #define STM32_SPI_SR_TXE_SET(x, v)               do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define STM32_SPI_SR_TXE_GET(x)                  (((x) >> 1) & 0x1)
  #define STM32_SPI_SR_CHSIDE_MASK                 0x00000001
  #define STM32_SPI_SR_CHSIDE                      0x00000004
  #define STM32_SPI_SR_CHSIDE_SET(x, v)            do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define STM32_SPI_SR_CHSIDE_GET(x)               (((x) >> 2) & 0x1)
  #define STM32_SPI_SR_UDR_MASK                    0x00000001
  #define STM32_SPI_SR_UDR                         0x00000008
  #define STM32_SPI_SR_UDR_SET(x, v)               do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define STM32_SPI_SR_UDR_GET(x)                  (((x) >> 3) & 0x1)
  #define STM32_SPI_SR_CRCERR_MASK                 0x00000001
  #define STM32_SPI_SR_CRCERR                      0x00000010
  #define STM32_SPI_SR_CRCERR_SET(x, v)            do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define STM32_SPI_SR_CRCERR_GET(x)               (((x) >> 4) & 0x1)
  #define STM32_SPI_SR_MODEF_MASK                  0x00000001
  #define STM32_SPI_SR_MODEF                       0x00000020
  #define STM32_SPI_SR_MODEF_SET(x, v)             do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define STM32_SPI_SR_MODEF_GET(x)                (((x) >> 5) & 0x1)
  #define STM32_SPI_SR_OVR_MASK                    0x00000001
  #define STM32_SPI_SR_OVR                         0x00000040
  #define STM32_SPI_SR_OVR_SET(x, v)               do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define STM32_SPI_SR_OVR_GET(x)                  (((x) >> 6) & 0x1)
  #define STM32_SPI_SR_BSY_MASK                    0x00000001
  #define STM32_SPI_SR_BSY                         0x00000080
  #define STM32_SPI_SR_BSY_SET(x, v)               do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define STM32_SPI_SR_BSY_GET(x)                  (((x) >> 7) & 0x1)
  #define STM32_SPI_SR_FRE_MASK                    0x00000001
  #define STM32_SPI_SR_FRE                         0x00000100
  #define STM32_SPI_SR_FRE_SET(x, v)               do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define STM32_SPI_SR_FRE_GET(x)                  (((x) >> 8) & 0x1)

#define STM32_SPI_DR_ADDR                            0x0000000c
#define STM32_SPI_DR_MASK                            0x00000000

#define STM32_SPI_CRCPR_ADDR                         0x00000010
#define STM32_SPI_CRCPR_MASK                         0x00000000

#define STM32_SPI_RXCRCR_ADDR                        0x00000014
#define STM32_SPI_RXCRCR_MASK                        0x00000000

#define STM32_SPI_TXCRCR_ADDR                        0x00000018
#define STM32_SPI_TXCRCR_MASK                        0x00000000

#endif

