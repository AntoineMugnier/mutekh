/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs cdefs_use_reg_meask=1 cdefs_use_field_set=1                  \
     cdefs_use_field_get=1 reg_prefix=STM32 field_prefix=STM32                 \
     cdefs_use_field_mask=1 cdefs_use_field_setval=1
*/

#ifndef _USART_BFGEN_DEFS_
#define _USART_BFGEN_DEFS_

/** Control register 1 @multiple */
#define STM32_USART_CR1_ADDR                         0x00000000
/** USART enable @multiple */
  #define STM32_USART_CR1_UE_MASK                  0x00000001
  #define STM32_USART_CR1_UE                       0x00000001
  #define STM32_USART_CR1_UE_SET(x, v)             do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define STM32_USART_CR1_UE_GET(x)                (((x) >> 0) & 0x1)
/** USART enable in Stop mode @multiple */
  #define STM32_USART_CR1_UESM_MASK                0x00000001
  #define STM32_USART_CR1_UESM                     0x00000002
  #define STM32_USART_CR1_UESM_SET(x, v)           do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define STM32_USART_CR1_UESM_GET(x)              (((x) >> 1) & 0x1)
/** Receiver enable @multiple */
  #define STM32_USART_CR1_RE_MASK                  0x00000001
  #define STM32_USART_CR1_RE                       0x00000004
  #define STM32_USART_CR1_RE_SET(x, v)             do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define STM32_USART_CR1_RE_GET(x)                (((x) >> 2) & 0x1)
/** Transmitter enable @multiple */
  #define STM32_USART_CR1_TE_MASK                  0x00000001
  #define STM32_USART_CR1_TE                       0x00000008
  #define STM32_USART_CR1_TE_SET(x, v)             do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define STM32_USART_CR1_TE_GET(x)                (((x) >> 3) & 0x1)
/** IDLE interrupt enable @multiple */
  #define STM32_USART_CR1_IDLEIE_MASK              0x00000001
  #define STM32_USART_CR1_IDLEIE                   0x00000010
  #define STM32_USART_CR1_IDLEIE_SET(x, v)         do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define STM32_USART_CR1_IDLEIE_GET(x)            (((x) >> 4) & 0x1)
/** RXNE interrupt enable @multiple */
  #define STM32_USART_CR1_RXNEIE_MASK              0x00000001
  #define STM32_USART_CR1_RXNEIE                   0x00000020
  #define STM32_USART_CR1_RXNEIE_SET(x, v)         do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define STM32_USART_CR1_RXNEIE_GET(x)            (((x) >> 5) & 0x1)
/** Transmission complete interrupt enable @multiple */
  #define STM32_USART_CR1_TCIE_MASK                0x00000001
  #define STM32_USART_CR1_TCIE                     0x00000040
  #define STM32_USART_CR1_TCIE_SET(x, v)           do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define STM32_USART_CR1_TCIE_GET(x)              (((x) >> 6) & 0x1)
/** interrupt enable @multiple */
  #define STM32_USART_CR1_TXEIE_MASK               0x00000001
  #define STM32_USART_CR1_TXEIE                    0x00000080
  #define STM32_USART_CR1_TXEIE_SET(x, v)          do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define STM32_USART_CR1_TXEIE_GET(x)             (((x) >> 7) & 0x1)
/** PE interrupt enable @multiple */
  #define STM32_USART_CR1_PEIE_MASK                0x00000001
  #define STM32_USART_CR1_PEIE                     0x00000100
  #define STM32_USART_CR1_PEIE_SET(x, v)           do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define STM32_USART_CR1_PEIE_GET(x)              (((x) >> 8) & 0x1)
/** Parity selection @multiple */
  #define STM32_USART_CR1_PS_MASK                  0x00000001
  #define STM32_USART_CR1_PS                       0x00000200
  #define STM32_USART_CR1_PS_SET(x, v)             do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define STM32_USART_CR1_PS_GET(x)                (((x) >> 9) & 0x1)
/** Parity control enable @multiple */
  #define STM32_USART_CR1_PCE_MASK                 0x00000001
  #define STM32_USART_CR1_PCE                      0x00000400
  #define STM32_USART_CR1_PCE_SET(x, v)            do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define STM32_USART_CR1_PCE_GET(x)               (((x) >> 10) & 0x1)
/** Receiver wakeup method @multiple */
  #define STM32_USART_CR1_WAKE_MASK                0x00000001
  #define STM32_USART_CR1_WAKE                     0x00000800
  #define STM32_USART_CR1_WAKE_SET(x, v)           do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define STM32_USART_CR1_WAKE_GET(x)              (((x) >> 11) & 0x1)
/** Word length @multiple */
  #define STM32_USART_CR1_M0_MASK                  0x00000001
  #define STM32_USART_CR1_M0                       0x00001000
  #define STM32_USART_CR1_M0_SET(x, v)             do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
  #define STM32_USART_CR1_M0_GET(x)                (((x) >> 12) & 0x1)
/** Mute mode enable @multiple */
  #define STM32_USART_CR1_MME_MASK                 0x00000001
  #define STM32_USART_CR1_MME                      0x00002000
  #define STM32_USART_CR1_MME_SET(x, v)            do { (x) = (((x) & ~0x2000) | ((v) << 13)); } while(0)
  #define STM32_USART_CR1_MME_GET(x)               (((x) >> 13) & 0x1)
/** Character match interrupt enable @multiple */
  #define STM32_USART_CR1_CMIE_MASK                0x00000001
  #define STM32_USART_CR1_CMIE                     0x00004000
  #define STM32_USART_CR1_CMIE_SET(x, v)           do { (x) = (((x) & ~0x4000) | ((v) << 14)); } while(0)
  #define STM32_USART_CR1_CMIE_GET(x)              (((x) >> 14) & 0x1)
/** Oversampling mode @multiple */
  #define STM32_USART_CR1_OVER8_MASK               0x00000001
  #define STM32_USART_CR1_OVER8                    0x00008000
  #define STM32_USART_CR1_OVER8_SET(x, v)          do { (x) = (((x) & ~0x8000) | ((v) << 15)); } while(0)
  #define STM32_USART_CR1_OVER8_GET(x)             (((x) >> 15) & 0x1)
/** DEDT0 @multiple */
  #define STM32_USART_CR1_DEDT0_MASK               0x00000001
  #define STM32_USART_CR1_DEDT0                    0x00010000
  #define STM32_USART_CR1_DEDT0_SET(x, v)          do { (x) = (((x) & ~0x10000) | ((v) << 16)); } while(0)
  #define STM32_USART_CR1_DEDT0_GET(x)             (((x) >> 16) & 0x1)
/** DEDT1 @multiple */
  #define STM32_USART_CR1_DEDT1_MASK               0x00000001
  #define STM32_USART_CR1_DEDT1                    0x00020000
  #define STM32_USART_CR1_DEDT1_SET(x, v)          do { (x) = (((x) & ~0x20000) | ((v) << 17)); } while(0)
  #define STM32_USART_CR1_DEDT1_GET(x)             (((x) >> 17) & 0x1)
/** DEDT2 @multiple */
  #define STM32_USART_CR1_DEDT2_MASK               0x00000001
  #define STM32_USART_CR1_DEDT2                    0x00040000
  #define STM32_USART_CR1_DEDT2_SET(x, v)          do { (x) = (((x) & ~0x40000) | ((v) << 18)); } while(0)
  #define STM32_USART_CR1_DEDT2_GET(x)             (((x) >> 18) & 0x1)
/** DEDT3 @multiple */
  #define STM32_USART_CR1_DEDT3_MASK               0x00000001
  #define STM32_USART_CR1_DEDT3                    0x00080000
  #define STM32_USART_CR1_DEDT3_SET(x, v)          do { (x) = (((x) & ~0x80000) | ((v) << 19)); } while(0)
  #define STM32_USART_CR1_DEDT3_GET(x)             (((x) >> 19) & 0x1)
/** Driver Enable de-assertion time @multiple */
  #define STM32_USART_CR1_DEDT4_MASK               0x00000001
  #define STM32_USART_CR1_DEDT4                    0x00100000
  #define STM32_USART_CR1_DEDT4_SET(x, v)          do { (x) = (((x) & ~0x100000) | ((v) << 20)); } while(0)
  #define STM32_USART_CR1_DEDT4_GET(x)             (((x) >> 20) & 0x1)
/** DEAT0 @multiple */
  #define STM32_USART_CR1_DEAT0_MASK               0x00000001
  #define STM32_USART_CR1_DEAT0                    0x00200000
  #define STM32_USART_CR1_DEAT0_SET(x, v)          do { (x) = (((x) & ~0x200000) | ((v) << 21)); } while(0)
  #define STM32_USART_CR1_DEAT0_GET(x)             (((x) >> 21) & 0x1)
/** DEAT1 @multiple */
  #define STM32_USART_CR1_DEAT1_MASK               0x00000001
  #define STM32_USART_CR1_DEAT1                    0x00400000
  #define STM32_USART_CR1_DEAT1_SET(x, v)          do { (x) = (((x) & ~0x400000) | ((v) << 22)); } while(0)
  #define STM32_USART_CR1_DEAT1_GET(x)             (((x) >> 22) & 0x1)
/** DEAT2 @multiple */
  #define STM32_USART_CR1_DEAT2_MASK               0x00000001
  #define STM32_USART_CR1_DEAT2                    0x00800000
  #define STM32_USART_CR1_DEAT2_SET(x, v)          do { (x) = (((x) & ~0x800000) | ((v) << 23)); } while(0)
  #define STM32_USART_CR1_DEAT2_GET(x)             (((x) >> 23) & 0x1)
/** DEAT3 @multiple */
  #define STM32_USART_CR1_DEAT3_MASK               0x00000001
  #define STM32_USART_CR1_DEAT3                    0x01000000
  #define STM32_USART_CR1_DEAT3_SET(x, v)          do { (x) = (((x) & ~0x1000000) | ((v) << 24)); } while(0)
  #define STM32_USART_CR1_DEAT3_GET(x)             (((x) >> 24) & 0x1)
/** Driver Enable assertion time @multiple */
  #define STM32_USART_CR1_DEAT4_MASK               0x00000001
  #define STM32_USART_CR1_DEAT4                    0x02000000
  #define STM32_USART_CR1_DEAT4_SET(x, v)          do { (x) = (((x) & ~0x2000000) | ((v) << 25)); } while(0)
  #define STM32_USART_CR1_DEAT4_GET(x)             (((x) >> 25) & 0x1)
/** Receiver timeout interrupt enable @multiple */
  #define STM32_USART_CR1_RTOIE_MASK               0x00000001
  #define STM32_USART_CR1_RTOIE                    0x04000000
  #define STM32_USART_CR1_RTOIE_SET(x, v)          do { (x) = (((x) & ~0x4000000) | ((v) << 26)); } while(0)
  #define STM32_USART_CR1_RTOIE_GET(x)             (((x) >> 26) & 0x1)
/** End of Block interrupt enable @multiple */
  #define STM32_USART_CR1_EOBIE_MASK               0x00000001
  #define STM32_USART_CR1_EOBIE                    0x08000000
  #define STM32_USART_CR1_EOBIE_SET(x, v)          do { (x) = (((x) & ~0x8000000) | ((v) << 27)); } while(0)
  #define STM32_USART_CR1_EOBIE_GET(x)             (((x) >> 27) & 0x1)
/** Word length @multiple */
  #define STM32_USART_CR1_M1_MASK                  0x00000001
  #define STM32_USART_CR1_M1                       0x10000000
  #define STM32_USART_CR1_M1_SET(x, v)             do { (x) = (((x) & ~0x10000000) | ((v) << 28)); } while(0)
  #define STM32_USART_CR1_M1_GET(x)                (((x) >> 28) & 0x1)

/** Control register 2 @multiple */
#define STM32_USART_CR2_ADDR                         0x00000004
/** 7-bit Address Detection/4-bit Address Detection @multiple */
  #define STM32_USART_CR2_ADDM7_MASK               0x00000001
  #define STM32_USART_CR2_ADDM7                    0x00000010
  #define STM32_USART_CR2_ADDM7_SET(x, v)          do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define STM32_USART_CR2_ADDM7_GET(x)             (((x) >> 4) & 0x1)
/** LIN break detection length @multiple */
  #define STM32_USART_CR2_LBDL_MASK                0x00000001
  #define STM32_USART_CR2_LBDL                     0x00000020
  #define STM32_USART_CR2_LBDL_SET(x, v)           do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define STM32_USART_CR2_LBDL_GET(x)              (((x) >> 5) & 0x1)
/** LIN break detection interrupt enable @multiple */
  #define STM32_USART_CR2_LBDIE_MASK               0x00000001
  #define STM32_USART_CR2_LBDIE                    0x00000040
  #define STM32_USART_CR2_LBDIE_SET(x, v)          do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define STM32_USART_CR2_LBDIE_GET(x)             (((x) >> 6) & 0x1)
/** Last bit clock pulse @multiple */
  #define STM32_USART_CR2_LBCL_MASK                0x00000001
  #define STM32_USART_CR2_LBCL                     0x00000100
  #define STM32_USART_CR2_LBCL_SET(x, v)           do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define STM32_USART_CR2_LBCL_GET(x)              (((x) >> 8) & 0x1)
/** Clock phase @multiple */
  #define STM32_USART_CR2_CPHA_MASK                0x00000001
  #define STM32_USART_CR2_CPHA                     0x00000200
  #define STM32_USART_CR2_CPHA_SET(x, v)           do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define STM32_USART_CR2_CPHA_GET(x)              (((x) >> 9) & 0x1)
/** Clock polarity @multiple */
  #define STM32_USART_CR2_CPOL_MASK                0x00000001
  #define STM32_USART_CR2_CPOL                     0x00000400
  #define STM32_USART_CR2_CPOL_SET(x, v)           do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define STM32_USART_CR2_CPOL_GET(x)              (((x) >> 10) & 0x1)
/** Clock enable @multiple */
  #define STM32_USART_CR2_CLKEN_MASK               0x00000001
  #define STM32_USART_CR2_CLKEN                    0x00000800
  #define STM32_USART_CR2_CLKEN_SET(x, v)          do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define STM32_USART_CR2_CLKEN_GET(x)             (((x) >> 11) & 0x1)
/** STOP bits @multiple */
  #define STM32_USART_CR2_STOP_MASK                0x00000003
  #define STM32_USART_CR2_STOP(v)                  ((v) << 12)
  #define STM32_USART_CR2_STOP_SET(x, v)           do { (x) = (((x) & ~0x3000) | ((v) << 12)); } while(0)
  #define STM32_USART_CR2_STOP_GET(x)              (((x) >> 12) & 0x3)
/** LIN mode enable @multiple */
  #define STM32_USART_CR2_LINEN_MASK               0x00000001
  #define STM32_USART_CR2_LINEN                    0x00004000
  #define STM32_USART_CR2_LINEN_SET(x, v)          do { (x) = (((x) & ~0x4000) | ((v) << 14)); } while(0)
  #define STM32_USART_CR2_LINEN_GET(x)             (((x) >> 14) & 0x1)
/** Swap TX/RX pins @multiple */
  #define STM32_USART_CR2_SWAP_MASK                0x00000001
  #define STM32_USART_CR2_SWAP                     0x00008000
  #define STM32_USART_CR2_SWAP_SET(x, v)           do { (x) = (((x) & ~0x8000) | ((v) << 15)); } while(0)
  #define STM32_USART_CR2_SWAP_GET(x)              (((x) >> 15) & 0x1)
/** RX pin active level inversion @multiple */
  #define STM32_USART_CR2_RXINV_MASK               0x00000001
  #define STM32_USART_CR2_RXINV                    0x00010000
  #define STM32_USART_CR2_RXINV_SET(x, v)          do { (x) = (((x) & ~0x10000) | ((v) << 16)); } while(0)
  #define STM32_USART_CR2_RXINV_GET(x)             (((x) >> 16) & 0x1)
/** TX pin active level inversion @multiple */
  #define STM32_USART_CR2_TXINV_MASK               0x00000001
  #define STM32_USART_CR2_TXINV                    0x00020000
  #define STM32_USART_CR2_TXINV_SET(x, v)          do { (x) = (((x) & ~0x20000) | ((v) << 17)); } while(0)
  #define STM32_USART_CR2_TXINV_GET(x)             (((x) >> 17) & 0x1)
/** Binary data inversion @multiple */
  #define STM32_USART_CR2_TAINV_MASK               0x00000001
  #define STM32_USART_CR2_TAINV                    0x00040000
  #define STM32_USART_CR2_TAINV_SET(x, v)          do { (x) = (((x) & ~0x40000) | ((v) << 18)); } while(0)
  #define STM32_USART_CR2_TAINV_GET(x)             (((x) >> 18) & 0x1)
/** Most significant bit first @multiple */
  #define STM32_USART_CR2_MSBFIRST_MASK            0x00000001
  #define STM32_USART_CR2_MSBFIRST                 0x00080000
  #define STM32_USART_CR2_MSBFIRST_SET(x, v)       do { (x) = (((x) & ~0x80000) | ((v) << 19)); } while(0)
  #define STM32_USART_CR2_MSBFIRST_GET(x)          (((x) >> 19) & 0x1)
/** Auto baud rate enable @multiple */
  #define STM32_USART_CR2_ABREN_MASK               0x00000001
  #define STM32_USART_CR2_ABREN                    0x00100000
  #define STM32_USART_CR2_ABREN_SET(x, v)          do { (x) = (((x) & ~0x100000) | ((v) << 20)); } while(0)
  #define STM32_USART_CR2_ABREN_GET(x)             (((x) >> 20) & 0x1)
/** ABRMOD0 @multiple */
  #define STM32_USART_CR2_ABRMOD0_MASK             0x00000001
  #define STM32_USART_CR2_ABRMOD0                  0x00200000
  #define STM32_USART_CR2_ABRMOD0_SET(x, v)        do { (x) = (((x) & ~0x200000) | ((v) << 21)); } while(0)
  #define STM32_USART_CR2_ABRMOD0_GET(x)           (((x) >> 21) & 0x1)
/** Auto baud rate mode @multiple */
  #define STM32_USART_CR2_ABRMOD1_MASK             0x00000001
  #define STM32_USART_CR2_ABRMOD1                  0x00400000
  #define STM32_USART_CR2_ABRMOD1_SET(x, v)        do { (x) = (((x) & ~0x400000) | ((v) << 22)); } while(0)
  #define STM32_USART_CR2_ABRMOD1_GET(x)           (((x) >> 22) & 0x1)
/** Receiver timeout enable @multiple */
  #define STM32_USART_CR2_RTOEN_MASK               0x00000001
  #define STM32_USART_CR2_RTOEN                    0x00800000
  #define STM32_USART_CR2_RTOEN_SET(x, v)          do { (x) = (((x) & ~0x800000) | ((v) << 23)); } while(0)
  #define STM32_USART_CR2_RTOEN_GET(x)             (((x) >> 23) & 0x1)
/** Address of the USART node @multiple */
  #define STM32_USART_CR2_ADD0_3_MASK              0x0000000f
  #define STM32_USART_CR2_ADD0_3(v)                ((v) << 24)
  #define STM32_USART_CR2_ADD0_3_SET(x, v)         do { (x) = (((x) & ~0xf000000) | ((v) << 24)); } while(0)
  #define STM32_USART_CR2_ADD0_3_GET(x)            (((x) >> 24) & 0xf)
/** Address of the USART node @multiple */
  #define STM32_USART_CR2_ADD4_7_MASK              0x0000000f
  #define STM32_USART_CR2_ADD4_7(v)                ((v) << 28)
  #define STM32_USART_CR2_ADD4_7_SET(x, v)         do { (x) = (((x) & ~0xf0000000) | ((v) << 28)); } while(0)
  #define STM32_USART_CR2_ADD4_7_GET(x)            (((x) >> 28) & 0xf)

/** Control register 3 @multiple */
#define STM32_USART_CR3_ADDR                         0x00000008
/** Error interrupt enable @multiple */
  #define STM32_USART_CR3_EIE_MASK                 0x00000001
  #define STM32_USART_CR3_EIE                      0x00000001
  #define STM32_USART_CR3_EIE_SET(x, v)            do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define STM32_USART_CR3_EIE_GET(x)               (((x) >> 0) & 0x1)
/** Ir mode enable @multiple */
  #define STM32_USART_CR3_IREN_MASK                0x00000001
  #define STM32_USART_CR3_IREN                     0x00000002
  #define STM32_USART_CR3_IREN_SET(x, v)           do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define STM32_USART_CR3_IREN_GET(x)              (((x) >> 1) & 0x1)
/** Ir low-power @multiple */
  #define STM32_USART_CR3_IRLP_MASK                0x00000001
  #define STM32_USART_CR3_IRLP                     0x00000004
  #define STM32_USART_CR3_IRLP_SET(x, v)           do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define STM32_USART_CR3_IRLP_GET(x)              (((x) >> 2) & 0x1)
/** Half-duplex selection @multiple */
  #define STM32_USART_CR3_HDSEL_MASK               0x00000001
  #define STM32_USART_CR3_HDSEL                    0x00000008
  #define STM32_USART_CR3_HDSEL_SET(x, v)          do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define STM32_USART_CR3_HDSEL_GET(x)             (((x) >> 3) & 0x1)
/** Smartcard NACK enable @multiple */
  #define STM32_USART_CR3_NACK_MASK                0x00000001
  #define STM32_USART_CR3_NACK                     0x00000010
  #define STM32_USART_CR3_NACK_SET(x, v)           do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define STM32_USART_CR3_NACK_GET(x)              (((x) >> 4) & 0x1)
/** Smartcard mode enable @multiple */
  #define STM32_USART_CR3_SCEN_MASK                0x00000001
  #define STM32_USART_CR3_SCEN                     0x00000020
  #define STM32_USART_CR3_SCEN_SET(x, v)           do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define STM32_USART_CR3_SCEN_GET(x)              (((x) >> 5) & 0x1)
/** DMA enable receiver @multiple */
  #define STM32_USART_CR3_DMAR_MASK                0x00000001
  #define STM32_USART_CR3_DMAR                     0x00000040
  #define STM32_USART_CR3_DMAR_SET(x, v)           do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define STM32_USART_CR3_DMAR_GET(x)              (((x) >> 6) & 0x1)
/** DMA enable transmitter @multiple */
  #define STM32_USART_CR3_DMAT_MASK                0x00000001
  #define STM32_USART_CR3_DMAT                     0x00000080
  #define STM32_USART_CR3_DMAT_SET(x, v)           do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define STM32_USART_CR3_DMAT_GET(x)              (((x) >> 7) & 0x1)
/** RTS enable @multiple */
  #define STM32_USART_CR3_RTSE_MASK                0x00000001
  #define STM32_USART_CR3_RTSE                     0x00000100
  #define STM32_USART_CR3_RTSE_SET(x, v)           do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define STM32_USART_CR3_RTSE_GET(x)              (((x) >> 8) & 0x1)
/** CTS enable @multiple */
  #define STM32_USART_CR3_CTSE_MASK                0x00000001
  #define STM32_USART_CR3_CTSE                     0x00000200
  #define STM32_USART_CR3_CTSE_SET(x, v)           do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define STM32_USART_CR3_CTSE_GET(x)              (((x) >> 9) & 0x1)
/** CTS interrupt enable @multiple */
  #define STM32_USART_CR3_CTSIE_MASK               0x00000001
  #define STM32_USART_CR3_CTSIE                    0x00000400
  #define STM32_USART_CR3_CTSIE_SET(x, v)          do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define STM32_USART_CR3_CTSIE_GET(x)             (((x) >> 10) & 0x1)
/** One sample bit method enable @multiple */
  #define STM32_USART_CR3_ONEBIT_MASK              0x00000001
  #define STM32_USART_CR3_ONEBIT                   0x00000800
  #define STM32_USART_CR3_ONEBIT_SET(x, v)         do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define STM32_USART_CR3_ONEBIT_GET(x)            (((x) >> 11) & 0x1)
/** Overrun Disable @multiple */
  #define STM32_USART_CR3_OVRDIS_MASK              0x00000001
  #define STM32_USART_CR3_OVRDIS                   0x00001000
  #define STM32_USART_CR3_OVRDIS_SET(x, v)         do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
  #define STM32_USART_CR3_OVRDIS_GET(x)            (((x) >> 12) & 0x1)
/** DMA Disable on Reception Error @multiple */
  #define STM32_USART_CR3_DDRE_MASK                0x00000001
  #define STM32_USART_CR3_DDRE                     0x00002000
  #define STM32_USART_CR3_DDRE_SET(x, v)           do { (x) = (((x) & ~0x2000) | ((v) << 13)); } while(0)
  #define STM32_USART_CR3_DDRE_GET(x)              (((x) >> 13) & 0x1)
/** Driver enable mode @multiple */
  #define STM32_USART_CR3_DEM_MASK                 0x00000001
  #define STM32_USART_CR3_DEM                      0x00004000
  #define STM32_USART_CR3_DEM_SET(x, v)            do { (x) = (((x) & ~0x4000) | ((v) << 14)); } while(0)
  #define STM32_USART_CR3_DEM_GET(x)               (((x) >> 14) & 0x1)
/** Driver enable polarity selection @multiple */
  #define STM32_USART_CR3_DEP_MASK                 0x00000001
  #define STM32_USART_CR3_DEP                      0x00008000
  #define STM32_USART_CR3_DEP_SET(x, v)            do { (x) = (((x) & ~0x8000) | ((v) << 15)); } while(0)
  #define STM32_USART_CR3_DEP_GET(x)               (((x) >> 15) & 0x1)
/** Smartcard auto-retry count @multiple */
  #define STM32_USART_CR3_SCARCNT_MASK             0x00000007
  #define STM32_USART_CR3_SCARCNT(v)               ((v) << 17)
  #define STM32_USART_CR3_SCARCNT_SET(x, v)        do { (x) = (((x) & ~0xe0000) | ((v) << 17)); } while(0)
  #define STM32_USART_CR3_SCARCNT_GET(x)           (((x) >> 17) & 0x7)
/** Wakeup from Stop mode interrupt flag selection @multiple */
  #define STM32_USART_CR3_WUS_MASK                 0x00000003
  #define STM32_USART_CR3_WUS(v)                   ((v) << 20)
  #define STM32_USART_CR3_WUS_SET(x, v)            do { (x) = (((x) & ~0x300000) | ((v) << 20)); } while(0)
  #define STM32_USART_CR3_WUS_GET(x)               (((x) >> 20) & 0x3)
/** Wakeup from Stop mode interrupt enable @multiple */
  #define STM32_USART_CR3_WUFIE_MASK               0x00000001
  #define STM32_USART_CR3_WUFIE                    0x00400000
  #define STM32_USART_CR3_WUFIE_SET(x, v)          do { (x) = (((x) & ~0x400000) | ((v) << 22)); } while(0)
  #define STM32_USART_CR3_WUFIE_GET(x)             (((x) >> 22) & 0x1)

/** Baud rate register @multiple */
#define STM32_USART_BRR_ADDR                         0x0000000c
/** DIV_Fraction @multiple */
  #define STM32_USART_BRR_DIV_FRACTION_MASK        0x0000000f
  #define STM32_USART_BRR_DIV_FRACTION(v)          ((v) << 0)
  #define STM32_USART_BRR_DIV_FRACTION_SET(x, v)   do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define STM32_USART_BRR_DIV_FRACTION_GET(x)      (((x) >> 0) & 0xf)
/** DIV_Mantissa @multiple */
  #define STM32_USART_BRR_DIV_MANTISSA_MASK        0x00000fff
  #define STM32_USART_BRR_DIV_MANTISSA(v)          ((v) << 4)
  #define STM32_USART_BRR_DIV_MANTISSA_SET(x, v)   do { (x) = (((x) & ~0xfff0) | ((v) << 4)); } while(0)
  #define STM32_USART_BRR_DIV_MANTISSA_GET(x)      (((x) >> 4) & 0xfff)

/** Guard time and prescaler register @multiple */
#define STM32_USART_GTPR_ADDR                        0x00000010
/** Prescaler value @multiple */
  #define STM32_USART_GTPR_PSC_MASK                0x000000ff
  #define STM32_USART_GTPR_PSC(v)                  ((v) << 0)
  #define STM32_USART_GTPR_PSC_SET(x, v)           do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define STM32_USART_GTPR_PSC_GET(x)              (((x) >> 0) & 0xff)
/** Guard time value @multiple */
  #define STM32_USART_GTPR_GT_MASK                 0x000000ff
  #define STM32_USART_GTPR_GT(v)                   ((v) << 8)
  #define STM32_USART_GTPR_GT_SET(x, v)            do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define STM32_USART_GTPR_GT_GET(x)               (((x) >> 8) & 0xff)

/** Receiver timeout register @multiple */
#define STM32_USART_RTOR_ADDR                        0x00000014
/** Receiver timeout value @multiple */
  #define STM32_USART_RTOR_RTO_MASK                0x00ffffff
  #define STM32_USART_RTOR_RTO(v)                  ((v) << 0)
  #define STM32_USART_RTOR_RTO_SET(x, v)           do { (x) = (((x) & ~0xffffff) | ((v) << 0)); } while(0)
  #define STM32_USART_RTOR_RTO_GET(x)              (((x) >> 0) & 0xffffff)
/** Block Length @multiple */
  #define STM32_USART_RTOR_BLEN_MASK               0x000000ff
  #define STM32_USART_RTOR_BLEN(v)                 ((v) << 24)
  #define STM32_USART_RTOR_BLEN_SET(x, v)          do { (x) = (((x) & ~0xff000000) | ((v) << 24)); } while(0)
  #define STM32_USART_RTOR_BLEN_GET(x)             (((x) >> 24) & 0xff)

/** Request register @multiple */
#define STM32_USART_RQR_ADDR                         0x00000018
/** Auto baud rate request @multiple */
  #define STM32_USART_RQR_ABRRQ_MASK               0x00000001
  #define STM32_USART_RQR_ABRRQ                    0x00000001
  #define STM32_USART_RQR_ABRRQ_SET(x, v)          do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define STM32_USART_RQR_ABRRQ_GET(x)             (((x) >> 0) & 0x1)
/** Send break request @multiple */
  #define STM32_USART_RQR_SBKRQ_MASK               0x00000001
  #define STM32_USART_RQR_SBKRQ                    0x00000002
  #define STM32_USART_RQR_SBKRQ_SET(x, v)          do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define STM32_USART_RQR_SBKRQ_GET(x)             (((x) >> 1) & 0x1)
/** Mute mode request @multiple */
  #define STM32_USART_RQR_MMRQ_MASK                0x00000001
  #define STM32_USART_RQR_MMRQ                     0x00000004
  #define STM32_USART_RQR_MMRQ_SET(x, v)           do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define STM32_USART_RQR_MMRQ_GET(x)              (((x) >> 2) & 0x1)
/** Receive data flush request @multiple */
  #define STM32_USART_RQR_RXFRQ_MASK               0x00000001
  #define STM32_USART_RQR_RXFRQ                    0x00000008
  #define STM32_USART_RQR_RXFRQ_SET(x, v)          do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define STM32_USART_RQR_RXFRQ_GET(x)             (((x) >> 3) & 0x1)
/** Transmit data flush request @multiple */
  #define STM32_USART_RQR_TXFRQ_MASK               0x00000001
  #define STM32_USART_RQR_TXFRQ                    0x00000010
  #define STM32_USART_RQR_TXFRQ_SET(x, v)          do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define STM32_USART_RQR_TXFRQ_GET(x)             (((x) >> 4) & 0x1)

/** Interrupt & status register @multiple */
#define STM32_USART_ISR_ADDR                         0x0000001c
/** PE @multiple */
  #define STM32_USART_ISR_PE_MASK                  0x00000001
  #define STM32_USART_ISR_PE                       0x00000001
  #define STM32_USART_ISR_PE_SET(x, v)             do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define STM32_USART_ISR_PE_GET(x)                (((x) >> 0) & 0x1)
/** FE @multiple */
  #define STM32_USART_ISR_FE_MASK                  0x00000001
  #define STM32_USART_ISR_FE                       0x00000002
  #define STM32_USART_ISR_FE_SET(x, v)             do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define STM32_USART_ISR_FE_GET(x)                (((x) >> 1) & 0x1)
/** NF @multiple */
  #define STM32_USART_ISR_NF_MASK                  0x00000001
  #define STM32_USART_ISR_NF                       0x00000004
  #define STM32_USART_ISR_NF_SET(x, v)             do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define STM32_USART_ISR_NF_GET(x)                (((x) >> 2) & 0x1)
/** ORE @multiple */
  #define STM32_USART_ISR_ORE_MASK                 0x00000001
  #define STM32_USART_ISR_ORE                      0x00000008
  #define STM32_USART_ISR_ORE_SET(x, v)            do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define STM32_USART_ISR_ORE_GET(x)               (((x) >> 3) & 0x1)
/** IDLE @multiple */
  #define STM32_USART_ISR_IDLE_MASK                0x00000001
  #define STM32_USART_ISR_IDLE                     0x00000010
  #define STM32_USART_ISR_IDLE_SET(x, v)           do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define STM32_USART_ISR_IDLE_GET(x)              (((x) >> 4) & 0x1)
/** RXNE @multiple */
  #define STM32_USART_ISR_RXNE_MASK                0x00000001
  #define STM32_USART_ISR_RXNE                     0x00000020
  #define STM32_USART_ISR_RXNE_SET(x, v)           do { (x) = (((x) & ~0x20) | ((v) << 5)); } while(0)
  #define STM32_USART_ISR_RXNE_GET(x)              (((x) >> 5) & 0x1)
/** TC @multiple */
  #define STM32_USART_ISR_TC_MASK                  0x00000001
  #define STM32_USART_ISR_TC                       0x00000040
  #define STM32_USART_ISR_TC_SET(x, v)             do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define STM32_USART_ISR_TC_GET(x)                (((x) >> 6) & 0x1)
/** TXE @multiple */
  #define STM32_USART_ISR_TXE_MASK                 0x00000001
  #define STM32_USART_ISR_TXE                      0x00000080
  #define STM32_USART_ISR_TXE_SET(x, v)            do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define STM32_USART_ISR_TXE_GET(x)               (((x) >> 7) & 0x1)
/** LBDF @multiple */
  #define STM32_USART_ISR_LBDF_MASK                0x00000001
  #define STM32_USART_ISR_LBDF                     0x00000100
  #define STM32_USART_ISR_LBDF_SET(x, v)           do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define STM32_USART_ISR_LBDF_GET(x)              (((x) >> 8) & 0x1)
/** CTSIF @multiple */
  #define STM32_USART_ISR_CTSIF_MASK               0x00000001
  #define STM32_USART_ISR_CTSIF                    0x00000200
  #define STM32_USART_ISR_CTSIF_SET(x, v)          do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define STM32_USART_ISR_CTSIF_GET(x)             (((x) >> 9) & 0x1)
/** CTS @multiple */
  #define STM32_USART_ISR_CTS_MASK                 0x00000001
  #define STM32_USART_ISR_CTS                      0x00000400
  #define STM32_USART_ISR_CTS_SET(x, v)            do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define STM32_USART_ISR_CTS_GET(x)               (((x) >> 10) & 0x1)
/** RTOF @multiple */
  #define STM32_USART_ISR_RTOF_MASK                0x00000001
  #define STM32_USART_ISR_RTOF                     0x00000800
  #define STM32_USART_ISR_RTOF_SET(x, v)           do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define STM32_USART_ISR_RTOF_GET(x)              (((x) >> 11) & 0x1)
/** EOBF @multiple */
  #define STM32_USART_ISR_EOBF_MASK                0x00000001
  #define STM32_USART_ISR_EOBF                     0x00001000
  #define STM32_USART_ISR_EOBF_SET(x, v)           do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
  #define STM32_USART_ISR_EOBF_GET(x)              (((x) >> 12) & 0x1)
/** ABRE @multiple */
  #define STM32_USART_ISR_ABRE_MASK                0x00000001
  #define STM32_USART_ISR_ABRE                     0x00004000
  #define STM32_USART_ISR_ABRE_SET(x, v)           do { (x) = (((x) & ~0x4000) | ((v) << 14)); } while(0)
  #define STM32_USART_ISR_ABRE_GET(x)              (((x) >> 14) & 0x1)
/** ABRF @multiple */
  #define STM32_USART_ISR_ABRF_MASK                0x00000001
  #define STM32_USART_ISR_ABRF                     0x00008000
  #define STM32_USART_ISR_ABRF_SET(x, v)           do { (x) = (((x) & ~0x8000) | ((v) << 15)); } while(0)
  #define STM32_USART_ISR_ABRF_GET(x)              (((x) >> 15) & 0x1)
/** BUSY @multiple */
  #define STM32_USART_ISR_BUSY_MASK                0x00000001
  #define STM32_USART_ISR_BUSY                     0x00010000
  #define STM32_USART_ISR_BUSY_SET(x, v)           do { (x) = (((x) & ~0x10000) | ((v) << 16)); } while(0)
  #define STM32_USART_ISR_BUSY_GET(x)              (((x) >> 16) & 0x1)
/** CMF @multiple */
  #define STM32_USART_ISR_CMF_MASK                 0x00000001
  #define STM32_USART_ISR_CMF                      0x00020000
  #define STM32_USART_ISR_CMF_SET(x, v)            do { (x) = (((x) & ~0x20000) | ((v) << 17)); } while(0)
  #define STM32_USART_ISR_CMF_GET(x)               (((x) >> 17) & 0x1)
/** SBKF @multiple */
  #define STM32_USART_ISR_SBKF_MASK                0x00000001
  #define STM32_USART_ISR_SBKF                     0x00040000
  #define STM32_USART_ISR_SBKF_SET(x, v)           do { (x) = (((x) & ~0x40000) | ((v) << 18)); } while(0)
  #define STM32_USART_ISR_SBKF_GET(x)              (((x) >> 18) & 0x1)
/** RWU @multiple */
  #define STM32_USART_ISR_RWU_MASK                 0x00000001
  #define STM32_USART_ISR_RWU                      0x00080000
  #define STM32_USART_ISR_RWU_SET(x, v)            do { (x) = (((x) & ~0x80000) | ((v) << 19)); } while(0)
  #define STM32_USART_ISR_RWU_GET(x)               (((x) >> 19) & 0x1)
/** WUF @multiple */
  #define STM32_USART_ISR_WUF_MASK                 0x00000001
  #define STM32_USART_ISR_WUF                      0x00100000
  #define STM32_USART_ISR_WUF_SET(x, v)            do { (x) = (((x) & ~0x100000) | ((v) << 20)); } while(0)
  #define STM32_USART_ISR_WUF_GET(x)               (((x) >> 20) & 0x1)
/** TEACK @multiple */
  #define STM32_USART_ISR_TEACK_MASK               0x00000001
  #define STM32_USART_ISR_TEACK                    0x00200000
  #define STM32_USART_ISR_TEACK_SET(x, v)          do { (x) = (((x) & ~0x200000) | ((v) << 21)); } while(0)
  #define STM32_USART_ISR_TEACK_GET(x)             (((x) >> 21) & 0x1)
/** REACK @multiple */
  #define STM32_USART_ISR_REACK_MASK               0x00000001
  #define STM32_USART_ISR_REACK                    0x00400000
  #define STM32_USART_ISR_REACK_SET(x, v)          do { (x) = (((x) & ~0x400000) | ((v) << 22)); } while(0)
  #define STM32_USART_ISR_REACK_GET(x)             (((x) >> 22) & 0x1)

/** Interrupt flag clear register @multiple */
#define STM32_USART_ICR_ADDR                         0x00000020
/** Parity error clear flag @multiple */
  #define STM32_USART_ICR_PECF_MASK                0x00000001
  #define STM32_USART_ICR_PECF                     0x00000001
  #define STM32_USART_ICR_PECF_SET(x, v)           do { (x) = (((x) & ~0x1) | ((v) << 0)); } while(0)
  #define STM32_USART_ICR_PECF_GET(x)              (((x) >> 0) & 0x1)
/** Framing error clear flag @multiple */
  #define STM32_USART_ICR_FECF_MASK                0x00000001
  #define STM32_USART_ICR_FECF                     0x00000002
  #define STM32_USART_ICR_FECF_SET(x, v)           do { (x) = (((x) & ~0x2) | ((v) << 1)); } while(0)
  #define STM32_USART_ICR_FECF_GET(x)              (((x) >> 1) & 0x1)
/** Noise detected clear flag @multiple */
  #define STM32_USART_ICR_NCF_MASK                 0x00000001
  #define STM32_USART_ICR_NCF                      0x00000004
  #define STM32_USART_ICR_NCF_SET(x, v)            do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define STM32_USART_ICR_NCF_GET(x)               (((x) >> 2) & 0x1)
/** Overrun error clear flag @multiple */
  #define STM32_USART_ICR_ORECF_MASK               0x00000001
  #define STM32_USART_ICR_ORECF                    0x00000008
  #define STM32_USART_ICR_ORECF_SET(x, v)          do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define STM32_USART_ICR_ORECF_GET(x)             (((x) >> 3) & 0x1)
/** Idle line detected clear flag @multiple */
  #define STM32_USART_ICR_IDLECF_MASK              0x00000001
  #define STM32_USART_ICR_IDLECF                   0x00000010
  #define STM32_USART_ICR_IDLECF_SET(x, v)         do { (x) = (((x) & ~0x10) | ((v) << 4)); } while(0)
  #define STM32_USART_ICR_IDLECF_GET(x)            (((x) >> 4) & 0x1)
/** Transmission complete clear flag @multiple */
  #define STM32_USART_ICR_TCCF_MASK                0x00000001
  #define STM32_USART_ICR_TCCF                     0x00000040
  #define STM32_USART_ICR_TCCF_SET(x, v)           do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define STM32_USART_ICR_TCCF_GET(x)              (((x) >> 6) & 0x1)
/** LIN break detection clear flag @multiple */
  #define STM32_USART_ICR_LBDCF_MASK               0x00000001
  #define STM32_USART_ICR_LBDCF                    0x00000100
  #define STM32_USART_ICR_LBDCF_SET(x, v)          do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define STM32_USART_ICR_LBDCF_GET(x)             (((x) >> 8) & 0x1)
/** CTS clear flag @multiple */
  #define STM32_USART_ICR_CTSCF_MASK               0x00000001
  #define STM32_USART_ICR_CTSCF                    0x00000200
  #define STM32_USART_ICR_CTSCF_SET(x, v)          do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define STM32_USART_ICR_CTSCF_GET(x)             (((x) >> 9) & 0x1)
/** Receiver timeout clear flag @multiple */
  #define STM32_USART_ICR_RTOCF_MASK               0x00000001
  #define STM32_USART_ICR_RTOCF                    0x00000800
  #define STM32_USART_ICR_RTOCF_SET(x, v)          do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define STM32_USART_ICR_RTOCF_GET(x)             (((x) >> 11) & 0x1)
/** End of block clear flag @multiple */
  #define STM32_USART_ICR_EOBCF_MASK               0x00000001
  #define STM32_USART_ICR_EOBCF                    0x00001000
  #define STM32_USART_ICR_EOBCF_SET(x, v)          do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
  #define STM32_USART_ICR_EOBCF_GET(x)             (((x) >> 12) & 0x1)
/** Character match clear flag @multiple */
  #define STM32_USART_ICR_CMCF_MASK                0x00000001
  #define STM32_USART_ICR_CMCF                     0x00020000
  #define STM32_USART_ICR_CMCF_SET(x, v)           do { (x) = (((x) & ~0x20000) | ((v) << 17)); } while(0)
  #define STM32_USART_ICR_CMCF_GET(x)              (((x) >> 17) & 0x1)
/** Wakeup from Stop mode clear flag @multiple */
  #define STM32_USART_ICR_WUCF_MASK                0x00000001
  #define STM32_USART_ICR_WUCF                     0x00100000
  #define STM32_USART_ICR_WUCF_SET(x, v)           do { (x) = (((x) & ~0x100000) | ((v) << 20)); } while(0)
  #define STM32_USART_ICR_WUCF_GET(x)              (((x) >> 20) & 0x1)

/** Receive data register @multiple */
#define STM32_USART_RDR_ADDR                         0x00000024
/** Receive data value @multiple */
  #define STM32_USART_RDR_RDR_MASK                 0x000001ff
  #define STM32_USART_RDR_RDR(v)                   ((v) << 0)
  #define STM32_USART_RDR_RDR_SET(x, v)            do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define STM32_USART_RDR_RDR_GET(x)               (((x) >> 0) & 0x1ff)

/** Transmit data register @multiple */
#define STM32_USART_TDR_ADDR                         0x00000028
/** Transmit data value @multiple */
  #define STM32_USART_TDR_TDR_MASK                 0x000001ff
  #define STM32_USART_TDR_TDR(v)                   ((v) << 0)
  #define STM32_USART_TDR_TDR_SET(x, v)            do { (x) = (((x) & ~0x1ff) | ((v) << 0)); } while(0)
  #define STM32_USART_TDR_TDR_GET(x)               (((x) >> 0) & 0x1ff)

#endif

