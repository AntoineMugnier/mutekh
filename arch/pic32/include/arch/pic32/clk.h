/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs -O arch/pic32/include/arch/pic32/clk.h cdefs_use_reg_mask=1  \
     cdefs_use_field_setval=1 -I /opt/bfgen/defs/pic32/pic32_clock.bf
*/

#ifndef _PIC32_CLOCK_BFGEN_DEFS_
#define _PIC32_CLOCK_BFGEN_DEFS_

#define PIC32_CLOCK_CTRL_ADDR                        0x00000000
#define PIC32_CLOCK_CTRL_MASK                        0x07c077fb
  #define PIC32_CLOCK_CTRL_OSWEN                   0x00000001
  #define PIC32_CLOCK_CTRL_SOSCEN                  0x00000002
  #define PIC32_CLOCK_CTRL_CF                      0x00000008
  #define PIC32_CLOCK_CTRL_SLPEN                   0x00000010
  #define PIC32_CLOCK_CTRL_SLOCK                   0x00000020
  #define PIC32_CLOCK_CTRL_ULOCK                   0x00000040
  #define PIC32_CLOCK_CTRL_CLKLOCK                 0x00000080
  #define PIC32_CLOCK_CTRL_NOSC(v)                 ((PIC32_CLOCK_CTRL_NOSC_##v) << 8)
  #define PIC32_CLOCK_CTRL_NOSC_SET(x, v)          do { (x) = (((x) & ~0x700) | ((PIC32_CLOCK_CTRL_NOSC_##v) << 8)); } while(0)
  #define PIC32_CLOCK_CTRL_NOSC_SETVAL(x, v)       do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define PIC32_CLOCK_CTRL_NOSC_GET(x)             (((x) >> 8) & 0x7)
    #define PIC32_CLOCK_CTRL_NOSC_FRC                0x00000000
    #define PIC32_CLOCK_CTRL_NOSC_SPLL               0x00000001
    #define PIC32_CLOCK_CTRL_NOSC_POSC               0x00000002
    #define PIC32_CLOCK_CTRL_NOSC_SOSC               0x00000004
    #define PIC32_CLOCK_CTRL_NOSC_LPRC               0x00000005
  #define PIC32_CLOCK_CTRL_COSC(v)                 ((PIC32_CLOCK_CTRL_COSC_##v) << 12)
  #define PIC32_CLOCK_CTRL_COSC_SET(x, v)          do { (x) = (((x) & ~0x7000) | ((PIC32_CLOCK_CTRL_COSC_##v) << 12)); } while(0)
  #define PIC32_CLOCK_CTRL_COSC_SETVAL(x, v)       do { (x) = (((x) & ~0x7000) | ((v) << 12)); } while(0)
  #define PIC32_CLOCK_CTRL_COSC_GET(x)             (((x) >> 12) & 0x7)
    #define PIC32_CLOCK_CTRL_COSC_FRC                0x00000000
    #define PIC32_CLOCK_CTRL_COSC_SPLL               0x00000001
    #define PIC32_CLOCK_CTRL_COSC_POSC               0x00000002
    #define PIC32_CLOCK_CTRL_COSC_SOSC               0x00000004
    #define PIC32_CLOCK_CTRL_COSC_LPRC               0x00000005
    #define PIC32_CLOCK_CTRL_COSC_BFRC               0x00000006
  #define PIC32_CLOCK_CTRL_SOSCRDY                 0x00400000
  #define PIC32_CLOCK_CTRL_DRMEN                   0x00800000
  #define PIC32_CLOCK_CTRL_FRCDIV(v)               ((PIC32_CLOCK_CTRL_FRCDIV_##v) << 24)
  #define PIC32_CLOCK_CTRL_FRCDIV_SET(x, v)        do { (x) = (((x) & ~0x7000000) | ((PIC32_CLOCK_CTRL_FRCDIV_##v) << 24)); } while(0)
  #define PIC32_CLOCK_CTRL_FRCDIV_SETVAL(x, v)     do { (x) = (((x) & ~0x7000000) | ((v) << 24)); } while(0)
  #define PIC32_CLOCK_CTRL_FRCDIV_GET(x)           (((x) >> 24) & 0x7)
    #define PIC32_CLOCK_CTRL_FRCDIV_DIV1             0x00000000
    #define PIC32_CLOCK_CTRL_FRCDIV_DIV2             0x00000001
    #define PIC32_CLOCK_CTRL_FRCDIV_DIV4             0x00000002
    #define PIC32_CLOCK_CTRL_FRCDIV_DIV8             0x00000003
    #define PIC32_CLOCK_CTRL_FRCDIV_DIV16            0x00000004
    #define PIC32_CLOCK_CTRL_FRCDIV_DIV32            0x00000005
    #define PIC32_CLOCK_CTRL_FRCDIV_DIV64            0x00000006
    #define PIC32_CLOCK_CTRL_FRCDIV_DIV256           0x00000007

#define PIC32_CLOCK_TUN_ADDR                         0x00000010
#define PIC32_CLOCK_TUN_MASK                         0x0000003f
  #define PIC32_CLOCK_TUN_V(v)                     ((v) << 0)
  #define PIC32_CLOCK_TUN_V_SET(x, v)              do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define PIC32_CLOCK_TUN_V_GET(x)                 (((x) >> 0) & 0x3f)

#define PIC32_CLOCK_SPLLCTRL_ADDR                    0x00000020
#define PIC32_CLOCK_SPLLCTRL_MASK                    0x07070787
  #define PIC32_CLOCK_SPLLCTRL_RANGE(v)            ((v) << 0)
  #define PIC32_CLOCK_SPLLCTRL_RANGE_SET(x, v)     do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define PIC32_CLOCK_SPLLCTRL_RANGE_GET(x)        (((x) >> 0) & 0x7)
  #define PIC32_CLOCK_SPLLCTRL_PLLCLK              0x00000080
  #define PIC32_CLOCK_SPLLCTRL_PLLDIV(v)           ((v) << 8)
  #define PIC32_CLOCK_SPLLCTRL_PLLDIV_SET(x, v)    do { (x) = (((x) & ~0x700) | ((v) << 8)); } while(0)
  #define PIC32_CLOCK_SPLLCTRL_PLLDIV_GET(x)       (((x) >> 8) & 0x7)
  #define PIC32_CLOCK_SPLLCTRL_PLLMULT(v)          ((v) << 16)
  #define PIC32_CLOCK_SPLLCTRL_PLLMULT_SET(x, v)   do { (x) = (((x) & ~0x70000) | ((v) << 16)); } while(0)
  #define PIC32_CLOCK_SPLLCTRL_PLLMULT_GET(x)      (((x) >> 16) & 0x7)
  #define PIC32_CLOCK_SPLLCTRL_PLLODIV(v)          ((v) << 24)
  #define PIC32_CLOCK_SPLLCTRL_PLLODIV_SET(x, v)   do { (x) = (((x) & ~0x7000000) | ((v) << 24)); } while(0)
  #define PIC32_CLOCK_SPLLCTRL_PLLODIV_GET(x)      (((x) >> 24) & 0x7)

#define PIC32_CLOCK_REFCTRL_ADDR(ridx)               (0x00000080 + (ridx) * 32)
#define PIC32_CLOCK_REFCTRL_COUNT                    4
#define PIC32_CLOCK_REFCTRL_MASK                     0x7fffbb0f
  #define PIC32_CLOCK_REFCTRL_ROSEL(v)             ((v) << 0)
  #define PIC32_CLOCK_REFCTRL_ROSEL_SET(x, v)      do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define PIC32_CLOCK_REFCTRL_ROSEL_GET(x)         (((x) >> 0) & 0xf)
  #define PIC32_CLOCK_REFCTRL_ACTIVE               0x00000100
  #define PIC32_CLOCK_REFCTRL_DIVSWEN              0x00000200
  #define PIC32_CLOCK_REFCTRL_RLSP                 0x00000800
  #define PIC32_CLOCK_REFCTRL_OE                   0x00001000
  #define PIC32_CLOCK_REFCTRL_SIDL                 0x00002000
  #define PIC32_CLOCK_REFCTRL_ON                   0x00008000
  #define PIC32_CLOCK_REFCTRL_RODIV(v)             ((v) << 16)
  #define PIC32_CLOCK_REFCTRL_RODIV_SET(x, v)      do { (x) = (((x) & ~0x7fff0000) | ((v) << 16)); } while(0)
  #define PIC32_CLOCK_REFCTRL_RODIV_GET(x)         (((x) >> 16) & 0x7fff)

#define PIC32_CLOCK_REFTRIM_ADDR(ridx)               (0x00000090 + (ridx) * 32)
#define PIC32_CLOCK_REFTRIM_COUNT                    4
#define PIC32_CLOCK_REFTRIM_MASK                     0xff800000
  #define PIC32_CLOCK_REFTRIM_ROTRIM(v)            ((v) << 23)
  #define PIC32_CLOCK_REFTRIM_ROTRIM_SET(x, v)     do { (x) = (((x) & ~0xff800000) | ((v) << 23)); } while(0)
  #define PIC32_CLOCK_REFTRIM_ROTRIM_GET(x)        (((x) >> 23) & 0x1ff)

#define PIC32_CLOCK_PBDIV_ADDR(ridx)                 (0x00000100 + (ridx) * 16)
#define PIC32_CLOCK_PBDIV_COUNT                      8
#define PIC32_CLOCK_PBDIV_MASK                       0x0000887f
  #define PIC32_CLOCK_PBDIV_DIV(v)                 ((v) << 0)
  #define PIC32_CLOCK_PBDIV_DIV_SET(x, v)          do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define PIC32_CLOCK_PBDIV_DIV_GET(x)             (((x) >> 0) & 0x7f)
  #define PIC32_CLOCK_PBDIV_DIBRDY                 0x00000800
  #define PIC32_CLOCK_PBDIV_ON                     0x00008000

#endif

