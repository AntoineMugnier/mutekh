/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs -O bcm283x/spi.h cdefs_use_field_setval=1
*/

#ifndef _BCM283X_SPI_BFGEN_DEFS_
#define _BCM283X_SPI_BFGEN_DEFS_

#define BCM283X_SPI_CS_ADDR                          0x00000000
  #define BCM283X_SPI_CS_CS(v)                     ((BCM283X_SPI_CS_CS_##v) << 0)
  #define BCM283X_SPI_CS_CS_SET(x, v)              do { (x) = (((x) & ~0x3) | ((BCM283X_SPI_CS_CS_##v) << 0)); } while(0)
  #define BCM283X_SPI_CS_CS_SETVAL(x, v)           do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define BCM283X_SPI_CS_CS_GET(x)                 (((x) >> 0) & 0x3)
    #define BCM283X_SPI_CS_CS_CS0                    0x00000000
    #define BCM283X_SPI_CS_CS_CS1                    0x00000001
    #define BCM283X_SPI_CS_CS_CS2                    0x00000002
    #define BCM283X_SPI_CS_CS_CS3                    0x00000003
  #define BCM283X_SPI_CS_CPHA(v)                   ((BCM283X_SPI_CS_CPHA_##v) << 2)
  #define BCM283X_SPI_CS_CPHA_SET(x, v)            do { (x) = (((x) & ~0x4) | ((BCM283X_SPI_CS_CPHA_##v) << 2)); } while(0)
  #define BCM283X_SPI_CS_CPHA_SETVAL(x, v)         do { (x) = (((x) & ~0x4) | ((v) << 2)); } while(0)
  #define BCM283X_SPI_CS_CPHA_GET(x)               (((x) >> 2) & 0x1)
    #define BCM283X_SPI_CS_CPHA_MIDDLE               0x00000000
    #define BCM283X_SPI_CS_CPHA_BEGIN                0x00000001
  #define BCM283X_SPI_CS_CPOL(v)                   ((BCM283X_SPI_CS_CPOL_##v) << 3)
  #define BCM283X_SPI_CS_CPOL_SET(x, v)            do { (x) = (((x) & ~0x8) | ((BCM283X_SPI_CS_CPOL_##v) << 3)); } while(0)
  #define BCM283X_SPI_CS_CPOL_SETVAL(x, v)         do { (x) = (((x) & ~0x8) | ((v) << 3)); } while(0)
  #define BCM283X_SPI_CS_CPOL_GET(x)               (((x) >> 3) & 0x1)
    #define BCM283X_SPI_CS_CPOL_LOW                  0x00000000
    #define BCM283X_SPI_CS_CPOL_HIGH                 0x00000001
/** If CLEAR and TA are both set in the same operation, the FIFOs are cleared
   before the new frame is started. Read back as 0. @multiple */
  #define BCM283X_SPI_CS_CLEAR(v)                  ((BCM283X_SPI_CS_CLEAR_##v) << 4)
  #define BCM283X_SPI_CS_CLEAR_SET(x, v)           do { (x) = (((x) & ~0x30) | ((BCM283X_SPI_CS_CLEAR_##v) << 4)); } while(0)
  #define BCM283X_SPI_CS_CLEAR_SETVAL(x, v)        do { (x) = (((x) & ~0x30) | ((v) << 4)); } while(0)
  #define BCM283X_SPI_CS_CLEAR_GET(x)              (((x) >> 4) & 0x3)
    #define BCM283X_SPI_CS_CLEAR_NONE                0x00000000
    #define BCM283X_SPI_CS_CLEAR_TX                  0x00000001
    #define BCM283X_SPI_CS_CLEAR_RX                  0x00000002
    #define BCM283X_SPI_CS_CLEAR_RXTX                0x00000003
  #define BCM283X_SPI_CS_GCSPOL(v)                 ((BCM283X_SPI_CS_GCSPOL_##v) << 6)
  #define BCM283X_SPI_CS_GCSPOL_SET(x, v)          do { (x) = (((x) & ~0x40) | ((BCM283X_SPI_CS_GCSPOL_##v) << 6)); } while(0)
  #define BCM283X_SPI_CS_GCSPOL_SETVAL(x, v)       do { (x) = (((x) & ~0x40) | ((v) << 6)); } while(0)
  #define BCM283X_SPI_CS_GCSPOL_GET(x)             (((x) >> 6) & 0x1)
    #define BCM283X_SPI_CS_GCSPOL_LOW                0x00000000
    #define BCM283X_SPI_CS_GCSPOL_HIGH               0x00000001
/** When transfer is not active, CS lines are all high (assuming CSPOL = 0). RXR
   and DONE are 0. Writes to SPIFIFO write data into bits -0 of SPICS allowing
   DMA data blocks to set mode before sending data. When transfer is active, CS
   lines are set according to CS bits and CSPOL. Writes to SPIFIFO write data to
   TX FIFO.TA is cleared by a dma_frame_end pulse from the DMA controller.
   @multiple */
  #define BCM283X_SPI_CS_TA(v)                     ((BCM283X_SPI_CS_TA_##v) << 7)
  #define BCM283X_SPI_CS_TA_SET(x, v)              do { (x) = (((x) & ~0x80) | ((BCM283X_SPI_CS_TA_##v) << 7)); } while(0)
  #define BCM283X_SPI_CS_TA_SETVAL(x, v)           do { (x) = (((x) & ~0x80) | ((v) << 7)); } while(0)
  #define BCM283X_SPI_CS_TA_GET(x)                 (((x) >> 7) & 0x1)
    #define BCM283X_SPI_CS_TA_IDLE                   0x00000000
    #define BCM283X_SPI_CS_TA_ACTIVE                 0x00000001
/** Peripheral generates data requests. These will be taken in four-byte words
   until the SPIDLEN has been reached. @multiple */
  #define BCM283X_SPI_CS_DMAEN(v)                  ((BCM283X_SPI_CS_DMAEN_##v) << 8)
  #define BCM283X_SPI_CS_DMAEN_SET(x, v)           do { (x) = (((x) & ~0x100) | ((BCM283X_SPI_CS_DMAEN_##v) << 8)); } while(0)
  #define BCM283X_SPI_CS_DMAEN_SETVAL(x, v)        do { (x) = (((x) & ~0x100) | ((v) << 8)); } while(0)
  #define BCM283X_SPI_CS_DMAEN_GET(x)              (((x) >> 8) & 0x1)
    #define BCM283X_SPI_CS_DMAEN_DISABLED            0x00000000
    #define BCM283X_SPI_CS_DMAEN_ENABLED             0x00000001
/** Peripheral generates interrupt on transfer complete. @multiple */
  #define BCM283X_SPI_CS_INTD(v)                   ((BCM283X_SPI_CS_INTD_##v) << 9)
  #define BCM283X_SPI_CS_INTD_SET(x, v)            do { (x) = (((x) & ~0x200) | ((BCM283X_SPI_CS_INTD_##v) << 9)); } while(0)
  #define BCM283X_SPI_CS_INTD_SETVAL(x, v)         do { (x) = (((x) & ~0x200) | ((v) << 9)); } while(0)
  #define BCM283X_SPI_CS_INTD_GET(x)               (((x) >> 9) & 0x1)
    #define BCM283X_SPI_CS_INTD_DISABLED             0x00000000
    #define BCM283X_SPI_CS_INTD_ENABLED              0x00000001
/** Peripheral generates interrupt on RX FIFO condition. @multiple */
  #define BCM283X_SPI_CS_INTR(v)                   ((BCM283X_SPI_CS_INTR_##v) << 10)
  #define BCM283X_SPI_CS_INTR_SET(x, v)            do { (x) = (((x) & ~0x400) | ((BCM283X_SPI_CS_INTR_##v) << 10)); } while(0)
  #define BCM283X_SPI_CS_INTR_SETVAL(x, v)         do { (x) = (((x) & ~0x400) | ((v) << 10)); } while(0)
  #define BCM283X_SPI_CS_INTR_GET(x)               (((x) >> 10) & 0x1)
    #define BCM283X_SPI_CS_INTR_DISABLED             0x00000000
    #define BCM283X_SPI_CS_INTR_ENABLED              0x00000001
/** 0 = Don t automatically deassert chip select at the end of a DMA transfer
   chip select is manually controlled by software. 1 = Automatically deassert
   chip select at the end of a DMA transfer (as determined by SPIDLEN) @multiple
   */
  #define BCM283X_SPI_CS_ADCS(v)                   ((BCM283X_SPI_CS_ADCS_##v) << 11)
  #define BCM283X_SPI_CS_ADCS_SET(x, v)            do { (x) = (((x) & ~0x800) | ((BCM283X_SPI_CS_ADCS_##v) << 11)); } while(0)
  #define BCM283X_SPI_CS_ADCS_SETVAL(x, v)         do { (x) = (((x) & ~0x800) | ((v) << 11)); } while(0)
  #define BCM283X_SPI_CS_ADCS_GET(x)               (((x) >> 11) & 0x1)
    #define BCM283X_SPI_CS_ADCS_MANUAL               0x00000000
    #define BCM283X_SPI_CS_ADCS_AUTO                 0x00000001
/** Read enable if you are using bidirectional mode. If this bit is set, the SPI
   peripheral will be able to send data to this device. Peripheral generates
   interrupt on RX FIFO condition. @multiple */
  #define BCM283X_SPI_CS_REN(v)                    ((BCM283X_SPI_CS_REN_##v) << 12)
  #define BCM283X_SPI_CS_REN_SET(x, v)             do { (x) = (((x) & ~0x1000) | ((BCM283X_SPI_CS_REN_##v) << 12)); } while(0)
  #define BCM283X_SPI_CS_REN_SETVAL(x, v)          do { (x) = (((x) & ~0x1000) | ((v) << 12)); } while(0)
  #define BCM283X_SPI_CS_REN_GET(x)                (((x) >> 12) & 0x1)
    #define BCM283X_SPI_CS_REN_WRITE                 0x00000000
    #define BCM283X_SPI_CS_REN_READ                  0x00000001
/** The serial interface is configured as a LoSSI master. @multiple */
  #define BCM283X_SPI_CS_LEN(v)                    ((BCM283X_SPI_CS_LEN_##v) << 13)
  #define BCM283X_SPI_CS_LEN_SET(x, v)             do { (x) = (((x) & ~0x2000) | ((BCM283X_SPI_CS_LEN_##v) << 13)); } while(0)
  #define BCM283X_SPI_CS_LEN_SETVAL(x, v)          do { (x) = (((x) & ~0x2000) | ((v) << 13)); } while(0)
  #define BCM283X_SPI_CS_LEN_GET(x)                (((x) >> 13) & 0x1)
    #define BCM283X_SPI_CS_LEN_SPI                   0x00000000
    #define BCM283X_SPI_CS_LEN_LOSSI                 0x00000001
/** Cleared by writing more data to the TX FIFO or setting TA to 0. @multiple */
  #define BCM283X_SPI_CS_DONE(v)                   ((BCM283X_SPI_CS_DONE_##v) << 16)
  #define BCM283X_SPI_CS_DONE_SET(x, v)            do { (x) = (((x) & ~0x10000) | ((BCM283X_SPI_CS_DONE_##v) << 16)); } while(0)
  #define BCM283X_SPI_CS_DONE_SETVAL(x, v)         do { (x) = (((x) & ~0x10000) | ((v) << 16)); } while(0)
  #define BCM283X_SPI_CS_DONE_GET(x)               (((x) >> 16) & 0x1)
    #define BCM283X_SPI_CS_DONE_PROGRESS             0x00000000
    #define BCM283X_SPI_CS_DONE_DONE                 0x00000001
  #define BCM283X_SPI_CS_RXD(v)                    ((BCM283X_SPI_CS_RXD_##v) << 17)
  #define BCM283X_SPI_CS_RXD_SET(x, v)             do { (x) = (((x) & ~0x20000) | ((BCM283X_SPI_CS_RXD_##v) << 17)); } while(0)
  #define BCM283X_SPI_CS_RXD_SETVAL(x, v)          do { (x) = (((x) & ~0x20000) | ((v) << 17)); } while(0)
  #define BCM283X_SPI_CS_RXD_GET(x)                (((x) >> 17) & 0x1)
    #define BCM283X_SPI_CS_RXD_EMPTY                 0x00000000
    #define BCM283X_SPI_CS_RXD_NOTEMPTY              0x00000001
  #define BCM283X_SPI_CS_TXD(v)                    ((BCM283X_SPI_CS_TXD_##v) << 18)
  #define BCM283X_SPI_CS_TXD_SET(x, v)             do { (x) = (((x) & ~0x40000) | ((BCM283X_SPI_CS_TXD_##v) << 18)); } while(0)
  #define BCM283X_SPI_CS_TXD_SETVAL(x, v)          do { (x) = (((x) & ~0x40000) | ((v) << 18)); } while(0)
  #define BCM283X_SPI_CS_TXD_GET(x)                (((x) >> 18) & 0x1)
    #define BCM283X_SPI_CS_TXD_FULL                  0x00000000
    #define BCM283X_SPI_CS_TXD_NOTFULL               0x00000001
  #define BCM283X_SPI_CS_RXR(v)                    ((BCM283X_SPI_CS_RXR_##v) << 19)
  #define BCM283X_SPI_CS_RXR_SET(x, v)             do { (x) = (((x) & ~0x80000) | ((BCM283X_SPI_CS_RXR_##v) << 19)); } while(0)
  #define BCM283X_SPI_CS_RXR_SETVAL(x, v)          do { (x) = (((x) & ~0x80000) | ((v) << 19)); } while(0)
  #define BCM283X_SPI_CS_RXR_GET(x)                (((x) >> 19) & 0x1)
    #define BCM283X_SPI_CS_RXR_LESSTHANFULL          0x00000000
    #define BCM283X_SPI_CS_RXR_MORETHANFULL          0x00000001
  #define BCM283X_SPI_CS_RXF(v)                    ((BCM283X_SPI_CS_RXF_##v) << 20)
  #define BCM283X_SPI_CS_RXF_SET(x, v)             do { (x) = (((x) & ~0x100000) | ((BCM283X_SPI_CS_RXF_##v) << 20)); } while(0)
  #define BCM283X_SPI_CS_RXF_SETVAL(x, v)          do { (x) = (((x) & ~0x100000) | ((v) << 20)); } while(0)
  #define BCM283X_SPI_CS_RXF_GET(x)                (((x) >> 20) & 0x1)
    #define BCM283X_SPI_CS_RXF_NOTFULL               0x00000000
    #define BCM283X_SPI_CS_RXF_FULL                  0x00000001
  #define BCM283X_SPI_CS_CSPOL_COUNT               3
  #define BCM283X_SPI_CS_CSPOL(fidx, v)            ((BCM283X_SPI_CS_CSPOL_##v) << ((fidx) + 21))
  #define BCM283X_SPI_CS_CSPOL_SET(fidx, x, v)     do { (x) = (((x) & ~(0x200000 << ((fidx)))) | ((BCM283X_SPI_CS_CSPOL_##v) << ((fidx) + 21))); } while(0)
  #define BCM283X_SPI_CS_CSPOL_SETVAL(fidx, x, v)  do { (x) = (((x) & ~(0x200000 << ((fidx)))) | ((v) << ((fidx) + 21))); } while(0)
  #define BCM283X_SPI_CS_CSPOL_GET(fidx, x)        (((x) >> ((fidx) + 21)) & 0x1)
  #define BCM283X_SPI_CS_CSPOL_LOW                 0x00000000
  #define BCM283X_SPI_CS_CSPOL_HIGH                0x00000001
  #define BCM283X_SPI_CS_DMA_LEN                   0x01000000
  #define BCM283X_SPI_CS_LEN_LONG(v)               ((BCM283X_SPI_CS_LEN_LONG_##v) << 25)
  #define BCM283X_SPI_CS_LEN_LONG_SET(x, v)        do { (x) = (((x) & ~0x2000000) | ((BCM283X_SPI_CS_LEN_LONG_##v) << 25)); } while(0)
  #define BCM283X_SPI_CS_LEN_LONG_SETVAL(x, v)     do { (x) = (((x) & ~0x2000000) | ((v) << 25)); } while(0)
  #define BCM283X_SPI_CS_LEN_LONG_GET(x)           (((x) >> 25) & 0x1)
    #define BCM283X_SPI_CS_LEN_LONG_BYTE             0x00000000
    #define BCM283X_SPI_CS_LEN_LONG_WORD             0x00000001

#define BCM283X_SPI_FIFO_ADDR                        0x00000004
/** If TA is clear, the first 32-bit write to this register will control SPIDLEN
   and SPICS. Subsequent reads and writes will be taken as four-byte data words
   to be read/written to the FIFOs Poll/Interrupt Mode (DMAEN clear, TA set)
   Writes to the register write bytes to TX FIFO. Reads from register read bytes
   from the RX FIFO @multiple */
  #define BCM283X_SPI_FIFO_DATA(v)                 ((v) << 0)
  #define BCM283X_SPI_FIFO_DATA_SET(x, v)          do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define BCM283X_SPI_FIFO_DATA_GET(x)             (((x) >> 0) & 0xffffffff)

#define BCM283X_SPI_CLK_ADDR                         0x00000008
/** SCLK = Core Clock / CDIV. If CDIV is set to 0, the divisor is 65536. The
   divisor must be a power of 2. Odd numbers rounded down. The maximum SPI clock
   rate is of the APB clock. @multiple */
  #define BCM283X_SPI_CLK_CDIV(v)                  ((v) << 0)
  #define BCM283X_SPI_CLK_CDIV_SET(x, v)           do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define BCM283X_SPI_CLK_CDIV_GET(x)              (((x) >> 0) & 0xffff)

#define BCM283X_SPI_DLEN_ADDR                        0x0000000c
/** The number of bytes to transfer. This field is only valid for DMA mode (DMAEN
   set) and controls how many bytes to transmit (and therefore receive).
   @multiple */
  #define BCM283X_SPI_DLEN_LEN(v)                  ((v) << 0)
  #define BCM283X_SPI_DLEN_LEN_SET(x, v)           do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define BCM283X_SPI_DLEN_LEN_GET(x)              (((x) >> 0) & 0xffff)

#define BCM283X_SPI_LTOH_ADDR                        0x00000010
/** This sets the Output Hold delay in APB clocks. A value of 0 causes a 1 clock
   delay. @multiple */
  #define BCM283X_SPI_LTOH_TOH(v)                  ((v) << 0)
  #define BCM283X_SPI_LTOH_TOH_SET(x, v)           do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define BCM283X_SPI_LTOH_TOH_GET(x)              (((x) >> 0) & 0xf)

#define BCM283X_SPI_DC_ADDR                          0x00000014
/** Generate a DREQ signal to the TX DMA engine whenever the TX FIFO level is
   less than or equal to this amount. @multiple */
  #define BCM283X_SPI_DC_TDREQ(v)                  ((v) << 0)
  #define BCM283X_SPI_DC_TDREQ_SET(x, v)           do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define BCM283X_SPI_DC_TDREQ_GET(x)              (((x) >> 0) & 0xff)
/** Generate the Panic signal to the TX DMA engine whenever the TX FIFO level is
   less than or equal to this amount. @multiple */
  #define BCM283X_SPI_DC_TPANIC(v)                 ((v) << 8)
  #define BCM283X_SPI_DC_TPANIC_SET(x, v)          do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define BCM283X_SPI_DC_TPANIC_GET(x)             (((x) >> 8) & 0xff)
/** Generate A DREQ to the RX DMA engine whenever the RX FIFO level is greater
   than this amount, (RX DREQ is also generated if the transfer has finished but
   the RXFIFO isn t empty). @multiple */
  #define BCM283X_SPI_DC_RDREQ(v)                  ((v) << 16)
  #define BCM283X_SPI_DC_RDREQ_SET(x, v)           do { (x) = (((x) & ~0xff0000) | ((v) << 16)); } while(0)
  #define BCM283X_SPI_DC_RDREQ_GET(x)              (((x) >> 16) & 0xff)
/** Generate the Panic signal to the RX DMA engine whenever the RX FIFO level is
   greater than this amount. @multiple */
  #define BCM283X_SPI_DC_RPANIC(v)                 ((v) << 24)
  #define BCM283X_SPI_DC_RPANIC_SET(x, v)          do { (x) = (((x) & ~0xff000000) | ((v) << 24)); } while(0)
  #define BCM283X_SPI_DC_RPANIC_GET(x)             (((x) >> 24) & 0xff)

#endif

