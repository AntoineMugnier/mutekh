
@moduledef{Virtual File System}
 @short Virtual file system library and file system drivers
 @order 88

 @section{Virtual File System design}

 Virtual File System (VFS) abstract low-level file system in an
 uniform manner. It also caches open files and directories for
 faster access.

 VFS represents any file or directory as a node. This is the @ref
 vfs_node_s type.

 All nodes are reference-counted. All functions returning a node give
 a reference to caller. No function except @ref vfs_node_refdrop steals
 a reference. This is caller's responsibility to @ref vfs_node_refdrop
 nodes when not needed any more.

 VFS is made of two separate layers. One is operating on a path-string
 level, closer to the user's habits (@ref @vfs/helpers.h); the other
 is operating on a node level, closer to the VFS internal structure
 (@ref @vfs/ops.h). The former is using null-terminated strings, the
 latter is using explicit-length strings. This avoids most of the
 copies of user-passed read-only string.

 VFS also implement root directory and current-working-directory
 through @ref vfs_get_cwd and @ref vfs_get_root (@ref
 @vfs/globals.h). Configuration can make them system-wise or
 thread-local (@ref #CONFIG_VFS_GLOBAL_CWD and @ref
 #CONFIG_VFS_GLOBAL_ROOT).

 File handles are also reference-counted. On most filesystems, nodes
 may be opened more than once at the same time, each instance of an
 open file is a @ref vfs_file_s.

 @end section

@end moduledef

@parse {
vfs/file.h
vfs/fs.h
vfs/node.h
vfs/path.h
vfs/name.h
}
