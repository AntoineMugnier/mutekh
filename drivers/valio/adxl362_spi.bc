        /* -*- asm -*- */
	.custom spi
	.name adxl362

#include "adxl362.h"

//#define ADXL362_WRITE(N)
        cst8                    %R_TMP0,        0x0a
        pack8                   %R_TMP0,        
        spi_wr                  %R_TMP0,        N,     CS_PULSE

//#define ADXL362_READ(N)
        cst8                    %R_TMP0,        0x0b
        pack8                   %R_TMP0,        
        spi_swp                 %R_TMP0,        %R_TMP0,  N, CS_PULSE

adxl362_spi_entry_reset:
	.export adxl362_spi_entry_reset

        cst32                   %R_TMP0,        0x521f0a, 0
        pack32le                %R_TMP0,        1, 4
        spi_wr                  %R_TMP0,        3,     CS_PULSE
#warning compute a delay in driver init
        cst16                   %R_TMP0,        1000, 0
        spi_yield_delay         %R_TMP0

        cst16                   %R_TMP0,        0x000b, 0
        pack16le                %R_TMP0,        1, 2
        spi_swp                 %R_TMP0,        %R_TMP0,  5, CS_PULSE
        unpack8                 %R_TMP0,        5

        cst8                    %R_TMP0,        ADXL362_DEVID
        neq                     %R_TMP2,        %R_TMP0
          abort
        cst8                    %R_TMP0,        ADXL362_MEMSID
        neq                     %R_TMP3,        %R_TMP0
          abort
        cst8                    %R_TMP0,        ADXL362_PARTID
        neq                     %R_TMP4,        %R_TMP0
          abort

        cst32                   %R_TMP0,        0x0f270a, 0
        pack32le                %R_TMP0,        1, 4
        spi_wr                  %R_TMP0,        3,     CS_PULSE

        cst32                   %R_TMP0,        0x0a2d0a, 0
        pack32le                %R_TMP0,        1, 4
        spi_wr                  %R_TMP0,        3,     CS_PULSE

        call8                   %R_LINK,        clear_irq

        end

/*--------------------------------------------------------------------*/

adxl362_spi_entry_cfg:
	.export adxl362_spi_entry_cfg

	tst32c                  %R_TMP0,	bitpos(_const(VALIO_MOTION_ACC_OPT_ACT))
         jmp8                   cfg_inactivity

cfg_activity:
        mov                     %R_TMP3,        %R_ARG1
        shi32r                  %R_TMP3,        8
        cst8                    %R_TMP1,        0x20
        cst8                    %R_TMP0,        0x0a
        pack8                   %R_TMP0,        4
        spi_wr                  %R_TMP0,        4,     CS_PULSE

cfg_inactivity:
        tst32c                  %R_TMP0,        bitpos(_const(VALIO_MOTION_ACC_OPT_INACT))
         end

        cst8                    %R_TMP1,        0x23
        mov                     %R_TMP3,        %R_ARG2
        shi32r                  %R_TMP3,        8
        ld32e                   %R_TMP4,        %R_CTX_PV,    _offsetof(adxl362_private_s, time, 4)
        mov                     %R_TMP5,        %R_TMP4
        shi32r                  %R_TMP5,        8
        cst8                    %R_TMP0,        0x0a
        pack8                   %R_TMP0,        6
        spi_wr                  %R_TMP0,        6,     CS_PULSE

        end

/*--------------------------------------------------------------------*/

adxl362_spi_entry_wait:
	.export adxl362_spi_entry_wait

        cst8                    %R_TMP2,	0

        tst32s                  %R_ARG0,        bitpos(_const(VALIO_MOTION_ACC_ACT))
         bit32s                 %R_TMP2,        bitpos(0x10)

        tst32s                  %R_ARG0,        bitpos(_const(VALIO_MOTION_ACC_INACT))
         bit32s                 %R_TMP2,        bitpos(0x20)

        cst8                    %R_TMP1,        0x2A
        cst8                    %R_TMP0,        0x0a
        pack8                   %R_TMP0,        3
        spi_wr                  %R_TMP0,        3,     CS_PULSE

        cst8                    %R_STATUS,	0

        call8                   %R_LINK,        clear_irq

        end

/*--------------------------------------------------------------------*/

adxl362_spi_entry_irq:
	.export adxl362_spi_entry_irq

        call8                   %R_LINK,        clear_irq
        mov                     %R_STATUS,      %R_TMP2

        cst8                    %R_TMP0,        0x30
	and32			%R_TMP0,        %R_STATUS
        eq0                     %R_TMP0
         end

adxl362_spi_entry_read_value:
	.export adxl362_spi_entry_read_value
        cst8                    %R_TMP1,        0x08
        cst8                    %R_TMP0,        0x0b
        pack8                   %R_TMP0,        2
        spi_swp                 %R_TMP0,        %R_TMP0,  6, CS_PULSE
        unpack                  %R_TMP0,        6

        st8e                    %R_TMP2,        %R_CTX_PV,      _offsetof(adxl362_private_s, x, 1)
        st8e                    %R_TMP3,        %R_CTX_PV,      _offsetof(adxl362_private_s, y, 1)
        st8e                    %R_TMP4,        %R_CTX_PV,      _offsetof(adxl362_private_s, z, 1)

        end

clear_irq:
        ld8e                    %R_TMP0,        %R_CTX_PV,      _offsetof(adxl362_private_s, flags, 1)
        bit32c                  %R_TMP0,        bitpos(ADXL362_FLAGS_IRQ)
        st8e                    %R_TMP0,        %R_CTX_PV,      _offsetof(adxl362_private_s, flags, 1)

        cst8                    %R_TMP1,        0x0b
        cst8                    %R_TMP0,        0x0b
        pack8                   %R_TMP0,        2
        spi_swp                 %R_TMP0,        %R_TMP0,  3, CS_PULSE
        unpack                  %R_TMP0,        3

        ret                     %R_LINK
