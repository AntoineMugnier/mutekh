/*
    This file is part of MutekH.

    MutekH is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation; version 2.1 of the
    License.

    MutekH is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with MutekH; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
    02110-1301 USA.

    Copyright Sebastien Cerdan <sebcerdan@gmail.com> (c) 2014
    Copyright Vincent DEFILIPPI <vincentdefilippi@gmail.com> (c) 2016
*/

#include "adxl362.h"
#include "adxl362_regs.h"

.custom spi
.name adxl362

.func adxl362_bc_config
  .export adxl362_bc_config

  .input  %8 config1_w, %9 config2_w, %10 config3_w, %11 config4_w, %15 reset_latency
  .output %8 config1_r, %9 config2_r, %10 config3_r, %11 config4_r

  .clobber %0, %1, %2, %3, %4

  /* Soft reset */
  cst32     %0, ADXL362_WRITE_REG(ADXL362_REG_SOFT_RESET, ADXL362_SOFT_RESET_CODE), 0
  pack32le  %0, 1, 3
  spi_wr    %0, 3, CS_PULSE

  /* Delay after reset */
  spi_yield_delay  %reset_latency

  /* Read the device ID, the MEMS device ID and the part ID */
  cst32     %0, ADXL362_READ_REG(ADXL362_REG_DEVID_AD), 0
  cst32     %1, 0, 0
  pack32le  %0, 2, 5
  spi_swp   %0, %0, 5, CS_PULSE
  unpack8   %0, 5

  /* Check the device ID */
  cst8  %0, ADXL362_REG_DEVID_AD_CONST
  neq   %0, %2
  abort

  /* Check the MEMS device ID */
  cst8  %0, ADXL362_REG_DEVID_MST_CONST
  neq   %0, %3
  abort

  /* Check the part ID */
  cst8  %0, ADXL362_REG_PARTID_CONST
  neq   %0, %4
  abort

  /* Write config registers */
  pack32le  %config1_w, 4, 16
  spi_wr    %config1_w, 16, CS_PULSE

  /* Read config registers */
  cst32       %config1_r, ADXL362_READ_REG(ADXL362_REG_THRESH_ACT_L), 0
  cst32       %config2_r, 0, 0
  cst32       %config3_r, 0, 0
  cst32       %config4_r, 0, 0
  pack32le    %config1_r, 4, 16
  spi_swp     %config1_r, %config1_r, 16, CS_PULSE
  unpack32le  %config1_r, 4, 16

  end
.endfunc

.func adxl362_bc_read_conv
  .export adxl362_bc_read_conv
  .output %2 xdata, %3 ydata, %4 zdata, %5 status
  .clobber %0, %1

  /* Read XDATA, YDATA, XDATA and STATUS registers */
  cst16     %0, ADXL362_READ_REG(ADXL362_REG_XDATA), 0
  cst32     %1, 0, 0
  pack32le  %0, 2, 6
  spi_swp   %0, %0, 6, CS_PULSE
  unpack8   %0, 6

  end
.endfunc
