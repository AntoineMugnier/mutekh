/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -I rttimer.bf -o cdefs
*/

#ifndef _RT_TIMER_BFGEN_DEFS_
#define _RT_TIMER_BFGEN_DEFS_

/** Specify @em{prescaler counter register} 32 bits register address. */
#define RT_TIMER_SCCNT_ADDR                      0x00000000

/** Specify @em{prescaler reload register} 32 bits register address. */
#define RT_TIMER_SCRLD_ADDR                      0x00000004

/** Specify @em{device configuration register} 32 bits register address. */
#define RT_TIMER_CFG_ADDR                        0x00000008
  /** Specify @em{deadline registers count} field of @em{device configuration register} register. @multiple */
  #define RT_TIMER_CFG_DL_CNT_SMASK              0x00000007ULL
  #define RT_TIMER_CFG_DL_CNT_MASK               0x00000007ULL
  #define RT_TIMER_CFG_DL_CNT_SHIFT              0
  #define RT_TIMER_CFG_DL_CNT_GET(x)             (((x) >> 0) & 0x7ULL)
  #define RT_TIMER_CFG_DL_CNT_OR(x, v)           (((x) & ~0x7ULL) | ((v) << 0))
  #define RT_TIMER_CFG_DL_CNT_SET(x, v)          do { (x) = (((x) & ~0x7ULL) | ((v) << 0)); } while(0)
  /** Specify @em{irq vector number} field of @em{device configuration register} register. @multiple */
  #define RT_TIMER_CFG_IRQ_SMASK                 0x000000f8ULL
  #define RT_TIMER_CFG_IRQ_MASK                  0x0000001fULL
  #define RT_TIMER_CFG_IRQ_SHIFT                 3
  #define RT_TIMER_CFG_IRQ_GET(x)                (((x) >> 3) & 0x1fULL)
  #define RT_TIMER_CFG_IRQ_OR(x, v)              (((x) & ~0xf8ULL) | ((v) << 3))
  #define RT_TIMER_CFG_IRQ_SET(x, v)             do { (x) = (((x) & ~0xf8ULL) | ((v) << 3)); } while(0)
  /** Specify @em{separate interrupts} field of @em{device configuration register} register. @multiple */
  #define RT_TIMER_CFG_SI_SMASK                  0x00000100ULL
  #define RT_TIMER_CFG_SI_MASK                   0x00000001ULL
  #define RT_TIMER_CFG_SI_SHIFT                  8
  #define RT_TIMER_CFG_SI_GET(x)                 (((x) >> 8) & 0x1ULL)
  #define RT_TIMER_CFG_SI_OR(x, v)               (((x) & ~0x100ULL) | ((v) << 8))
  #define RT_TIMER_CFG_SI_SET(x, v)              do { (x) = (((x) & ~0x100ULL) | ((v) << 8)); } while(0)

/** Specify @em{control register} 32 bits register address. */
#define RT_TIMER_CTRL_ADDR                       0x0000000c
  /** Specify @em{chip enabled} field of @em{control register} register. @multiple */
  #define RT_TIMER_CTRL_CE_SMASK                 0x00000001ULL
  #define RT_TIMER_CTRL_CE_MASK                  0x00000001ULL
  #define RT_TIMER_CTRL_CE_SHIFT                 0
  #define RT_TIMER_CTRL_CE_GET(x)                (((x) >> 0) & 0x1ULL)
  #define RT_TIMER_CTRL_CE_OR(x, v)              (((x) & ~0x1ULL) | ((v) << 0))
  #define RT_TIMER_CTRL_CE_SET(x, v)             do { (x) = (((x) & ~0x1ULL) | ((v) << 0)); } while(0)
  /** Specify @em{interrupt enable on deadline write} field of @em{control register} register. @multiple */
  #define RT_TIMER_CTRL_IEW_SMASK                0x00000002ULL
  #define RT_TIMER_CTRL_IEW_MASK                 0x00000001ULL
  #define RT_TIMER_CTRL_IEW_SHIFT                1
  #define RT_TIMER_CTRL_IEW_GET(x)               (((x) >> 1) & 0x1ULL)
  #define RT_TIMER_CTRL_IEW_OR(x, v)             (((x) & ~0x2ULL) | ((v) << 1))
  #define RT_TIMER_CTRL_IEW_SET(x, v)            do { (x) = (((x) & ~0x2ULL) | ((v) << 1)); } while(0)
  /** Specify @em{interrupt enable on deadline set} field of @em{control register} register. @multiple */
  #define RT_TIMER_CTRL_IES_SMASK                0x00000004ULL
  #define RT_TIMER_CTRL_IES_MASK                 0x00000001ULL
  #define RT_TIMER_CTRL_IES_SHIFT                2
  #define RT_TIMER_CTRL_IES_GET(x)               (((x) >> 2) & 0x1ULL)
  #define RT_TIMER_CTRL_IES_OR(x, v)             (((x) & ~0x4ULL) | ((v) << 2))
  #define RT_TIMER_CTRL_IES_SET(x, v)            do { (x) = (((x) & ~0x4ULL) | ((v) << 2)); } while(0)
  /** Specify @em{interrupt enable on deadline add} field of @em{control register} register. @multiple */
  #define RT_TIMER_CTRL_IEA_SMASK                0x00000008ULL
  #define RT_TIMER_CTRL_IEA_MASK                 0x00000001ULL
  #define RT_TIMER_CTRL_IEA_SHIFT                3
  #define RT_TIMER_CTRL_IEA_GET(x)               (((x) >> 3) & 0x1ULL)
  #define RT_TIMER_CTRL_IEA_OR(x, v)             (((x) & ~0x8ULL) | ((v) << 3))
  #define RT_TIMER_CTRL_IEA_SET(x, v)            do { (x) = (((x) & ~0x8ULL) | ((v) << 3)); } while(0)
  /** Specify @em{interrupt enable on deadline copy} field of @em{control register} register. @multiple */
  #define RT_TIMER_CTRL_IEC_SMASK                0x00000010ULL
  #define RT_TIMER_CTRL_IEC_MASK                 0x00000001ULL
  #define RT_TIMER_CTRL_IEC_SHIFT                4
  #define RT_TIMER_CTRL_IEC_GET(x)               (((x) >> 4) & 0x1ULL)
  #define RT_TIMER_CTRL_IEC_OR(x, v)             (((x) & ~0x10ULL) | ((v) << 4))
  #define RT_TIMER_CTRL_IEC_SET(x, v)            do { (x) = (((x) & ~0x10ULL) | ((v) << 4)); } while(0)

/** Specify @em{main counter lower 32 bits value} 32 bits register address. */
#define RT_TIMER_RTCL_ADDR                       0x00000010

/** Specify @em{main counter higher 32 bits value} 32 bits register address. */
#define RT_TIMER_RTCH_ADDR                       0x00000014

/** Specify @em{32 bits values scratch register} 32 bits register address. */
#define RT_TIMER_RTCTMP_ADDR                     0x00000018

/** Specify @em{period enable register} 32 bits register address. */
#define RT_TIMER_PE_ADDR                         0x00000020

/** Specify @em{interrupts enable register} 32 bits register address. */
#define RT_TIMER_IE_ADDR                         0x00000024

/** Specify @em{interrupts pending register} 32 bits register address. */
#define RT_TIMER_IP_ADDR                         0x00000028

/** Specify @em{deadline copy command register} 32 bits register address. */
#define RT_TIMER_COPY_ADDR                       0x0000002c

/** Specify @em{deadline cancel register} 32 bits register address. */
#define RT_TIMER_CANCEL_ADDR                     0x00000030

/** Specify @em{deadline1 value register} 32 bits register address. */
#define RT_TIMER_DLN1_ADDR                       0x00000080

/** Specify @em{deadline1 set register} 32 bits register address. */
#define RT_TIMER_DLN1S_ADDR                      0x00000084

/** Specify @em{deadline1 add register} 32 bits register address. */
#define RT_TIMER_DLN1A_ADDR                      0x00000088

/** Specify @em{deadline1 period register} 32 bits register address. */
#define RT_TIMER_DLN1P_ADDR                      0x0000008c

/** Specify @em{deadline2 value register} 32 bits register address. */
#define RT_TIMER_DLN2_ADDR                       0x00000090

/** Specify @em{deadline2 set register} 32 bits register address. */
#define RT_TIMER_DLN2S_ADDR                      0x00000094

/** Specify @em{deadline2 add register} 32 bits register address. */
#define RT_TIMER_DLN2A_ADDR                      0x00000098

/** Specify @em{deadline2 period register} 32 bits register address. */
#define RT_TIMER_DLN2P_ADDR                      0x0000009c

/** Specify @em{deadline3 value register} 32 bits register address. */
#define RT_TIMER_DLN3_ADDR                       0x000000a0

/** Specify @em{deadline3 set register} 32 bits register address. */
#define RT_TIMER_DLN3S_ADDR                      0x000000a4

/** Specify @em{deadline3 add register} 32 bits register address. */
#define RT_TIMER_DLN3A_ADDR                      0x000000a8

/** Specify @em{deadline3 period register} 32 bits register address. */
#define RT_TIMER_DLN3P_ADDR                      0x000000ac

/** Specify @em{deadline4 value register} 32 bits register address. */
#define RT_TIMER_DLN4_ADDR                       0x000000b0

/** Specify @em{deadline4 set register} 32 bits register address. */
#define RT_TIMER_DLN4S_ADDR                      0x000000b4

/** Specify @em{deadline4 add register} 32 bits register address. */
#define RT_TIMER_DLN4A_ADDR                      0x000000b8

/** Specify @em{deadline4 period register} 32 bits register address. */
#define RT_TIMER_DLN4P_ADDR                      0x000000bc

/** Specify @em{deadline5 value register} 32 bits register address. */
#define RT_TIMER_DLN5_ADDR                       0x000000c0

/** Specify @em{deadline5 set register} 32 bits register address. */
#define RT_TIMER_DLN5S_ADDR                      0x000000c4

/** Specify @em{deadline5 add register} 32 bits register address. */
#define RT_TIMER_DLN5A_ADDR                      0x000000c8

/** Specify @em{deadline5 period register} 32 bits register address. */
#define RT_TIMER_DLN5P_ADDR                      0x000000cc

/** Specify @em{deadline6 value register} 32 bits register address. */
#define RT_TIMER_DLN6_ADDR                       0x000000d0

/** Specify @em{deadline6 set register} 32 bits register address. */
#define RT_TIMER_DLN6S_ADDR                      0x000000d4

/** Specify @em{deadline6 add register} 32 bits register address. */
#define RT_TIMER_DLN6A_ADDR                      0x000000d8

/** Specify @em{deadline6 period register} 32 bits register address. */
#define RT_TIMER_DLN6P_ADDR                      0x000000dc

/** Specify @em{deadline7 value register} 32 bits register address. */
#define RT_TIMER_DLN7_ADDR                       0x000000e0

/** Specify @em{deadline7 set register} 32 bits register address. */
#define RT_TIMER_DLN7S_ADDR                      0x000000e4

/** Specify @em{deadline7 add register} 32 bits register address. */
#define RT_TIMER_DLN7A_ADDR                      0x000000e8

/** Specify @em{deadline7 period register} 32 bits register address. */
#define RT_TIMER_DLN7P_ADDR                      0x000000ec

#endif

