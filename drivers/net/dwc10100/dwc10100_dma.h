/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs -I dwc_eth_10_100_dma.bf                                     \
     -O /Users/nipo/projects/mutekh/drivers/net/dwc10100/dwc10100_dma.h
*/

#ifndef _DWC_DMA_BFGEN_DEFS_
#define _DWC_DMA_BFGEN_DEFS_

/** Ethernet DMA bus mode register @multiple */
#define DWC_DMA_BMR_ADDR                             0x00000000
/** Software reset @multiple */
  #define DWC_DMA_BMR_SR                           0x00000001
/** DMA Arbitration @multiple */
  #define DWC_DMA_BMR_DA                           0x00000002
/** Descriptor skip length @multiple */
  #define DWC_DMA_BMR_DSL(v)                       ((v) << 2)
  #define DWC_DMA_BMR_DSL_SET(x, v)                do { (x) = (((x) & ~0x7c) | ((v) << 2)); } while(0)
  #define DWC_DMA_BMR_DSL_GET(x)                   (((x) >> 2) & 0x1f)
/** Programmable burst length @multiple */
  #define DWC_DMA_BMR_PBL(v)                       ((v) << 8)
  #define DWC_DMA_BMR_PBL_SET(x, v)                do { (x) = (((x) & ~0x3f00) | ((v) << 8)); } while(0)
  #define DWC_DMA_BMR_PBL_GET(x)                   (((x) >> 8) & 0x3f)
/** Rx Tx priority ratio @multiple */
  #define DWC_DMA_BMR_RTPR(v)                      ((v) << 14)
  #define DWC_DMA_BMR_RTPR_SET(x, v)               do { (x) = (((x) & ~0xc000) | ((v) << 14)); } while(0)
  #define DWC_DMA_BMR_RTPR_GET(x)                  (((x) >> 14) & 0x3)
/** Fixed burst @multiple */
  #define DWC_DMA_BMR_FB                           0x00010000
/** Rx DMA PBL @multiple */
  #define DWC_DMA_BMR_RDP(v)                       ((v) << 17)
  #define DWC_DMA_BMR_RDP_SET(x, v)                do { (x) = (((x) & ~0x7e0000) | ((v) << 17)); } while(0)
  #define DWC_DMA_BMR_RDP_GET(x)                   (((x) >> 17) & 0x3f)
/** Use separate PBL @multiple */
  #define DWC_DMA_BMR_USP                          0x00800000
/** 4xPBL mode @multiple */
  #define DWC_DMA_BMR_FPM                          0x01000000
/** Address-aligned beats @multiple */
  #define DWC_DMA_BMR_AAB                          0x02000000

/** Ethernet DMA transmit poll demand register @multiple */
#define DWC_DMA_TPDR_ADDR                            0x00000004
/** Transmit poll demand @multiple */
  #define DWC_DMA_TPDR_TPD(v)                      ((v) << 0)
  #define DWC_DMA_TPDR_TPD_SET(x, v)               do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define DWC_DMA_TPDR_TPD_GET(x)                  (((x) >> 0) & 0xffffffff)

/** EHERNET DMA receive poll demand register @multiple */
#define DWC_DMA_RPDR_ADDR                            0x00000008
/** Receive poll demand @multiple */
  #define DWC_DMA_RPDR_RPD(v)                      ((v) << 0)
  #define DWC_DMA_RPDR_RPD_SET(x, v)               do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define DWC_DMA_RPDR_RPD_GET(x)                  (((x) >> 0) & 0xffffffff)

/** Ethernet DMA receive descriptor list address register @multiple */
#define DWC_DMA_RDLAR_ADDR                           0x0000000c
/** Start of receive list @multiple */
  #define DWC_DMA_RDLAR_SRL(v)                     ((v) << 0)
  #define DWC_DMA_RDLAR_SRL_SET(x, v)              do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define DWC_DMA_RDLAR_SRL_GET(x)                 (((x) >> 0) & 0xffffffff)

/** Ethernet DMA transmit descriptor list address register @multiple */
#define DWC_DMA_TDLAR_ADDR                           0x00000010
/** Start of transmit list @multiple */
  #define DWC_DMA_TDLAR_STL(v)                     ((v) << 0)
  #define DWC_DMA_TDLAR_STL_SET(x, v)              do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define DWC_DMA_TDLAR_STL_GET(x)                 (((x) >> 0) & 0xffffffff)

/** Ethernet DMA status register @multiple */
#define DWC_DMA_SR_ADDR                              0x00000014
/** Transmit status @multiple */
  #define DWC_DMA_SR_TS                            0x00000001
/** Transmit process stopped status @multiple */
  #define DWC_DMA_SR_TPSS                          0x00000002
/** Transmit buffer unavailable status @multiple */
  #define DWC_DMA_SR_TBUS                          0x00000004
/** Transmit jabber timeout status @multiple */
  #define DWC_DMA_SR_TJTS                          0x00000008
/** Receive overflow status @multiple */
  #define DWC_DMA_SR_ROS                           0x00000010
/** Transmit underflow status @multiple */
  #define DWC_DMA_SR_TUS                           0x00000020
/** Receive status @multiple */
  #define DWC_DMA_SR_RS                            0x00000040
/** Receive buffer unavailable status @multiple */
  #define DWC_DMA_SR_RBUS                          0x00000080
/** Receive process stopped status @multiple */
  #define DWC_DMA_SR_RPSS                          0x00000100
/** Receive watchdog timeout status @multiple */
  #define DWC_DMA_SR_PWTS                          0x00000200
/** Early transmit status @multiple */
  #define DWC_DMA_SR_ETS                           0x00000400
/** Fatal bus error status @multiple */
  #define DWC_DMA_SR_FBES                          0x00002000
/** Early receive status @multiple */
  #define DWC_DMA_SR_ERS                           0x00004000
/** Abnormal interrupt summary @multiple */
  #define DWC_DMA_SR_AIS                           0x00008000
/** Normal interrupt summary @multiple */
  #define DWC_DMA_SR_NIS                           0x00010000
/** Receive process state @multiple */
  #define DWC_DMA_SR_RPS(v)                        ((v) << 17)
  #define DWC_DMA_SR_RPS_SET(x, v)                 do { (x) = (((x) & ~0xe0000) | ((v) << 17)); } while(0)
  #define DWC_DMA_SR_RPS_GET(x)                    (((x) >> 17) & 0x7)
/** Transmit process state @multiple */
  #define DWC_DMA_SR_TPS(v)                        ((v) << 20)
  #define DWC_DMA_SR_TPS_SET(x, v)                 do { (x) = (((x) & ~0x700000) | ((v) << 20)); } while(0)
  #define DWC_DMA_SR_TPS_GET(x)                    (((x) >> 20) & 0x7)
/** Error bits status @multiple */
  #define DWC_DMA_SR_EBS(v)                        ((v) << 23)
  #define DWC_DMA_SR_EBS_SET(x, v)                 do { (x) = (((x) & ~0x3800000) | ((v) << 23)); } while(0)
  #define DWC_DMA_SR_EBS_GET(x)                    (((x) >> 23) & 0x7)
/** MMC status @multiple */
  #define DWC_DMA_SR_MMCS                          0x08000000
/** PMT status @multiple */
  #define DWC_DMA_SR_PMTS                          0x10000000
/** Time stamp trigger status @multiple */
  #define DWC_DMA_SR_TSTS                          0x20000000

/** Ethernet DMA operation mode register @multiple */
#define DWC_DMA_OMR_ADDR                             0x00000018
/** SR @multiple */
  #define DWC_DMA_OMR_SR                           0x00000002
/** OSF @multiple */
  #define DWC_DMA_OMR_OSF                          0x00000004
/** RTC @multiple */
  #define DWC_DMA_OMR_RTC(v)                       ((v) << 3)
  #define DWC_DMA_OMR_RTC_SET(x, v)                do { (x) = (((x) & ~0x18) | ((v) << 3)); } while(0)
  #define DWC_DMA_OMR_RTC_GET(x)                   (((x) >> 3) & 0x3)
/** FUGF @multiple */
  #define DWC_DMA_OMR_FUGF                         0x00000040
/** FEF @multiple */
  #define DWC_DMA_OMR_FEF                          0x00000080
/** ST @multiple */
  #define DWC_DMA_OMR_ST                           0x00002000
/** TTC @multiple */
  #define DWC_DMA_OMR_TTC(v)                       ((v) << 14)
  #define DWC_DMA_OMR_TTC_SET(x, v)                do { (x) = (((x) & ~0x1c000) | ((v) << 14)); } while(0)
  #define DWC_DMA_OMR_TTC_GET(x)                   (((x) >> 14) & 0x7)
/** FTF @multiple */
  #define DWC_DMA_OMR_FTF                          0x00100000
/** TSF @multiple */
  #define DWC_DMA_OMR_TSF                          0x00200000
/** DFRF @multiple */
  #define DWC_DMA_OMR_DFRF                         0x01000000
/** RSF @multiple */
  #define DWC_DMA_OMR_RSF                          0x02000000
/** DTCEFD @multiple */
  #define DWC_DMA_OMR_DTCEFD                       0x04000000

/** Ethernet DMA interrupt enable register @multiple */
#define DWC_DMA_IER_ADDR                             0x0000001c
/** Transmit interrupt enable @multiple */
  #define DWC_DMA_IER_TIE                          0x00000001
/** Transmit process stopped interrupt enable @multiple */
  #define DWC_DMA_IER_TPSIE                        0x00000002
/** Transmit buffer unavailable interrupt enable @multiple */
  #define DWC_DMA_IER_TBUIE                        0x00000004
/** Transmit jabber timeout interrupt enable @multiple */
  #define DWC_DMA_IER_TJTIE                        0x00000008
/** Overflow interrupt enable @multiple */
  #define DWC_DMA_IER_ROIE                         0x00000010
/** Underflow interrupt enable @multiple */
  #define DWC_DMA_IER_TUIE                         0x00000020
/** Receive interrupt enable @multiple */
  #define DWC_DMA_IER_RIE                          0x00000040
/** Receive buffer unavailable interrupt enable @multiple */
  #define DWC_DMA_IER_RBUIE                        0x00000080
/** Receive process stopped interrupt enable @multiple */
  #define DWC_DMA_IER_RPSIE                        0x00000100
/** receive watchdog timeout interrupt enable @multiple */
  #define DWC_DMA_IER_RWTIE                        0x00000200
/** Early transmit interrupt enable @multiple */
  #define DWC_DMA_IER_ETIE                         0x00000400
/** Fatal bus error interrupt enable @multiple */
  #define DWC_DMA_IER_FBEIE                        0x00002000
/** Early receive interrupt enable @multiple */
  #define DWC_DMA_IER_ERIE                         0x00004000
/** Abnormal interrupt summary enable @multiple */
  #define DWC_DMA_IER_AISE                         0x00008000
/** Normal interrupt summary enable @multiple */
  #define DWC_DMA_IER_NISE                         0x00010000

/** Ethernet DMA missed frame and buffer overflow counter register @multiple */
#define DWC_DMA_MFBOCR_ADDR                          0x00000020
/** Missed frames by the controller @multiple */
  #define DWC_DMA_MFBOCR_MFC(v)                    ((v) << 0)
  #define DWC_DMA_MFBOCR_MFC_SET(x, v)             do { (x) = (((x) & ~0xffff) | ((v) << 0)); } while(0)
  #define DWC_DMA_MFBOCR_MFC_GET(x)                (((x) >> 0) & 0xffff)
/** Overflow bit for missed frame counter @multiple */
  #define DWC_DMA_MFBOCR_OMFC                      0x00010000
/** Missed frames by the application @multiple */
  #define DWC_DMA_MFBOCR_MFA(v)                    ((v) << 17)
  #define DWC_DMA_MFBOCR_MFA_SET(x, v)             do { (x) = (((x) & ~0xffe0000) | ((v) << 17)); } while(0)
  #define DWC_DMA_MFBOCR_MFA_GET(x)                (((x) >> 17) & 0x7ff)
/** Overflow bit for FIFO overflow counter @multiple */
  #define DWC_DMA_MFBOCR_OFOC                      0x10000000

/** Ethernet DMA current host transmit descriptor register @multiple */
#define DWC_DMA_CHTDR_ADDR                           0x00000048
/** Host transmit descriptor address pointer @multiple */
  #define DWC_DMA_CHTDR_HTDAP(v)                   ((v) << 0)
  #define DWC_DMA_CHTDR_HTDAP_SET(x, v)            do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define DWC_DMA_CHTDR_HTDAP_GET(x)               (((x) >> 0) & 0xffffffff)

/** Ethernet DMA current host receive descriptor register @multiple */
#define DWC_DMA_CHRDR_ADDR                           0x0000004c
/** Host receive descriptor address pointer @multiple */
  #define DWC_DMA_CHRDR_HRDAP(v)                   ((v) << 0)
  #define DWC_DMA_CHRDR_HRDAP_SET(x, v)            do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define DWC_DMA_CHRDR_HRDAP_GET(x)               (((x) >> 0) & 0xffffffff)

/** Ethernet DMA current host transmit buffer address register @multiple */
#define DWC_DMA_CHTBAR_ADDR                          0x00000050
/** Host transmit buffer address pointer @multiple */
  #define DWC_DMA_CHTBAR_HTBAP(v)                  ((v) << 0)
  #define DWC_DMA_CHTBAR_HTBAP_SET(x, v)           do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define DWC_DMA_CHTBAR_HTBAP_GET(x)              (((x) >> 0) & 0xffffffff)

/** Ethernet DMA current host receive buffer address register @multiple */
#define DWC_DMA_CHRBAR_ADDR                          0x00000054
/** Host receive buffer address pointer @multiple */
  #define DWC_DMA_CHRBAR_HRBAP(v)                  ((v) << 0)
  #define DWC_DMA_CHRBAR_HRBAP_SET(x, v)           do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define DWC_DMA_CHRBAR_HRBAP_GET(x)              (((x) >> 0) & 0xffffffff)

#endif

