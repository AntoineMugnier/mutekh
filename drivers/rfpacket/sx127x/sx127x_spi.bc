/*
   This file is part of MutekH.

    MutekH is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation; version 2.1 of the
    License.

    MutekH is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with MutekH; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
    02110-1301 USA.

    Copyright (c) 2018 Sebastien Cerdan <sebcerdan@gmail.com>

*/

#include <device/class/spi.h>
#include "sx127x_spi.h"

        .custom spi
        .name sx127x
        .const %R_CTX_PV
        .global %STATUS

.func sx127x_entry_reset
        .export sx127x_entry_reset
        .clobber %5 tmp, %6 data, %7 ver
    /* Get start-up delay */
        ld32e                   %data,            %R_CTX_PV,       _offsetof(sx127x_private_s, delay_1ms, 4)
        shi32l                  %data,            2
    /* Reset device */
        cst8                    %tmp,             0
        spi_gpioset             SX127X_IO_RST,    %tmp
        spi_yield_delay         %data,
        cst8                    %tmp,             1
        spi_gpioset             SX127X_IO_RST,    %tmp
        spi_yield_delay         %data
    /* Check Revision */
        cst8                    %tmp,             SX1276_REG_VERSION
        pack16le                %tmp,             1,              2
        spi_swp                 %tmp,             %tmp,           2,      CS_PULSE
        unpack8                 %tmp,             2
        cst32                   %ver,             SX127X_VERSION_VALUE,   0
        neq                     %ver,             %data
          abort
    /* Rssi measure configuration */
        cst8                    %tmp,             SX1276_REG_RSSICONFIG | 0x80
        cst8                    %data,            (SX127X_RSSI_OFFSET | SX1276_RSSICONFIG_SMOOTHING_64)
        pack8                   %tmp,             2
        spi_wr                  %tmp,             2,     CS_PULSE
        jmp32                   sx127x_entry_irq
.endfunc

.func sx127x_entry_config
        .export sx127x_entry_config
        .input %0 buf
        .clobber %0, %1 cmd, %6 len, %7, %8, %9, %10, %12

        /* Ensure Stand-by mode */
        cst8                    %sx127x_mode_set:mode,  SX1276_OPMODE_STANDBY
        call16                  %sx127x_mode_set:link,  sx127x_mode_set
        call8                   %config_freq:link,      config_freq

  config_loop:
        ld8i                    %len,                %buf
        eq0                     %len
          jmp8 config_done
        ld8i                    %cmd,                %buf
        pack8                   %cmd,         1
        spi_wr                  %cmd,         1,                CS_START
        spi_wrm                 %buf,                %len,	CS_END
        add                     %buf,                %len
        jmp8                    config_loop
  config_done:
        end
.endfunc

.func sx127x_entry_irq
        .export sx127x_entry_irq
        .clobber %0, %5, %6, %7, %8, %9, %10, %12 
        call8                   %sx127x_check_irq:link,          sx127x_check_irq
        end
.endfunc

.func sx127x_check_irq
        .input %12 link
        .clobber %0 buffer, %5 tmp, %6 irq1 len, %7 irq2, %8, %9, %10, %12
        /* Update icount field */
        cst32                   %STATUS,         0,   0
        ld8e                    %STATUS,         %R_CTX_PV,      _offsetof(sx127x_private_s, icount, 1)
        spi_gpioget             SX127X_DIO0,     %tmp
        tst32s                  %tmp,            0
          jmp8                  __sx127x_process_irq
        ret                     %link
__sx127x_process_irq:
        /* Read irq status */
        cst8                    %tmp,            SX1276_REG_IRQFLAGS1
        pack32le                %tmp,            1,      3
        spi_swp                 %tmp,            %tmp,   3,      CS_PULSE
        unpack8                 %tmp,            3
        /* Set the transceiver in standby mode */
        cst8                    %sx127x_mode_set:mode,  SX1276_OPMODE_STANDBY
        call8                   %sx127x_mode_set:link,  sx127x_mode_set
        mov                     %tmp,            %irq2
        shi32l                  %tmp,            8
        or32                    %STATUS,         %tmp
        tst32s                  %irq2,           bitpos(SX1276_IRQFLAGS2_PACKETSENT)
          jmp8                  __irq_tx_flag
        tst32s                  %irq2,           bitpos(SX1276_IRQFLAGS2_PAYLOADREADY)
          jmp8                  __irq_rx_flag
        end
__irq_rx_flag:
        /* Retrieve first word from fifo which contains payload lenght */
        cst8                    %tmp,            SX1276_REG_FIFO
        pack16le                %tmp,            1,      2
        spi_swp                 %tmp,            %tmp,   2,      CS_PULSE
        unpack8                 %tmp,            2
        st8e                    %len,            %R_CTX_PV,      _offsetof(sx127x_private_s, size, 1)
       /* Try to allocate buffer */
        gaddr                   %tmp,            sx127x_alloc
        mov                     %0,              %R_CTX_PV
        ccall                   %tmp
        /* Rx allocation error */
        eq0                     %buffer
          jmp8                  __rx_alloc_error
        /* Read Fifo */
        ld8e                    %len,            %R_CTX_PV,      _offsetof(sx127x_private_s, size, 1)
        cst8                    %tmp,            SX1276_REG_FIFO
        pack8                   %tmp,            1
        spi_wr                  %tmp,            1,             CS_START
        spi_rdm                 %buffer,         %len,          CS_END
__irq_tx_flag:
        end
__rx_alloc_error:
        jmp8                    sx127x_error
.endfunc

.func sx127x_error
        .clobber %8, %9, %10, %12
        bit32s                  %STATUS,                STATUS_OTHER_ERR
        jmp8                    sx127x_entry_standby
.endfunc

.func sx127x_entry_standby
        .export sx127x_entry_standby
        .clobber %0 tmp, %8, %9, %10, %12
        cst8                    %sx127x_mode_set:mode,  SX1276_OPMODE_STANDBY
        call8                   %sx127x_mode_set:link,  sx127x_mode_set
        /* Clean irq status */
        cst32                   %tmp,            STATUS_INFO_MSK, 0
        and32                   %STATUS,         %tmp
        ld8e                    %tmp,            %R_CTX_PV,      _offsetof(sx127x_private_s, icount, 1)
        or32                    %STATUS,         %tmp
        end
.endfunc

.func config_freq
        .input %12 link
        .clobber %6 tmp, %7 data, %8 len
    /* Update frequency */
        mov                     %data,           %R_CTX_PV
        cst16                   %tmp,            _offsetof(sx127x_private_s, cfg.freq),  0
        add                     %data,           %tmp
        cst8                    %tmp,            SX1276_REG_FRFMSB | 0x80
        pack8                   %tmp,            1
        spi_wr                  %tmp,            1,              CS_START
        cst8                    %len,            3
        spi_wrm                 %data,           %len,           CS_END
        ret                     %link
.endfunc

.func sx127x_entry_cancel
        .export sx127x_entry_cancel
        .clobber %0, %5, %6, %7, %8, %9, %10, %11, %12
        /* Test if packet is being received */
        call8                   %test_rx_on_going:link, test_rx_on_going
        jmp8                    sx127x_entry_standby
.endfunc

.func sx127x_mode_set
        .input %8 mode, %12 link
        .clobber %9 tmp, %10 cfg
        cst8                    %tmp,            SX1276_REG_OPMODE | 0x80
        ld8e                    %cfg,            %R_CTX_PV,   _offsetof(sx127x_private_s, cfg.mode, 1)
        or32                    %cfg,            %mode
        pack8                   %tmp,            2
        spi_wr                  %tmp,            2,     CS_PULSE
        ret                     %link
.endfunc

.func sx127x_entry_rx
        .export sx127x_entry_rx
        .input %0 deadline, %1 lifetime, %2 cmd
        .clobber %0, %5, %6 tmp, %7 data, %8, %9, %10, %11, %12
    /* Set sync word size */
        mov                     %data,        %cmd
        cst8                    %tmp,         (SX1276_REG_SYNCCONFIG | 0x80)
        pack8	                %tmp,         2
        spi_wr                  %tmp,         2,      CS_PULSE
    /* Test if frequency must be changed */
        tst32s                  %cmd,         bitpos(CMD_FREQ_CHANGE)
          call8                 %config_freq:link,  config_freq
    /* Wait for deadline if any */
        spi_yield_deadline      %deadline
    /* Start RX */
        cst8                    %sx127x_mode_set:mode,  SX1276_OPMODE_RECEIVER
        call8                   %sx127x_mode_set:link,  sx127x_mode_set
    /* Stay in RX until lifetime is up */
        spi_yieldc_deadline     %lifetime
          jmp8                  __rx_timeout
    /* An interrupt has been raised */
        call8                   %sx127x_check_irq:link,  sx127x_check_irq
__rx_timeout:
        jmp8                    sx127x_entry_cancel
.endfunc

.func sx127x_entry_rx_cont
        .export sx127x_entry_rx_cont
        .input %0 cmd, %1 timeout
        .clobber %0 chan, %5, %6 tmp, %7 data, %8, %9, %10, %11, %12
    /* Set sync word size */
        mov                     %data,        %cmd
        cst8                    %tmp,         (SX1276_REG_SYNCCONFIG | 0x80)
        pack8	                %tmp,         2
        spi_wr                  %tmp,         2,      CS_PULSE
    /* Test if frequency must be changed */
        tst32s                  %cmd,         bitpos(CMD_FREQ_CHANGE)
          call8                 %config_freq:link,  config_freq
    /* Start RX */
        cst8                    %sx127x_mode_set:mode,  SX1276_OPMODE_RECEIVER
        call8                   %sx127x_mode_set:link,  sx127x_mode_set
    /* Test if channel scanning must be performed */
        tst32s                  %cmd,         bitpos(CMD_RX_SCANNING)
          jmp8                  __rx_hopping_loop
    /* Check preamble detecion before leaving */
        call8                   %test_rx_on_going:link, test_rx_on_going
        end
__rx_hopping_loop:
   /* Set channel scanning delay */
        spi_delay               %timeout
   /* Wait scanning delay */
        spi_yieldc
          jmp8                  __rx_check_status
        call8                   %sx127x_check_irq:link,  sx127x_check_irq
__rx_check_status:
   /* Test if packet is being received */
        call8                   %test_rx_on_going:link,  test_rx_on_going
   /* Check if a cancel is pending before scanning next channel */
        ld8e                    %tmp,            %R_CTX_PV,      _offsetof(sx127x_private_s, cancel, 1)
        tst32s                  %tmp,            0
          jmp8                    sx127x_entry_cancel
   /* Stop receiver */
        cst8                    %sx127x_mode_set:mode,  SX1276_OPMODE_STANDBY
        call8                   %sx127x_mode_set:link,  sx127x_mode_set
   /* Compute next frequency */
        gaddr                   %tmp,               sx127x_next_hopping_freq
        mov                     %0,                 %R_CTX_PV
        ccall                   %tmp
        call8                   %config_freq:link,  config_freq
   /* Restart Rx on next channel */
        cst8                    %sx127x_mode_set:mode,  SX1276_OPMODE_RECEIVER
        call8                   %sx127x_mode_set:link,  sx127x_mode_set
        jmp8                    __rx_hopping_loop
.endfunc

.func test_rx_on_going
        .input %11 link
        .clobber %0, %5, %6 tmp, %7, %8, %9, %10, %12
        spi_gpioget             SX127X_DIO4,  %tmp
   /* Test if a valid preamble has been received */
        tst32c                  %tmp,            0
          jmp8                  __no_rx_ongoing
   /* Receive is on-going */
        ld32e                   %tmp,         %R_CTX_PV,   _offsetof(sx127x_private_s, tbrs, 4)
        spi_yieldc_delay        %tmp
          jmp8                  __no_rx_ongoing
   /* A payload ready irq has been raised */
        call16                  %sx127x_check_irq:link,  sx127x_check_irq
__no_rx_ongoing:
        ret                     %link
.endfunc

.func process_tx_cmd
        .input %2 cmd
        .input %11 link
        .clobber %6 tmp, %7 data, %8, %12
        /* Power config */
        mov                     %data,        %cmd
        shi32r                  %data,        8
        cst8                    %tmp,         SX1276_REG_PACONFIG | 0x80
        pack8                   %tmp,         2
        spi_wr                  %tmp,         2,      CS_PULSE
        /* Change frequency is needed */
        tst32s                  %cmd,         bitpos(CMD_FREQ_CHANGE)
          call8                 %config_freq:link,  config_freq
        /* Set sync word size */
        mov                     %data,        %cmd
        cst8                    %tmp,         (SX1276_REG_SYNCCONFIG | 0x80)
        pack8	                %tmp,         2
        spi_wr                  %tmp,         2,      CS_PULSE
        ret                     %link
.endfunc

.func sx127x_read_rssi
        .input %12 link
        .clobber %6 tmp
        .output %7 data
        /* Read RSSI */
        cst8                    %tmp,            SX1276_REG_RSSIVALUE
        pack8                   %tmp,            2
        spi_swp                 %tmp,            %tmp,   2,      CS_PULSE
        unpack8                 %tmp,            2
        ret                     %link
.endfunc

.func sx127x_entry_tx_fair
        .export sx127x_entry_tx_fair
        .input %0 len
        .input %1 buffer
        .input %2 cmd
        .input %3 deadline
        .input %4 timeout
        .input %5 rssith
        .clobber %2 period, %3 mean, %5, %6 tmp, %7 data, %8, %9, %10, %11, %12
        /* Init TX */
        call8                   %process_tx_cmd:link,    process_tx_cmd
        /* Rssi period */
        ld32e                   %period,      %R_CTX_PV,   _offsetof(sx127x_private_s, delay_1ms, 4)
        shi32l                  %period,      1
        /* Wait deadline before TX */
        spi_yield_deadline      %deadline
        /* Test if timeout date is reached */
        spi_deadline            %timeout
        spi_elapsed
          jmp8                  __tx_fail
        /* Start RX */
        cst8                    %sx127x_mode_set:mode,  SX1276_OPMODE_RECEIVER
        call8                   %sx127x_mode_set:link,  sx127x_mode_set
__retry_tx_fair:
        spi_yield_delay         %period
        call8                   %sx127x_read_rssi:link,  sx127x_read_rssi
        mov                     %mean,        %data
        /* Wait before second measurement */
        spi_yield_delay         %period
        call8                   %sx127x_read_rssi:link,  sx127x_read_rssi
        add                     %mean,        %data
        lt                      %rssith,      %mean
        /* RSSI mean is less than RSSI threshold */ 
          jmp8                  sx127x_start_tx
        /* Test if timeout date is reached */
        spi_deadline            %timeout
        spi_elapsed
          jmp8                  __tx_fail
        jmp8                    __retry_tx_fair
__tx_fail:
        jmp16                   sx127x_entry_standby
.endfunc

.func sx127x_entry_tx
        .export sx127x_entry_tx
        .input %0 len
        .input %1 buffer
        .input %2 cmd
        .input %3 deadline
        .clobber %0, %5, %6 tmp, %7 data, %8, %9, %10, %11, %12
        call8                   %process_tx_cmd:link,    process_tx_cmd 
        /* Wait deadline before TX */
        spi_yield_deadline      %deadline
        jmp8                    sx127x_start_tx
.endfunc

.func sx127x_start_tx
        .input %0 len
        .input %1 buffer
        .clobber %0, %5, %6 tmp, %7 data, %8, %9, %10, %12
        /* Start TX */
        cst8                    %sx127x_mode_set:mode,  SX1276_OPMODE_TRANSMITTER
        call8                   %sx127x_mode_set:link,  sx127x_mode_set
        /* Write Fifo */
        cst8                    %tmp,         SX1276_REG_FIFO | 0x80
        mov                     %data,        %len
        pack8                   %tmp,         2
        spi_wr                  %tmp,         2,             CS_START
        spi_wrm                 %buffer,      %len,          CS_END
        /* Transmit is on-going */
        ld32e                   %tmp,         %R_CTX_PV,   _offsetof(sx127x_private_s, tbrs, 4)
        spi_yieldc_delay        %tmp
          jmp16                 sx127x_error
        call16                  %sx127x_check_irq:link,    sx127x_check_irq
        jmp16                   sx127x_error
.endfunc

#if defined(CONFIG_DRIVER_RFPACKET_SX127X_DEBUG)
.func sx127x_entry_dump_cfg
        .clobber %6 tmp, %7 data, %8, %9, %10, %12
        cst8                    %tmp,         SX1276_REG_OPMODE
        pack8                   %tmp,         1
        spi_wr                  %tmp,         1,                CS_START
        ld32e                   %tmp,         %R_CTX_PV,        _offsetof(sx127x_private_s, dump, 4)
        cst8                    %data,        112
        spi_rdm                 %tmp,         %data,          CS_END
        end
.endfunc
#endif
