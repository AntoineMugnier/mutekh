/*
    This file is part of MutekH.

    MutekH is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation; version 2.1 of the
    License.

    MutekH is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with MutekH; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
    02110-1301 USA.

    Copyright (c) 2016 Sebastien Cerdan <sebcerdan@gmail.com>

*/

#include <device/class/spi.h>
#include "max3420_spi.h"

        .custom spi
        .name max3420_bytecode

#define MAX3420_GET_TRANSFER(N)                       \
        lde                     %R_TRANSFER,     %R_CTX_PV, _offsetof(max3420_usbdev_private_s, tr) + ((N) * _SIZEOF_PTR) ;\
        ld8e                    %R_ARG4,         %R_CTX_PV, _offsetof(max3420_usbdev_private_s, mps) + (N)

#define MAX3420_WRITE(REG, A, B)                \
	cst16			%REG,            (((B) << 8) | (A)),  0 ;\
	pack16le		%REG,    	 1                      ;\
        spi_wr                  %REG,            2,	CS_PULSE


max3420_disconnect:
        /* Hide device to host */
        MAX3420_WRITE(R_TMP0, MAX3420_USBCTRL | 2, 0x0)
        ret                     %R_LINK

max3420_entry_connect:
        .export max3420_entry_connect
        /* Show device to host */
        MAX3420_WRITE(R_TMP0, MAX3420_USBCTRL | 2, 0x48),
        jmp8                    max3420_entry_irq

max3420_entry_disconnect:
        .export max3420_entry_disconnect
        call8                   %R_LINK,          max3420_disconnect
        cst8                    %R_ARG3,          MAX3420_DIS_MASK
        jmp32                   max3420_set_done

max3420_entry_unconfigure:
        .export max3420_entry_unconfigure
        call8                   %R_LINK,          max3420_disable_endpoints
        cst8                    %R_ARG3,          MAX3420_CFG_MASK
        jmp32                   max3420_set_done

max3420_disable_endpoints:
        MAX3420_WRITE(R_TMP0, MAX3420_CLRTOGS | 2, 0xFC)
        MAX3420_WRITE(R_TMP0, MAX3420_EPIEN | 2, 0x0)
        MAX3420_WRITE(R_TMP0, MAX3420_EPIRQ | 2, 0x3F)
        ret                     %R_LINK

max3420_process_usbirq:
        /* R_TMP1: Interrupt flags */
        /* Clean and reenable interrupts in case of bus reset */
	cst8			%R_TMP0,	 MAX3420_USBIRQ | 2
	cst8			%R_TMP2,	 MAX3420_USBIRQ_MASK
	pack8			%R_TMP0,         3
        spi_wr                  %R_TMP0,         3,	CS_PULSE
        ld8e                    %R_TMP0,         %R_CTX_PV,     _offsetof(max3420_usbdev_private_s, event, 1)
        or32                    %R_TMP0,         %R_TMP1
        st8e                    %R_TMP0,         %R_CTX_PV,     _offsetof(max3420_usbdev_private_s, event, 1)
        end

max3420_entry_reset:
        .export max3420_entry_reset
        /* Reset pin */
        ld32e                   %R_TMP1,         %R_CTX_PV,   _offsetof(max3420_usbdev_private_s, bt, 4)
        cst8                    %R_TMP0,         3
        shl32                   %R_TMP1,         %R_TMP0
        cst8                    %R_TMP0,         0
        spi_gpioset             MAX3420_IO_RST,  %R_TMP0
        spi_yield_delay         %R_TMP1,
        cst8                    %R_TMP0,         1
        spi_gpioset             MAX3420_IO_RST,  %R_TMP0
        /* Check operate pin */
        cst8                    %R_TMP2,         MAX3420_CHECK_RETRIES
poll_gpx_loop:
        spi_yield_delay         %R_TMP1
        spi_gpioget             MAX3420_IO_GPX,  %R_TMP0
        tst32s                  %R_TMP0,         0
          jmp8                  gpx_poll_done
        loop                    %R_TMP2,         poll_gpx_loop
        /* timeout */
        abort
gpx_poll_done:
        /* Set irq level sensitive, spi full-duplex */
        MAX3420_WRITE(R_TMP2, MAX3420_PINCTRL | 2, 0x18)
        /* Read device id */
        cst8                    %R_TMP0,         MAX3420_REVISION
	pack16le		%R_TMP0,         1
        spi_swp                 %R_TMP0,         %R_TMP0,         2,	CS_PULSE
	unpack8			%R_TMP0,         2
        cst8                    %R_TMP0,         MAX3420_CURRENT_REVISION
        neq                     %R_TMP0,         %R_TMP1
          abort
poll_osc:
        spi_yield_delay         %R_TMP1
        cst8                    %R_TMP2,         MAX3420_USBIRQ
	pack16le		%R_TMP0,         1
        spi_swp                 %R_TMP2,         %R_TMP2,         2,	CS_PULSE
	unpack8			%R_TMP2,         2
        tst32c                  %R_TMP3,         0
          jmp8                  poll_osc
        /* Disconnect device */
        call8                   %R_LINK,         max3420_disconnect
        /* Disable all endpoint and clean endpoint interrupts */
        call8                   %R_LINK,         max3420_disable_endpoints
        /* Enable interrupt */
        MAX3420_WRITE(R_TMP0, MAX3420_USBIEN | 2, MAX3420_USBIRQ_MASK)
        MAX3420_WRITE(R_TMP0, MAX3420_CPUCTRL | 2, 1)
        /* Initialisation done */
        cst8                    %R_ARG3,         MAX3420_INIT_MASK
        jmp32                   max3420_set_done

max3420_entry_irq:
        .export max3420_entry_irq
        ld16e                   %R_ICOUNT,       %R_CTX_PV,     _offsetof(max3420_usbdev_private_s, icount, 2)
        spi_gpioget             MAX3420_IO_IRQ,  %R_TMP0
        tst32c                  %R_TMP0,         0
          jmp8                    max3420_process_irq
        jmp32                   max3420_entry_epn
max3420_process_irq:
        /* Read IRQ and IEN register */
        cst8                    %R_TMP0,         MAX3420_USBIRQ
	pack32le		%R_TMP0,         1
        spi_swp                 %R_TMP0,         %R_TMP0,         3,	CS_PULSE
	unpack8			%R_TMP0,         3
        and32                   %R_TMP1,         %R_TMP2
        neq0                    %R_TMP1
          jmp8                  max3420_process_usbirq
        cst8                    %R_TMP0,         MAX3420_EPIRQ
	pack32le		%R_TMP0,         1
        spi_swp                 %R_TMP0,         %R_TMP0,         3,	CS_PULSE
	unpack8			%R_TMP0,         3
        and32                   %R_TMP1,         %R_TMP2
        eq0                     %R_TMP1
          end
        tst32s                  %R_TMP1,         bitpos(MAX3420_IRQ_SETUP)
          jmp8                    max3420_setup_irq
        tst32s                  %R_TMP1,         bitpos(MAX3420_IRQ_IN0)
          jmp8                    max3420_entry_data_in_0_irq
        tst32s                  %R_TMP1,         bitpos(MAX3420_IRQ_OUT0)
          jmp8                    max3420_data_out_0_irq
        tst32s                  %R_TMP1,         bitpos(MAX3420_IRQ_OUT1)
          jmp8                    max3420_data_out_1_irq
        tst32s                  %R_TMP1,         bitpos(MAX3420_IRQ_IN2)
          jmp8                    max3420_entry_data_in_2_irq
        tst32s                  %R_TMP1,         bitpos(MAX3420_IRQ_IN3)
          jmp8                    max3420_entry_data_in_3_irq
        abort

/*-----------------------------------------------------------------------------*/

max3420_setup_irq:
        cst8                    %R_ARG2,         MAX3420_IRQ_SETUP
        call32                  %R_LINK,         max3420_disable_irq
        jmp8                    max3420_process_setup

max3420_entry_data_in_0_irq:
        MAX3420_GET_TRANSFER(0)
        cst8                    %R_ARG0,         MAX3420_EP0FIFO
        cst8                    %R_ARG1,         MAX3420_EP0BC
        cst8                    %R_ARG2,         MAX3420_IRQ_IN0
        cst8                    %R_ARG3,         MAX3420_EP0_MASK
        jmp8                    max3420_data_in_irq

max3420_data_out_0_irq:
        MAX3420_GET_TRANSFER(0)
        cst8                    %R_ARG0,         MAX3420_EP0FIFO
        cst8                    %R_ARG1,         MAX3420_EP0BC
        cst8                    %R_ARG2,         MAX3420_IRQ_OUT0
        cst8                    %R_ARG3,         MAX3420_EP0_MASK
        jmp8                    max3420_data_out_irq

max3420_data_out_1_irq:
        MAX3420_GET_TRANSFER(1)
        cst8                    %R_ARG0,         MAX3420_EP1OUTFIFO
        cst8                    %R_ARG1,         MAX3420_EP1OUTBC
        cst8                    %R_ARG2,         MAX3420_IRQ_OUT1
        cst8                    %R_ARG3,         MAX3420_EP1_MASK
        jmp8                    max3420_data_out_irq

max3420_entry_data_in_2_irq:
        MAX3420_GET_TRANSFER(2)
        cst8                    %R_ARG0,         MAX3420_EP2INFIFO
        cst8                    %R_ARG1,         MAX3420_EP2INBC
        cst8                    %R_ARG2,         MAX3420_IRQ_IN2
        cst8                    %R_ARG3,         MAX3420_EP2_MASK
        jmp8                    max3420_data_in_irq

max3420_entry_data_in_3_irq:
        MAX3420_GET_TRANSFER(3)
        cst8                    %R_ARG0,         MAX3420_EP3INFIFO
        cst8                    %R_ARG1,         MAX3420_EP3INBC
        cst8                    %R_ARG2,         MAX3420_IRQ_IN3
        cst8                    %R_ARG3,         MAX3420_EP3_MASK
        jmp8                    max3420_data_in_irq

/*-----------------------------------------------------------------------------*/

max3420_process_setup:
        /*R_ARG2: IRQ mask */
        MAX3420_GET_TRANSFER(0)  
        eq0                     %R_TRANSFER
          jmp8                    max3420_entry_irq
        call8                   %R_LINK,         max3420_get_transfer_info
        cst8                    %R_TMP0,         MAX3420_SUDFIFO
	pack8			%R_TMP0,         1
        spi_wr                  %R_TMP0,         1,	CS_START
        cst8                    %R_TMP0,         8
        spi_rdm                 %R_BUFF,         %R_TMP0,	CS_END
        call8                   %R_LINK,         max3420_clean_irq
        cst8                    %R_ARG3,         MAX3420_EP0_MASK
        jmp8                    max3420_set_done

max3420_data_in_irq:
        /*R_ARG2: IRQ mask */
        /*R_ARG3: Done mask */
        call32                  %R_LINK,         max3420_disable_irq
        eq0                     %R_TRANSFER
          jmp8                    max3420_entry_irq
        ld32e                   %R_SIZE,         %R_TRANSFER,   _offsetof(dev_usbdev_request_s, size, 4)
        eq0                     %R_SIZE
          jmp8                    max3420_set_done
        ld8e                    %R_TMP0,         %R_TRANSFER,   _offsetof(dev_usbdev_request_s, type, 1)
        cst8                    %R_TMP1,         _const(DEV_USBDEV_PARTIAL_DATA_IN)
        eq                      %R_TMP0,         %R_TMP1
          jmp8                    max3420_set_done
        jmp8                    max3420_data_in

max3420_data_out_irq:
        /*R_ARG2: Irq mask */
        call32                  %R_LINK,         max3420_disable_irq
        neq0                    %R_TRANSFER
          jmp8                    max3420_data_out
        jmp8                    max3420_entry_irq

/*-----------------------------------------------------------------------------*/

max3420_get_transfer_info:
        lde                     %R_BUFF,         %R_TRANSFER,   _offsetof(dev_usbdev_request_s, data)
        ld32e                   %R_SIZE,         %R_TRANSFER,   _offsetof(dev_usbdev_request_s, size, 4)
        ret                     %R_LINK

max3420_set_done:
        /* R_ARG3: Mask of done operation */
        ld8e                    %R_TMP0,         %R_CTX_PV,     _offsetof(max3420_usbdev_private_s, done, 1)
        or32                    %R_TMP0,         %R_ARG3
        st8e                    %R_TMP0,         %R_CTX_PV,     _offsetof(max3420_usbdev_private_s, done, 1)
        /* Check interrupt before leaving */
        jmp32                   max3420_entry_irq

max3420_clean_irq:
        /*R_ARG2: interrupt to clean */
        mov                     %R_TMP1,         %R_ARG2
        cst8                    %R_TMP0,         MAX3420_EPIRQ | 2
	pack8			%R_TMP0,         2
        spi_wr                  %R_TMP0,         2,	CS_PULSE
        ret                     %R_LINK

max3420_clean_pending:
        /* R_ARG3: Mask of done operation */
        mov                     %R_TMP0,         %R_ARG3
        not32                   %R_TMP0
        ld8e                    %R_TMP1,         %R_CTX_PV,   _offsetof(max3420_usbdev_private_s, pending, 1)
        and32                   %R_TMP1,         %R_TMP0
        st8e                    %R_TMP1,         %R_CTX_PV,   _offsetof(max3420_usbdev_private_s, pending, 1)
        ret                     %R_LINK

/*-----------------------------------------------------------------------------*/

max3420_data_in:
        /*R_ARG0: FIFO address */
        /*R_ARG1: BC address */
        /*R_ARG2: IRQ mask */
        /*R_ARG3: Operation mask */
        /*R_ARG4: Max Packet size */
        call8                   %R_LINK,         max3420_clean_pending
        call8                   %R_LINK,         max3420_get_transfer_info
        call8                   %R_LINK,         max3420_write_fifo       
        call32                  %R_LINK,         max3420_update_transfer 
        jmp32                   max3420_enable_irq                   

max3420_data_out:
        /*R_ARG0: FIFO address */
        /*R_ARG1: BC address */
        /*R_ARG3: Operation mask */
        /*R_ARG4: Max Packet size */
        call8                   %R_LINK,         max3420_get_transfer_info
        call32                  %R_LINK,         max3420_read_fifo
        call32                  %R_LINK,         max3420_update_transfer
        call8                   %R_LINK,         max3420_clean_irq
        /*R_SIZE: Transferred count */
        mov                     %R_TMP0,         %R_ARG4,
        cst8                    %R_TMP1,         1
        sub                     %R_TMP0,         %R_TMP1   
        and32                   %R_TMP0,         %R_SIZE
        neq0                    %R_TMP0
          jmp8                    max3420_set_done
        ld32e                   %R_SIZE,         %R_TRANSFER,   _offsetof(dev_usbdev_request_s, size, 4)
        eq0                     %R_SIZE
          jmp8                    max3420_set_done
        ld8e                    %R_TMP0,         %R_TRANSFER,   _offsetof(dev_usbdev_request_s, type, 1)
        cst8                    %R_TMP1,         _const(DEV_USBDEV_PARTIAL_DATA_OUT)
        eq                      %R_TMP0,         %R_TMP1
          jmp8                    max3420_set_done
        cst8                    %R_TMP0,         MAX3420_EP0_MASK
        neq                     %R_TMP0,         %R_ARG3
          jmp8                    max3420_try_data_out
        ld16e                   %R_TMP0,         %R_TRANSFER,     _offsetof(dev_usbdev_request_s, rem, 2)
        eq0                     %R_TMP0
          jmp8                    max3420_set_done
        jmp8                    max3420_try_data_out

/*-----------------------------------------------------------------------------*/

max3420_entry_epn:
        .export max3420_entry_epn
        ld8e                    %R_TMP0,         %R_CTX_PV,   _offsetof(max3420_usbdev_private_s, pending, 1)
        tst32s                  %R_TMP0,         bitpos(MAX3420_EP1_MASK)
          jmp8                    max3420_entry_data_out_1
        tst32s                  %R_TMP0,         bitpos(MAX3420_EP2_MASK)
          jmp8                    max3420_entry_data_in_2
        tst32s                  %R_TMP0,         bitpos(MAX3420_EP3_MASK)
          jmp8                    max3420_entry_data_in_3
        end

max3420_entry_setup:
        .export max3420_entry_setup
        cst8                    %R_ARG2,         MAX3420_IRQ_SETUP
        /* Read EPIRQ register */
        cst8                    %R_TMP0,         MAX3420_EPIRQ
	pack16le		%R_TMP0,         1
        spi_swp                 %R_TMP0,         %R_TMP0,         2,	CS_PULSE
	unpack8			%R_TMP0,         2
        tst32s                  %R_TMP1,         bitpos(MAX3420_IRQ_SETUP)
          jmp8                    max3420_process_setup
        jmp8                    max3420_enable_irq

max3420_entry_data_out_0:
        .export max3420_entry_data_out_0
        MAX3420_GET_TRANSFER(0)
        cst8                    %R_ARG0,         MAX3420_EP0FIFO
        cst8                    %R_ARG1,         MAX3420_EP0BC
        cst8                    %R_ARG2,         MAX3420_IRQ_OUT0
        cst8                    %R_ARG3,         MAX3420_EP0_MASK
        cst8                    %R_ARG3,         MAX3420_EP0_MASK
        jmp8                    max3420_try_data_out

max3420_entry_data_in_0:
        .export max3420_entry_data_in_0
        MAX3420_GET_TRANSFER(0)    
        cst8                    %R_ARG0,         MAX3420_EP0FIFO
        cst8                    %R_ARG1,         MAX3420_EP0BC
        cst8                    %R_ARG2,         MAX3420_IRQ_IN0
        cst8                    %R_ARG3,         MAX3420_EP0_MASK
        jmp8                    max3420_data_in  

max3420_entry_data_out_1:
        .export max3420_entry_data_out_1
        MAX3420_GET_TRANSFER(1)
        cst8                    %R_ARG0,         MAX3420_EP1OUTFIFO
        cst8                    %R_ARG1,         MAX3420_EP1OUTBC
        cst8                    %R_ARG2,         MAX3420_IRQ_OUT1
        cst8                    %R_ARG3,         MAX3420_EP1_MASK
        jmp8                    max3420_try_data_out

max3420_entry_data_in_2:
        .export max3420_entry_data_in_2
        MAX3420_GET_TRANSFER(2)    
        cst8                    %R_ARG0,         MAX3420_EP2INFIFO
        cst8                    %R_ARG1,         MAX3420_EP2INBC
        cst8                    %R_ARG2,         MAX3420_IRQ_IN2
        cst8                    %R_ARG3,         MAX3420_EP2_MASK
        jmp8                    max3420_data_in 

max3420_entry_data_in_3:
        .export max3420_entry_data_in_3
        MAX3420_GET_TRANSFER(3)    
        cst8                    %R_ARG0,         MAX3420_EP3INFIFO
        cst8                    %R_ARG1,         MAX3420_EP3INBC
        cst8                    %R_ARG2,         MAX3420_IRQ_IN3
        cst8                    %R_ARG3,         MAX3420_EP3_MASK
        jmp8                    max3420_data_in  

max3420_entry_set_address:
        /* R_ARG0: new address */
        .export max3420_entry_set_address
        mov                     %R_TMP1,         %R_ARG0
        cst8                    %R_TMP0,         MAX3420_FNADDR | 2
	pack8			%R_TMP0,	 2
        spi_wr                  %R_TMP0,         2,	CS_PULSE
        cst8                    %R_ARG3,         MAX3420_CFG_MASK
        jmp32                   max3420_set_done

max3420_entry_status:
        /* R_ARG0: status mask */
        .export max3420_entry_status
        mov                     %R_TMP1,         %R_ARG0
        cst8                    %R_TMP0,         MAX3420_EPSTALLS | 2
	pack8			%R_TMP0,	 2
        spi_wr                  %R_TMP0,         2,	CS_PULSE
        cst8                    %R_ARG3,         MAX3420_EP0_MASK
        jmp32                   max3420_set_done

/*---------------------------------------------------------------------------*/

max3420_try_data_out:
        /*R_ARG0: FIFO address */
        /*R_ARG1: Byte Count address */
        /*R_ARG2: Irq mask */
        call8                   %R_LINK,         max3420_clean_pending
        cst8                    %R_TMP0,         MAX3420_EPIRQ
	pack16le		%R_TMP0,         1
        spi_swp                 %R_TMP0,         %R_TMP0,         2,	CS_PULSE
	unpack8			%R_TMP0,         2
        and32                   %R_TMP1,         %R_ARG2
        neq0                    %R_TMP1
          jmp8                    max3420_data_out
        jmp8                    max3420_enable_irq

/* -------------------------------------------------------------------------------*/

max3420_write_fifo:
        /* R_ARG0: FIFO address */
        /* R_ARG1: BC address */
        /* R_ARG4: MPS */
        lteq                    %R_ARG4,         %R_SIZE
        mov                     %R_SIZE,         %R_ARG4
        cst32                   %R_TMP0,         MAX3420_FIFO_SIZE, 0
        lteq                    %R_TMP0,         %R_SIZE
        mov                     %R_SIZE,         %R_TMP0
        /* Write fifo */
        cst8                    %R_TMP0,         2
        or32                    %R_ARG0,         %R_TMP0
	pack8			%R_ARG0,	 1
        spi_wr                  %R_ARG0,         1,	CS_START
        spi_wrm                 %R_BUFF,         %R_SIZE,	CS_END
        /* Set byte count */
        cst8                    %R_TMP0,         2
        or32                    %R_TMP0,         %R_ARG1
        mov                     %R_TMP1,         %R_SIZE
	pack8			%R_TMP0,	 2
        spi_wr                  %R_TMP0,         2,	CS_PULSE
        ret                     %R_LINK

max3420_read_fifo:
        /* R_SIZE: Buffer size */
        /* R_ARG0: FIFO address */
        /* R_ARG1: BC register address */
        mov                     %R_TMP0,         %R_ARG1        
	pack16le		%R_TMP0,	 1
        spi_swp                 %R_TMP0,         %R_TMP0,         2,	CS_PULSE
	unpack8			%R_TMP0,         2
        lteq                    %R_TMP1,         %R_SIZE
        mov                     %R_SIZE,         %R_TMP1
        /* Read fifo */
	pack8			%R_ARG0,	 1
        spi_wr                  %R_ARG0,         1,	CS_START
        spi_rdm                 %R_BUFF,         %R_SIZE,	CS_END
        ret                     %R_LINK

max3420_update_transfer:
        /* R_SIZE: transferred size */
        /* R_ARG3: Endpoint mask */
        add                     %R_BUFF,         %R_SIZE
        /* Update transfer data pointer */
        ste                     %R_BUFF,         %R_TRANSFER,     _offsetof(dev_usbdev_request_s, data)
        /* Update transfer size */
        ld32e                   %R_TMP0,         %R_TRANSFER,     _offsetof(dev_usbdev_request_s, size, 4)
        sub                     %R_TMP0,         %R_SIZE
        st32e                   %R_TMP0,         %R_TRANSFER,     _offsetof(dev_usbdev_request_s, size, 4)
        /* Update remaining field for EP0 */
        cst8                    %R_TMP0,         MAX3420_EP0_MASK
        neq                     %R_TMP0,         %R_ARG3
          ret                     %R_LINK
        ld16e                   %R_TMP0,         %R_TRANSFER,     _offsetof(dev_usbdev_request_s, rem, 2)
        sub                     %R_TMP0,         %R_SIZE
        st16e                   %R_TMP0,         %R_TRANSFER,     _offsetof(dev_usbdev_request_s, rem, 2)
        ret                     %R_LINK

/*---------------------------------------------------------------------------*/

max3420_enable_irq:
        /*R_ARG2: interrupt to enable */
        cst8                    %R_TMP0,         MAX3420_EPIEN
	pack16le		%R_TMP0,         1
        spi_swp                 %R_TMP0,         %R_TMP0,     2,	CS_PULSE
	unpack8			%R_TMP0,         2
        cst8                    %R_TMP0,         MAX3420_EPIEN | 2
        or32                    %R_TMP1,         %R_ARG2
	pack8			%R_TMP0,	 2
        spi_wr                  %R_TMP0,         2,	CS_PULSE
        jmp32                   max3420_entry_irq

max3420_disable_irq:
        /*R_ARG2: interrupt to disable */
        cst8                    %R_TMP0,         MAX3420_EPIEN
	pack16le		%R_TMP0,         1
        spi_swp                 %R_TMP0,         %R_TMP0,     2,	CS_PULSE
	unpack8			%R_TMP0,         2
        cst8                    %R_TMP0,         MAX3420_EPIEN | 2
        xor32                   %R_TMP1,         %R_ARG2
	pack8			%R_TMP0,	 2
        spi_wr                  %R_TMP0,         2,	CS_PULSE
        ret                     %R_LINK

/* -------------------------------------------------------------------------------*/

