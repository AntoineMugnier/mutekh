/*
    -*- asm -*-

    This file is part of MutekH.

    MutekH is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation; version 2.1 of the
    License.

    MutekH is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this program.  If not, see
    <http://www.gnu.org/licenses/>.

    Copyright (c) 2016, Nicolas Pouillon, <nipo@ssji.net>
*/

#include "hd44780_defs.h"
    
.custom hd44780
.name hd44780_io
    
#if !defined(CONFIG_DRIVER_HD44780_4BIT)
.func hd44780_byte_send
    .input %0 cmd, %14 link

    data %0
    e 1
    wait 5
    e 0
    wait 5
    
    ret %link
.endfunc
#else // 4BIT
.func hd44780_nibble_send
    .input %1 nibble, %15 link
#if defined(CONFIG_DRIVER_HD44780_4BIT_SWAPPED)
    .clobber %1
    .clobber %2 tmp

    cst8 %tmp, 0xf
    and32 %nibble, %tmp
    cst16 %tmp, 0x1111, 0
    mul32 %nibble, %tmp
    cst16 %tmp, 0x8421, 0
    and32 %nibble, %tmp
    cst32 %tmp, 0x41041, 0
    mul32 %nibble, %tmp
    shi32r %nibble, 15
#endif
    data %nibble

    e 1
    wait 5
    e 0
    wait 5
    ret %link
.endfunc

.func hd44780_byte_send
    .input %0 byte, %14 link
    .clobber %1, %15
#if defined(CONFIG_DRIVER_HD44780_4BIT_SWAPPED)
    .clobber %2
#endif
    
    mov %hd44780_nibble_send:nibble, %byte
    shi32r %hd44780_nibble_send:nibble, 4
    call8 %hd44780_nibble_send:link, hd44780_nibble_send
    mov %hd44780_nibble_send:nibble, %byte
    call8 %hd44780_nibble_send:link, hd44780_nibble_send
    
    ret %link
.endfunc
#endif

.func position_update
    .input %6 line, %7 column, %13 link
    .clobber %0, %1, %14
#if defined(CONFIG_DRIVER_HD44780_4BIT)
#if defined(CONFIG_DRIVER_HD44780_4BIT_SWAPPED)
    .clobber %2
#endif
    .clobber %15
#endif    

    rs 0
    cst8 %0, CMD_DDRAM_ADDR
    or32 %0, %column
    tst32s %line, 0
     bit32s %0, 6
    tst32s %line, 1
     add8 %0, 20
    call8 %hd44780_byte_send:link, hd44780_byte_send
    wait 30
    rs 1

    ret %link
.endfunc
    
.func hd44780_start
    .export hd44780_start
    .input %12
    .clobber %0, %1, %3 end, %4 arg0, %5 arg1, %6 line, %7 column, %14, %13
#if defined(CONFIG_DRIVER_HD44780_4BIT)
#if defined(CONFIG_DRIVER_HD44780_4BIT_SWAPPED)
    .clobber %2
#endif
    .clobber %15
#endif    

    cst8 %line, 0
    cst8 %column, 0

    e 0
    rw 1
    rs 1
    rw 0
    rs 0
#if defined(CONFIG_DRIVER_HD44780_4BIT)
    wait 10
    cst8 %hd44780_nibble_send:nibble, (CMD_FUNCTION | CMD_FUNCTION_8BIT) >> 4
    call8 %hd44780_nibble_send:link, hd44780_nibble_send
    wait 1600
    cst8 %hd44780_nibble_send:nibble, (CMD_FUNCTION | CMD_FUNCTION_8BIT) >> 4
    call8 %hd44780_nibble_send:link, hd44780_nibble_send
    wait 20
    cst8 %hd44780_nibble_send:nibble, (CMD_FUNCTION | CMD_FUNCTION_8BIT) >> 4
    call8 %hd44780_nibble_send:link, hd44780_nibble_send
    cst8 %hd44780_nibble_send:nibble, (CMD_FUNCTION | CMD_FUNCTION_4BIT) >> 4
    call8 %hd44780_nibble_send:link, hd44780_nibble_send
    cst8 %0, CMD_FUNCTION | CMD_FUNCTION_4BIT
#else
    cst8 %0, CMD_FUNCTION | CMD_FUNCTION_8BIT
#endif
    or32 %0, %12
    call8 %hd44780_byte_send:link, hd44780_byte_send
    cst8 %0, CMD_ENABLE
    call8 %hd44780_byte_send:link, hd44780_byte_send
    cst8 %0, CMD_CLEAR
    call8 %hd44780_byte_send:link, hd44780_byte_send
    wait 400
    cst8 %0, CMD_ENTRY | CMD_ENTRY_INC
    call8 %hd44780_byte_send:link, hd44780_byte_send
    cst8 %0, CMD_ENABLE | CMD_ENABLE_DISPLAY
    call8 %hd44780_byte_send:link, hd44780_byte_send

    rs 1
again:
    next %0
    cst8 %1, 0x0a
    eq %0, %1
     jmp8 newline
    cst8 %1, 0x1b
    neq %0, %1
     jmp8 character
    next %0
    cst8 %1, '['
    neq %0, %1
     jmp8 again
    cst8 %arg0, 0
    cst8 %arg1, 0
ansi:
    next %0
    cst8 %1, 0x30 // 0
    lt %0, %1
    jmp8 ansi_not_digit
    cst8 %1, 0x39 // 9
    lt %1, %0
    jmp8 ansi_not_digit
    add8 %0, -48 // 0
    cst8 %1, 10
    mul32 %arg0, %1
    add %arg0, %0
    jmp8 ansi
ansi_not_digit:
    cst8 %1, 0x3b // ;
    neq %0, %1
     jmp8 not_semicolon
    mov %arg1, %arg0
    cst8 %arg0, 0
    jmp8 ansi
not_semicolon:
    cst8 %1, 0x48 // H
    eq %0, %1
     jmp8 ansi_move
    cst8 %1, 0x66 // f
    eq %0, %1
     jmp8 ansi_move
    cst8 %1, 0x4a // J
    eq %0, %1
     jmp8 ansi_clear_screen
    cst8 %1, 0x4b // K
    eq %0, %1
     jmp8 ansi_clear_line
    jmp8 again

ansi_move:
    eq0 %arg1
     jmp8 no_line
    mov %line, %arg1
    add8 %line, -1
no_line:
    eq0 %arg0
     jmp8 no_column
    mov %column, %arg0
    add8 %column, -1
no_column:
    call8 %position_update:link, position_update
    jmp8 again

ansi_clear_screen:
    rs 0
    cst8 %0, CMD_CLEAR
    call8 %hd44780_byte_send:link, hd44780_byte_send
    wait 410
    rs 1
    jmp8 again

ansi_clear_line:
    mov %3, %column
clear_line_next:
    cst8 %0, 20
    lteq %0, %3
     jmp8 reposition
    cst8 %0, 0x20
    call8 %hd44780_byte_send:link, hd44780_byte_send
    add8 %3, 1
    jmp8 clear_line_next
    
newline:
    add8 %line, 1
    extz %line, 1
    cst8 %column, 0
reposition:
    call8 %position_update:link, position_update
    jmp8 again
    
character:
    cst8 %1, 20
    lteq %1, %column
     jmp8 again
    call8 %hd44780_byte_send:link, hd44780_byte_send
    add8 %column, 1
    wait 10
    jmp8 again
.endfunc
