/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs -I micore2.bf                                                \
     -O /home/nipo/projects/mutekh/drivers/nfc/micore2/micore2_regs.h
*/

#ifndef _MICORE2_BFGEN_DEFS_
#define _MICORE2_BFGEN_DEFS_

/** Starts and stops command execution @multiple */
#define MICORE2_COMMAND_ADDR                         0x00000001
/** Activates a command according to the Command Code. Reading this register
   shows which command is currently executed. @multiple */
  #define MICORE2_COMMAND_COMMAND(v)               ((MICORE2_COMMAND_COMMAND_##v) << 0)
  #define MICORE2_COMMAND_COMMAND_SET(x, v)        do { (x) = (((x) & ~0xf) | ((MICORE2_COMMAND_COMMAND_##v) << 0)); } while(0)
  #define MICORE2_COMMAND_COMMAND_GET(x)           (((x) >> 0) & 0xf)
/** No action, cancels current command execution */
    #define MICORE2_COMMAND_COMMAND_IDLE             0x00000000
/** Configures the chip for FeliCa, MIFARE and NFCIP-1 communication */
    #define MICORE2_COMMAND_COMMAND_CONFIGURE        0x00000001
/** Generates a 10-byte random ID number */
    #define MICORE2_COMMAND_COMMAND_GENERATERANDOMID 0x00000002
/** Activates the CRC coprocessor or performs a self test */
    #define MICORE2_COMMAND_COMMAND_CALCCRC          0x00000003
/** Transmits data from the FIFO buffer */
    #define MICORE2_COMMAND_COMMAND_TRANSMIT         0x00000004
/** No command change, can be used to modify the CommandReg register bits without affecting the command, for example, the PowerDown bit */
    #define MICORE2_COMMAND_COMMAND_NOCMDCHANGE      0x00000007
/** Activates the receiver circuits */
    #define MICORE2_COMMAND_COMMAND_RECEIVE          0x00000008
/** Transmits data from FIFO buffer to antenna and automatically activates the receiver after transmission */
    #define MICORE2_COMMAND_COMMAND_TRANSCEIVE       0x0000000c
/** Handles FeliCa polling (Card Operation mode only) and MIFARE anticollision (Card Operation mode only) */
    #define MICORE2_COMMAND_COMMAND_AUTOCOLL         0x0000000d
/** Performs the MIFARE standard authentication as a reader */
    #define MICORE2_COMMAND_COMMAND_MFAUTHENT        0x0000000e
/** Resets the chip */
    #define MICORE2_COMMAND_COMMAND_SOFTRESET        0x0000000f
/** If set, Soft Power-down mode is entered. If cleared, the chip starts the wake
   up procedure. During this procedure this bit shows a 1 until chip is ready for
   operations. @multiple */
  #define MICORE2_COMMAND_POWERDOWN                0x10
/** If set, the analog part of the receiver is switched off. @multiple */
  #define MICORE2_COMMAND_RCVOFF                   0x20

/** Controls bits to enable and disable the passing of Interrupt Requests
   @multiple */
#define MICORE2_COMMIEN_ADDR                         0x00000002
/** Timer interrupt request enable @multiple */
  #define MICORE2_COMMIEN_TIMER                    0x01
/** Error interrupt request enable @multiple */
  #define MICORE2_COMMIEN_ERR                      0x02
/** Low alert interrupt request enable @multiple */
  #define MICORE2_COMMIEN_LOALERT                  0x04
/** High alert interrupt request enable @multiple */
  #define MICORE2_COMMIEN_HIALERT                  0x08
/** Idle interrupt request enable @multiple */
  #define MICORE2_COMMIEN_IDLE                     0x10
/** Receiver interrupt request enable @multiple */
  #define MICORE2_COMMIEN_RX                       0x20
/** Transmitter interrupt request enable @multiple */
  #define MICORE2_COMMIEN_TX                       0x40
/** Invert IRQ pin @multiple */
  #define MICORE2_COMMIEN_IRQINV                   0x80

/** Controls bits to enable and disable the passing of Interrupt Requests
   @multiple */
#define MICORE2_DIVIEN_ADDR                          0x00000003
/** Rf field off interrupt request enable @multiple */
  #define MICORE2_DIVIEN_RFOFF                     0x01
/** Rf field on interrupt request enable @multiple */
  #define MICORE2_DIVIEN_RFON                      0x02
/** Crc interrupt request enable @multiple */
  #define MICORE2_DIVIEN_CRC                       0x04
/** Mode interrupt request enable @multiple */
  #define MICORE2_DIVIEN_MODE                      0x08
/** Sigin active interrupt request enable @multiple */
  #define MICORE2_DIVIEN_SIGINACT                  0x10
/** IRQ pin push-pull mode @multiple */
  #define MICORE2_DIVIEN_IRQPUSHPULL(v)            ((MICORE2_DIVIEN_IRQPUSHPULL_##v) << 7)
  #define MICORE2_DIVIEN_IRQPUSHPULL_SET(x, v)     do { (x) = (((x) & ~0x80) | ((MICORE2_DIVIEN_IRQPUSHPULL_##v) << 7)); } while(0)
  #define MICORE2_DIVIEN_IRQPUSHPULL_GET(x)        (((x) >> 7) & 0x1)
/** Opendrain mode */
    #define MICORE2_DIVIEN_IRQPUSHPULL_OPENDRAIN     0x00000000
/** Push-pull CMOS mode */
    #define MICORE2_DIVIEN_IRQPUSHPULL_CMOS          0x00000001

/** Contains Interrupt Request bits @multiple */
#define MICORE2_COMMIRQ_ADDR                         0x00000004
/** Set when the timer decrements the TimerValue register to zero. @multiple */
  #define MICORE2_COMMIRQ_TIMER                    0x01
/** Set if any error bit in the Error register is set. @multiple */
  #define MICORE2_COMMIRQ_ERR                      0x02
/** Set when bit Status1.LoAlert gets set. @multiple */
  #define MICORE2_COMMIRQ_LOALERT                  0x04
/** Set when bit Status1.HiAlert gets set. @multiple */
  #define MICORE2_COMMIRQ_HIALERT                  0x08
/** Set when a command terminates by itself. @multiple */
  #define MICORE2_COMMIRQ_IDLE                     0x10
/** Set when the receiver detects the end of a valid datastream. If the bit
   RxMode.RxNoErr is set, bit RxIRQ is only set when data bytes are available in
   the FIFO. @multiple */
  #define MICORE2_COMMIRQ_RX                       0x20
/** Set immediately after the last bit of the transmitted data was sent out.
   @multiple */
  #define MICORE2_COMMIRQ_TX                       0x40
/** Set if any CommIRQ register bit is set. @multiple */
  #define MICORE2_COMMIRQ_SET1                     0x80

/** Contains Interrupt Request bits @multiple */
#define MICORE2_DIVIRQ_ADDR                          0x00000005
/** Set when a present external RF field is switched off. @multiple */
  #define MICORE2_DIVIRQ_RFOFF                     0x01
/** Set when an external RF field is detected. @multiple */
  #define MICORE2_DIVIRQ_RFON                      0x02
/** Set when the CRC command is active and all data are processed. @multiple */
  #define MICORE2_DIVIRQ_CRC                       0x04
/** Set when the mode has been detected by the Data mode detector. @multiple */
  #define MICORE2_DIVIRQ_MODE                      0x08
/** Set when SIGIN is active. @multiple */
  #define MICORE2_DIVIRQ_SIGINACT                  0x10
/** Set if any DivIRQ register bit is set. @multiple */
  #define MICORE2_DIVIRQ_SET2                      0x80

/** Error bits showing the error status of the last command executed @multiple */
#define MICORE2_ERROR_ADDR                           0x00000006
/** Protocol-dependant error @multiple */
  #define MICORE2_ERROR_PROTOCOL                   0x01
/** Set if the parity check has failed. It is cleared automatically at receiver
   start-up phase. Only valid for ISO/IEC 14443A/MIFARE or NFCIP-1 communication
   at 106 kbit. @multiple */
  #define MICORE2_ERROR_PARITY                     0x02
/** Set if bit RxMode.RxCRCEn register is set and the CRC calculation fails. It
   is cleared automatically at receiver start-up phase. @multiple */
  #define MICORE2_ERROR_CRC                        0x04
/** Set if a bit-collision is detected. It is cleared automatically at receiver
   start-up phase. This bit is only valid during the bitwise anticollision at 106
   kbit. During communication schemes at 212 and 424 kbit this bit is always set.
   @multiple */
  #define MICORE2_ERROR_COLL                       0x08
/** Set if the host controller or a chip’s internal state machine tries to
   write data into the FIFO-buffer although the FIFO-buffer is already full.
   @multiple */
  #define MICORE2_ERROR_BUFFEROVFL                 0x10
/** In Active Communication mode, set if the counterpart does not switch on the
   RF field in time as defined in NFCIP-1 standard. @multiple */
  #define MICORE2_ERROR_RF                         0x20
/** Set if the internal temperature sensor detects overheating. In this case, the
   antenna drivers are switched off automatically. @multiple */
  #define MICORE2_ERROR_TEMP                       0x40
/** Set when data is written into FIFO by the host controller at the wrong time.
   @multiple */
  #define MICORE2_ERROR_WR                         0x80

/** Contains status bits for communication @multiple */
#define MICORE2_STATUS1_ADDR                         0x00000007
/** Set when the number of bytes stored in the FIFO-buffer is low. @multiple */
  #define MICORE2_STATUS1_LOALERT                  0x01
/** Set when the number of bytes stored in the FIFO-buffer is high. @multiple */
  #define MICORE2_STATUS1_HIALERT                  0x02
/** Set if an external RF field is detected. This bit does not store the state of
   the RF field. @multiple */
  #define MICORE2_STATUS1_RFON                     0x04
/** Set if the chip’s timer unit is running, e.g. the timer will decrement the
   TCounterVal register with the next timer clock. @multiple */
  #define MICORE2_STATUS1_TRUNNING                 0x08
/** This bit shows if any interrupt source requests attention (with respect to
   the setting of the interrupt enable bits, see register CommIEn register and
   DivIEn register). @multiple */
  #define MICORE2_STATUS1_IRQ                      0x10
/** Set when the CRC calculation has finished. This bit is only valid for the CRC
   coprocessor calculation using the command CalcCRC. @multiple */
  #define MICORE2_STATUS1_CRCREADY                 0x20
/** Set if the CRC Result is zero. For data transmission and reception the bit
   CRCOk is undefined (use Error.CRC register). CRCOk indicates the status of the
   CRC coprocessor, during calculation the value changes to ZERO, when the
   calculation is done correctly, the value changes to ONE. @multiple */
  #define MICORE2_STATUS1_CRCOK                    0x40
/** Indicates if the frequency detected at the RX pin is in the range of 13.56
   MHz. If set, if the frequency at the RX pin is in the 12-15 MHz range
   @multiple */
  #define MICORE2_STATUS1_RFFREQOK                 0x80

/** Contains status bits of the receiver and transmitter @multiple */
#define MICORE2_STATUS2_ADDR                         0x00000008
/** Shows the state of the transmitter and receiver state machines. @multiple */
  #define MICORE2_STATUS2_MODEMSTATE(v)            ((MICORE2_STATUS2_MODEMSTATE_##v) << 0)
  #define MICORE2_STATUS2_MODEMSTATE_SET(x, v)     do { (x) = (((x) & ~0x7) | ((MICORE2_STATUS2_MODEMSTATE_##v) << 0)); } while(0)
  #define MICORE2_STATUS2_MODEMSTATE_GET(x)        (((x) >> 0) & 0x7)
    #define MICORE2_STATUS2_MODEMSTATE_IDLE          0x00000000
/** Wait for StartSend in register BitFraming register */
    #define MICORE2_STATUS2_MODEMSTATE_STARTSENDWAIT 0x00000001
/** Wait until RF field is present, if the bit TxWaitRF is set. */
    #define MICORE2_STATUS2_MODEMSTATE_TXWAIT        0x00000002
    #define MICORE2_STATUS2_MODEMSTATE_SENDING       0x00000003
/** Wait until RF field is present, if the bit RxWaitRF is set. */
    #define MICORE2_STATUS2_MODEMSTATE_RXWAIT        0x00000004
/** Wait for data */
    #define MICORE2_STATUS2_MODEMSTATE_DATAWAIT      0x00000005
    #define MICORE2_STATUS2_MODEMSTATE_RECEIVING     0x00000006
/** Indicates that the MIFARE Crypto1 unit is switched on and therefore all data
   communication with the card is encrypted. @multiple */
  #define MICORE2_STATUS2_MFCRYPTO1ON              0x08
/** Set if the Select command or if the Polling command was answered. Note: This
   bit can only be set during the AutoColl command in Passive Communication mode.
   @multiple */
  #define MICORE2_STATUS2_TARGETACTIVATED          0x10
/** Force I2C input filter settings. @multiple */
  #define MICORE2_STATUS2_I2CFORCEHS(v)            ((MICORE2_STATUS2_I2CFORCEHS_##v) << 6)
  #define MICORE2_STATUS2_I2CFORCEHS_SET(x, v)     do { (x) = (((x) & ~0x40) | ((MICORE2_STATUS2_I2CFORCEHS_##v) << 6)); } while(0)
  #define MICORE2_STATUS2_I2CFORCEHS_GET(x)        (((x) >> 6) & 0x1)
/** I2C input filter is set to the used I2C protocol */
    #define MICORE2_STATUS2_I2CFORCEHS_NORMAL        0x00000000
/** I2C input filter is set to the High-speed mode */
    #define MICORE2_STATUS2_I2CFORCEHS_HS            0x00000001
/** If set, this bit clears the temperature error, if the temperature is below
   the alarm limit of 125 °C. @multiple */
  #define MICORE2_STATUS2_TEMPSENSCLEAR            0x80

/** Input and output of 64 byte FIFO-buffer Data input and output port for the
   internal 64 byte FIFO-buffer. The FIFO-buffer acts as parallel in/parallel out
   converter for all serial data stream in- and outputs. @multiple */
#define MICORE2_FIFODATA_ADDR                        0x00000009

/** Indicates the number of bytes stored in the FIFO @multiple */
#define MICORE2_FIFOLEVEL_ADDR                       0x0000000a
/** Indicates the number of bytes stored in the FIFO buffer. Writing to the
   FifoData register increments, reading decrements the FifoLevel. @multiple */
  #define MICORE2_FIFOLEVEL_LEVEL(v)               ((v) << 0)
  #define MICORE2_FIFOLEVEL_LEVEL_SET(x, v)        do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define MICORE2_FIFOLEVEL_LEVEL_GET(x)           (((x) >> 0) & 0x7f)
/** If set, this bit clears the internal FIFO buffer pointers and the bit
   Err.BufferOvfl immediately. @multiple */
  #define MICORE2_FIFOLEVEL_FLUSH                  0x80

/** Defines the level for FIFO underflow and overflow warning @multiple */
#define MICORE2_WATERLEVEL_ADDR                      0x0000000b
/** Defines a warning level to indicate a FIFO buffer overflow or underflow.
   @multiple */
  #define MICORE2_WATERLEVEL_WATERLEVEL(v)         ((v) << 0)
  #define MICORE2_WATERLEVEL_WATERLEVEL_SET(x, v)  do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define MICORE2_WATERLEVEL_WATERLEVEL_GET(x)     (((x) >> 0) & 0x7f)

/** Contains miscellaneous Control Registers @multiple */
#define MICORE2_CONTROL_ADDR                         0x0000000c
/** Number of valid bits in the last received byte. If zero, the whole byte is
   valid. @multiple */
  #define MICORE2_CONTROL_RXLASTBITS(v)            ((v) << 0)
  #define MICORE2_CONTROL_RXLASTBITS_SET(x, v)     do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define MICORE2_CONTROL_RXLASTBITS_GET(x)        (((x) >> 0) & 0x7)
/** If set, the chip acts as initiator, otherwise it acts as target @multiple */
  #define MICORE2_CONTROL_INITIATOR                0x10
/** If set, the internal stored NFCID (10 bytes) is copied into the FIFO. Bit is
   cleared automatically. @multiple */
  #define MICORE2_CONTROL_WRNFCIDTOFIFO            0x20
/** Set to logic 1 starts the timer immediately. @multiple */
  #define MICORE2_CONTROL_TSTARTNOW                0x40
/** If set, the timer stops immediately. @multiple */
  #define MICORE2_CONTROL_TSTOPNOW                 0x80

/** Adjustments for bit oriented frames @multiple */
#define MICORE2_BITFRAMING_ADDR                      0x0000000d
/** Used for transmission of bit oriented frames: TxLastBits defines the number
   of bits of the last byte that shall be transmitted. 0 indicates that all bits
   of the last byte shall be transmitted. @multiple */
  #define MICORE2_BITFRAMING_TXLASTBITS(v)         ((v) << 0)
  #define MICORE2_BITFRAMING_TXLASTBITS_SET(x, v)  do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define MICORE2_BITFRAMING_TXLASTBITS_GET(x)     (((x) >> 0) & 0x7)
/** Used for reception of bit oriented frames: RxAlign defines the bit position
   for the first bit received to be stored in the FIFO. Further received bits are
   stored at the following bit positions. @multiple */
  #define MICORE2_BITFRAMING_RXALIGN(v)            ((v) << 4)
  #define MICORE2_BITFRAMING_RXALIGN_SET(x, v)     do { (x) = (((x) & ~0x70) | ((v) << 4)); } while(0)
  #define MICORE2_BITFRAMING_RXALIGN_GET(x)        (((x) >> 4) & 0x7)
/** If set, the transmission of data starts. This bit is only valid in
   combination with the Transceive command. @multiple */
  #define MICORE2_BITFRAMING_STARTSEND             0x80

/** Bit position of the first bit collision detected on the RF interface
   @multiple */
#define MICORE2_COLL_ADDR                            0x0000000e
/** Bit position of the first detected collision in a received frame, only data
   bits are interpreted. @multiple */
  #define MICORE2_COLL_COLLPOS(v)                  ((v) << 0)
  #define MICORE2_COLL_COLLPOS_SET(x, v)           do { (x) = (((x) & ~0x1f) | ((v) << 0)); } while(0)
  #define MICORE2_COLL_COLLPOS_GET(x)              (((x) >> 0) & 0x1f)
/** If set, if no Collision is detected or the Position of the Collision is out
   of the range of bits CollPos. This bit shall only be interpreted in Passive
   Communication mode at 106 kbit or ISO/IEC 14443A/MIFARE Reader/Writer mode.
   @multiple */
  #define MICORE2_COLL_COLLPOSNOTVALID             0x20
/** If cleared, all receiving bits will be cleared after a collision. This bit
   shall only be used during bitwise anticollision at 106 kbit, otherwise it
   shall be set. @multiple */
  #define MICORE2_COLL_VALUESAFTERCOLL             0x80

/** Defines general modes for transmitting and receiving @multiple */
#define MICORE2_MODE_ADDR                            0x00000011
/** Defines the preset value for the CRC coprocessor for the CalCRC command.
   @multiple */
  #define MICORE2_MODE_CRCPRESET(v)                ((MICORE2_MODE_CRCPRESET_##v) << 0)
  #define MICORE2_MODE_CRCPRESET_SET(x, v)         do { (x) = (((x) & ~0x3) | ((MICORE2_MODE_CRCPRESET_##v) << 0)); } while(0)
  #define MICORE2_MODE_CRCPRESET_GET(x)            (((x) >> 0) & 0x3)
    #define MICORE2_MODE_CRCPRESET_0000              0x00000000
    #define MICORE2_MODE_CRCPRESET_6363              0x00000001
    #define MICORE2_MODE_CRCPRESET_A671              0x00000002
    #define MICORE2_MODE_CRCPRESET_FFFF              0x00000003
/** If set, the internal mode detector is switched off. @multiple */
  #define MICORE2_MODE_MODEDETOFF                  0x04
/** Defines the active polarity of the SIGIN pin. @multiple */
  #define MICORE2_MODE_POLSIGIN                    0x08
/** If set, the counter for RxWait starts only if an external RF field is
   detected in Target mode for NFCIP-1 or in Card Communication mode. @multiple
   */
  #define MICORE2_MODE_RXWAITRF                    0x10
/** If set, the transmitter in reader/writer or initiator mode for NFCIP-1 can
   only be started, if an RF field is generated. @multiple */
  #define MICORE2_MODE_TXWAITRF                    0x20
/** If set, the contactless UART waits for the value 0xF0 before the receiver is
   activated and 0xF0 is added as a Sync-byte for transmission. This bit is only
   valid for 106 kbit during NFCIP-1 data exchange protocol. In all other modes
   this field shall be cleared. @multiple */
  #define MICORE2_MODE_DETECTSYNC                  0x40
/** If set, the CRC coprocessor calculates the CRC with MSB first and the
   CRCResultMSB and the CRCResultLSB in the CRCResult register register are bit
   reversed. @multiple */
  #define MICORE2_MODE_MSBFIRST                    0x80

/** Defines the data rate and framing during transmission @multiple */
#define MICORE2_TXMODE_ADDR                          0x00000012
/** Defines the framing used for data transmission. @multiple */
  #define MICORE2_TXMODE_TXFRAMING(v)              ((MICORE2_TXMODE_TXFRAMING_##v) << 0)
  #define MICORE2_TXMODE_TXFRAMING_SET(x, v)       do { (x) = (((x) & ~0x3) | ((MICORE2_TXMODE_TXFRAMING_##v) << 0)); } while(0)
  #define MICORE2_TXMODE_TXFRAMING_GET(x)          (((x) >> 0) & 0x3)
/** ISO/IEC 14443A/MIFARE and Passive Communication mode 106 kbit */
    #define MICORE2_TXMODE_TXFRAMING_14443A          0x00000000
/** Active Communication mode */
    #define MICORE2_TXMODE_TXFRAMING_ACTIVE          0x00000001
/** FeliCa and Passive communication mode 212 and 424 kbit */
    #define MICORE2_TXMODE_TXFRAMING_FELICA          0x00000002
/** ISO/IEC 14443B */
    #define MICORE2_TXMODE_TXFRAMING_14443B          0x00000003
/** If set, the signal at pin SIGIN is mixed with the internal coder. @multiple
   */
  #define MICORE2_TXMODE_TXMIX                     0x04
/** If set, the modulation for transmitting data is inverted. @multiple */
  #define MICORE2_TXMODE_INVMOD                    0x08
/** Defines the bit rate while data transmission. @multiple */
  #define MICORE2_TXMODE_TXSPEED(v)                ((MICORE2_TXMODE_TXSPEED_##v) << 4)
  #define MICORE2_TXMODE_TXSPEED_SET(x, v)         do { (x) = (((x) & ~0x70) | ((MICORE2_TXMODE_TXSPEED_##v) << 4)); } while(0)
  #define MICORE2_TXMODE_TXSPEED_GET(x)            (((x) >> 4) & 0x7)
/** 106 kbit */
    #define MICORE2_TXMODE_TXSPEED_106K              0x00000000
/** 212 kbit */
    #define MICORE2_TXMODE_TXSPEED_212K              0x00000001
/** 424 kbit */
    #define MICORE2_TXMODE_TXSPEED_424K              0x00000002
/** 848 kbit */
    #define MICORE2_TXMODE_TXSPEED_848K              0x00000003
/** 1696 kbit */
    #define MICORE2_TXMODE_TXSPEED_1696K             0x00000004
/** 3392 kbit */
    #define MICORE2_TXMODE_TXSPEED_3392K             0x00000005
/** Enables the CRC generation during data transmission. @multiple */
  #define MICORE2_TXMODE_TXCRCEN                   0x80

/** Defines the data rate and framing during receiving @multiple */
#define MICORE2_RXMODE_ADDR                          0x00000013
/** Defines the framing used for data reception. @multiple */
  #define MICORE2_RXMODE_RXFRAMING(v)              ((MICORE2_RXMODE_RXFRAMING_##v) << 0)
  #define MICORE2_RXMODE_RXFRAMING_SET(x, v)       do { (x) = (((x) & ~0x3) | ((MICORE2_RXMODE_RXFRAMING_##v) << 0)); } while(0)
  #define MICORE2_RXMODE_RXFRAMING_GET(x)          (((x) >> 0) & 0x3)
/** ISO/IEC 14443A/MIFARE and Passive Communication mode 106 kbit */
    #define MICORE2_RXMODE_RXFRAMING_14443A          0x00000000
/** Active Communication mode */
    #define MICORE2_RXMODE_RXFRAMING_ACTIVE          0x00000001
/** FeliCa and Passive communication mode 212 and 424 kbit */
    #define MICORE2_RXMODE_RXFRAMING_FELICA          0x00000002
/** ISO/IEC 14443B */
    #define MICORE2_RXMODE_RXFRAMING_14443B          0x00000003
/** If cleared, the receiver is deactivated after receiving a data frame. If set,
   it is possible to receive more than one data frame. Having set this bit, the
   receive and transceive commands will not terminate automatically. In this case
   the multiple receiving can only be deactivated by writing any command (except
   the Receive command) to the Command register or by clearing this bit. At the
   end of a received data stream, a copy of the Error register is added to the
   FIFO. @multiple */
  #define MICORE2_RXMODE_RXMULTIPLE                0x04
/** If set, an invalid received data stream (less than 4 bits received) will be
   ignored. The receiver will remain active. For ISO/IEC14443B RxSOFReq is also
   required to ignore an invalid datastream. @multiple */
  #define MICORE2_RXMODE_RXNOERR                   0x08
/** Defines the bit rate for data reception. @multiple */
  #define MICORE2_RXMODE_RXSPEED(v)                ((MICORE2_RXMODE_RXSPEED_##v) << 4)
  #define MICORE2_RXMODE_RXSPEED_SET(x, v)         do { (x) = (((x) & ~0x70) | ((MICORE2_RXMODE_RXSPEED_##v) << 4)); } while(0)
  #define MICORE2_RXMODE_RXSPEED_GET(x)            (((x) >> 4) & 0x7)
/** 106 kbit */
    #define MICORE2_RXMODE_RXSPEED_106K              0x00000000
/** 212 kbit */
    #define MICORE2_RXMODE_RXSPEED_212K              0x00000001
/** 424 kbit */
    #define MICORE2_RXMODE_RXSPEED_424K              0x00000002
/** 848 kbit */
    #define MICORE2_RXMODE_RXSPEED_848K              0x00000003
/** 1696 kbit */
    #define MICORE2_RXMODE_RXSPEED_1696K             0x00000004
/** 3392 kbit */
    #define MICORE2_RXMODE_RXSPEED_3392K             0x00000005
/** If set, this bit enables the CRC calculation during reception. This shall
   only be disabled at 106 kbit. @multiple */
  #define MICORE2_RXMODE_RXCRCEN                   0x80

/** Controls the logical behavior of the antenna driver pins TX1 and TX2
   @multiple */
#define MICORE2_TXCONTROL_ADDR                       0x00000014
/** If set, the output signal on pin TX1 will deliver the 13.56 MHz energy
   carrier modulated by the transmission data. @multiple */
  #define MICORE2_TXCONTROL_TX1RFEN                0x01
/** If set, the output signal on pin TX2 will deliver the 13.56 MHz energy
   carrier modulated by the transmission data. @multiple */
  #define MICORE2_TXCONTROL_TX2RFEN                0x02
/** If set, Tx2RFEn and Tx1RFEn can not be set if an external RF field is
   detected. Only valid when using in combination with bit Tx2RFEn or Tx1RFEn
   @multiple */
  #define MICORE2_TXCONTROL_CHECKRF                0x04
/** If set, the output signal on pin TX2 will deliver continuously the
   un-modulated 13.56 MHz energy carrier. If cleared, Tx2CW is enabled to
   modulate the 13.56 MHz energy carrier. @multiple */
  #define MICORE2_TXCONTROL_TX2CW                  0x08
/** If set, the output signal at pin TX1 will be inverted, if driver TX1 is
   disabled. @multiple */
  #define MICORE2_TXCONTROL_INVTX1RFOFF            0x10
/** If set, the output signal at pin TX2 will be inverted, if driver TX2 is
   disabled. @multiple */
  #define MICORE2_TXCONTROL_INVTX2RFOFF            0x20
/** If set, the output signal at pin TX1 will be inverted, if driver TX1 is
   enabled. @multiple */
  #define MICORE2_TXCONTROL_INVTX1RFON             0x40
/** If set, the output signal at pin TX2 will be inverted, if driver TX2 is
   enabled. @multiple */
  #define MICORE2_TXCONTROL_INVTX2RFON             0x80

/** Controls the setting of the antenna drivers @multiple */
#define MICORE2_TXAUTO_ADDR                          0x00000015
/** If set, the driver Tx1 is switched on after the external RF field is switched
   off according to the time TADT. If the bit InitialRFOn and Tx1RFAutoEn are
   set, Tx1 is switched on if no external RF field is detected during the time
   TIDT. @multiple */
  #define MICORE2_TXAUTO_TX1RFAUTOEN               0x01
/** If set, the driver Tx2 is switched on after the external RF field is switched
   off according to the time TADT. If the bits InitialRFOn and Tx2RFAutoEn are
   set, Tx2 is switched on if no external RF field is detected during the time
   TIDT. @multiple */
  #define MICORE2_TXAUTO_TX2RFAUTOEN               0x02
/** If set, the initial RF collision avoidance is performed and the bit
   InitialRFOn is cleared automatically, if the RF is switched on. @multiple */
  #define MICORE2_TXAUTO_INITIALRFON               0x04
/** If set, the collision avoidance is activated and internally the value n is
   set in accordance to the NFCIP-1 Standard. @multiple */
  #define MICORE2_TXAUTO_CAON                      0x08
/** If set, the chip in soft Power-down mode will be started by the RF level
   detector. @multiple */
  #define MICORE2_TXAUTO_AUTOWAKEUP                0x20
/** If set, Force100ASK forces a 100% ASK modulation independent of the setting
   in register ModGsP register. @multiple */
  #define MICORE2_TXAUTO_FORCE100ASK               0x40
/** If set, all active antenna drivers are switched off after the last data bit
   has been transmitted as defined in the NFCIP-1. @multiple */
  #define MICORE2_TXAUTO_AUTORFOFF                 0x80

/** Selects the internal sources for the antenna driver @multiple */
#define MICORE2_TXSEL_ADDR                           0x00000016
/** Selects the input for the SIGOUT Pin. @multiple */
  #define MICORE2_TXSEL_SIGOUTSEL(v)               ((MICORE2_TXSEL_SIGOUTSEL_##v) << 0)
  #define MICORE2_TXSEL_SIGOUTSEL_SET(x, v)        do { (x) = (((x) & ~0xf) | ((MICORE2_TXSEL_SIGOUTSEL_##v) << 0)); } while(0)
  #define MICORE2_TXSEL_SIGOUTSEL_GET(x)           (((x) >> 0) & 0xf)
/** Tristate */
    #define MICORE2_TXSEL_SIGOUTSEL_TRISTATE         0x00000000
/** Low */
    #define MICORE2_TXSEL_SIGOUTSEL_LOW              0x00000001
/** High */
    #define MICORE2_TXSEL_SIGOUTSEL_HIGH             0x00000002
/** TestBus signal as defined by bit TestBusBitSel in register TestSel1 register. */
    #define MICORE2_TXSEL_SIGOUTSEL_TESTBUS          0x00000003
/** Modulation signal (envelope) from the internal coder */
    #define MICORE2_TXSEL_SIGOUTSEL_INTERNAL         0x00000004
/** Serial data stream to be transmitted */
    #define MICORE2_TXSEL_SIGOUTSEL_SERIALTX         0x00000005
/** Output signal of the receiver circuit (card modulation signal regenerated and delayed). This signal is used as data output signal for SAM interface connection using 3 lines. */
    #define MICORE2_TXSEL_SIGOUTSEL_RECEIVER         0x00000006
/** Serial data stream received. */
    #define MICORE2_TXSEL_SIGOUTSEL_SERIALRX         0x00000007
/** FeliCa Sam modulation RX */
    #define MICORE2_TXSEL_SIGOUTSEL_FELICARX         0x00000008
/** FeliCa Sam modulation TX */
    #define MICORE2_TXSEL_SIGOUTSEL_FELICATX         0x00000009
/** FeliCa Sam modulation Demodulator comparator output */
    #define MICORE2_TXSEL_SIGOUTSEL_FELICADEMOD      0x0000000a
/** MIFARE Sam modulation RX with RF carrier */
    #define MICORE2_TXSEL_SIGOUTSEL_MIFARERX         0x0000000c
/** MIFARE Sam modulation TX with RF carrier */
    #define MICORE2_TXSEL_SIGOUTSEL_MIFARETX         0x0000000d
/** MIFARE Sam modulation RX with RF carrier, unfiltered */
    #define MICORE2_TXSEL_SIGOUTSEL_MIFARERXRAW      0x0000000e
/** MIFARE Sam modulation RX envelope, unfiltered */
    #define MICORE2_TXSEL_SIGOUTSEL_MIFARERXENV      0x0000000f
/** Selects the input of driver Tx1 and Tx2. @multiple */
  #define MICORE2_TXSEL_DRIVERSEL(v)               ((MICORE2_TXSEL_DRIVERSEL_##v) << 4)
  #define MICORE2_TXSEL_DRIVERSEL_SET(x, v)        do { (x) = (((x) & ~0x30) | ((MICORE2_TXSEL_DRIVERSEL_##v) << 4)); } while(0)
  #define MICORE2_TXSEL_DRIVERSEL_GET(x)           (((x) >> 4) & 0x3)
/** Tristate */
    #define MICORE2_TXSEL_DRIVERSEL_TRISTATE         0x00000000
/** Modulation signal (envelope) from the internal coder */
    #define MICORE2_TXSEL_DRIVERSEL_INTERNAL         0x00000001
/** Modulation signal (envelope) from SIGIN */
    #define MICORE2_TXSEL_DRIVERSEL_SIGIN            0x00000002
/** High */
    #define MICORE2_TXSEL_DRIVERSEL_HIGH             0x00000003

/** Selects internal receiver settings @multiple */
#define MICORE2_RXSEL_ADDR                           0x00000017
/** After data transmission, the activation of the receiver is delayed for RxWait
   bit clocks. During this frame guard time, any signal at pin RX is ignored.
   This parameter is ignored by the Receive command. @multiple */
  #define MICORE2_RXSEL_RXWAIT(v)                  ((v) << 0)
  #define MICORE2_RXSEL_RXWAIT_SET(x, v)           do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define MICORE2_RXSEL_RXWAIT_GET(x)              (((x) >> 0) & 0x3f)
/** Selects the input of the contactless UART @multiple */
  #define MICORE2_RXSEL_UARTSEL(v)                 ((MICORE2_RXSEL_UARTSEL_##v) << 6)
  #define MICORE2_RXSEL_UARTSEL_SET(x, v)          do { (x) = (((x) & ~0xc0) | ((MICORE2_RXSEL_UARTSEL_##v) << 6)); } while(0)
  #define MICORE2_RXSEL_UARTSEL_GET(x)             (((x) >> 6) & 0x3)
/** Constant Low */
    #define MICORE2_RXSEL_UARTSEL_LOW                0x00000000
/** Envelope signal at SIGIN */
    #define MICORE2_RXSEL_UARTSEL_ENVELOPE           0x00000001
/** Modulation signal from the internal analog part */
    #define MICORE2_RXSEL_UARTSEL_INTERNAL           0x00000002
/** Modulation signal from SIGIN pin. Only valid for transfer speeds above 424 kbit */
    #define MICORE2_RXSEL_UARTSEL_MODULATION         0x00000003

/** Selects thresholds for the bit decoder @multiple */
#define MICORE2_RXTHRESHOLD_ADDR                     0x00000018
/** Defines the minimum signal strength at the decoder input that has to be
   reached by the weaker half-bit of the Manchester-coded signal to generate a
   bit-collision relatively to the amplitude of the stronger half-bit. @multiple
   */
  #define MICORE2_RXTHRESHOLD_COLLLEVEL(v)         ((v) << 0)
  #define MICORE2_RXTHRESHOLD_COLLLEVEL_SET(x, v)  do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define MICORE2_RXTHRESHOLD_COLLLEVEL_GET(x)     (((x) >> 0) & 0x7)
/** Defines the minimum signal strength at the decoder input that shall be
   accepted. If the signal strength is below this level, it is not evaluated.
   @multiple */
  #define MICORE2_RXTHRESHOLD_MINLEVEL(v)          ((v) << 4)
  #define MICORE2_RXTHRESHOLD_MINLEVEL_SET(x, v)   do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define MICORE2_RXTHRESHOLD_MINLEVEL_GET(x)      (((x) >> 4) & 0xf)

/** Defines demodulator settings @multiple */
#define MICORE2_DEMOD_ADDR                           0x00000019
/** Changes the time constant of the internal PLL during burst. @multiple */
  #define MICORE2_DEMOD_TAUSYNC(v)                 ((v) << 0)
  #define MICORE2_DEMOD_TAUSYNC_SET(x, v)          do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define MICORE2_DEMOD_TAUSYNC_GET(x)             (((x) >> 0) & 0x3)
/** Changes the time constant of the internal during data reception. Note: If set
   to 00, the PLL is frozen during data reception. @multiple */
  #define MICORE2_DEMOD_TAURCV(v)                  ((v) << 2)
  #define MICORE2_DEMOD_TAURCV_SET(x, v)           do { (x) = (((x) & ~0xc) | ((v) << 2)); } while(0)
  #define MICORE2_DEMOD_TAURCV_GET(x)              (((x) >> 2) & 0x3)
/** The following formula is used to calculate fTimer of the prescaler: fTimer =
   13.56 MHz / (2 * TPreScaler + 1 + TPrescalEven). @multiple */
  #define MICORE2_DEMOD_TPRESCALEVEN               0x10
/** If set and the bits of AddIQ are set to 0, the reception is fixed to I
   channel. If set and the bits of AddIQ are set to 1, the reception is fixed to
   Q channel. @multiple */
  #define MICORE2_DEMOD_FIXIQ                      0x20
/** Defines the use of I and Q channels during reception. Note: FixIQ has to be
   cleared to enable the following settings. @multiple */
  #define MICORE2_DEMOD_ADDIQ(v)                   ((MICORE2_DEMOD_ADDIQ_##v) << 6)
  #define MICORE2_DEMOD_ADDIQ_SET(x, v)            do { (x) = (((x) & ~0xc0) | ((MICORE2_DEMOD_ADDIQ_##v) << 6)); } while(0)
  #define MICORE2_DEMOD_ADDIQ_GET(x)               (((x) >> 6) & 0x3)
/** Select the stronger channel */
    #define MICORE2_DEMOD_ADDIQ_STRONGER             0x00000000
/** Select the stronger and freeze the selected during communication */
    #define MICORE2_DEMOD_ADDIQ_FREEZE               0x00000001
/** combines the I and Q channel */
    #define MICORE2_DEMOD_ADDIQ_IQ                   0x00000002

/** Defines the length of the FeliCa Sync bytes and the minimum length of the
   received packet. @multiple */
#define MICORE2_FELNFC1_ADDR                         0x0000001a
/** Defines the minimum length of the accepted packet length: DataLenMin * 4 <=
   data packet length. This parameter is ignored at 106 kbit if the
   Mode.DetectSync is clear. If a received data packet is shorter than the
   defined DataLenMin value, the data packet will be ignored. @multiple */
  #define MICORE2_FELNFC1_DATALENMIN(v)            ((v) << 0)
  #define MICORE2_FELNFC1_DATALENMIN_SET(x, v)     do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define MICORE2_FELNFC1_DATALENMIN_GET(x)        (((x) >> 0) & 0x3f)
/** Defines the length of the Sync bytes. Sync bytes: [00] * FelSyncLen + [B2 4D]
   @multiple */
  #define MICORE2_FELNFC1_FELSYNCLEN(v)            ((v) << 6)
  #define MICORE2_FELNFC1_FELSYNCLEN_SET(x, v)     do { (x) = (((x) & ~0xc0) | ((v) << 6)); } while(0)
  #define MICORE2_FELNFC1_FELSYNCLEN_GET(x)        (((x) >> 6) & 0x3)

/** Defines the maximum length of the received packet @multiple */
#define MICORE2_FELNFC2_ADDR                         0x0000001b
/** These bits define the maximum length of the accepted packet length:
   DataLenMax * 4 >= data packet length @multiple */
  #define MICORE2_FELNFC2_DATALENMAX(v)            ((v) << 0)
  #define MICORE2_FELNFC2_DATALENMAX_SET(x, v)     do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define MICORE2_FELNFC2_DATALENMAX_GET(x)        (((x) >> 0) & 0x3f)
/** Defines the time slot length for Passive Communication mode at 424 kbit.
   @multiple */
  #define MICORE2_FELNFC2_TIMESLOT(v)              ((MICORE2_FELNFC2_TIMESLOT_##v) << 6)
  #define MICORE2_FELNFC2_TIMESLOT_SET(x, v)       do { (x) = (((x) & ~0x40) | ((MICORE2_FELNFC2_TIMESLOT_##v) << 6)); } while(0)
  #define MICORE2_FELNFC2_TIMESLOT_GET(x)          (((x) >> 6) & 0x1)
/** a long timeslot is used (equal to the timeslot for 212 kbit) */
    #define MICORE2_FELNFC2_TIMESLOT_LONG            0x00000000
/** a short time slot is used (half of the timeslot at 212 kbit) */
    #define MICORE2_FELNFC2_TIMESLOT_SHORT           0x00000001
/** When set, the AutoColl command is only terminated automatically when: 1. A
   valid command has been received after performing a valid Select procedure
   according ISO/IEC 14443A. 2. A valid command has been received after
   performing a valid Polling procedure according to the FeliCa specification.
   @multiple */
  #define MICORE2_FELNFC2_WAITFORSELECTED          0x80

/** Controls the communication in ISO/IEC 14443/MIFARE and NFC target mode at 106
   kbit @multiple */
#define MICORE2_MIFNFC_ADDR                          0x0000001c
/** Defines the minimum response time between receive and transmit in number of
   data bits + 7. @multiple */
  #define MICORE2_MIFNFC_TXWAIT(v)                 ((v) << 0)
  #define MICORE2_MIFNFC_TXWAIT_SET(x, v)          do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define MICORE2_MIFNFC_TXWAIT_GET(x)             (((x) >> 0) & 0x3)
/** If set, this bit indicates that the chip is set to HALT mode in Card
   Operation mode at 106 kbit. This bit is either set by the host controller or
   by the internal state machine and indicates that only the code 52h is accepted
   as a request command. This bit is cleared automatically by a RF reset.
   @multiple */
  #define MICORE2_MIFNFC_MFHALTED                  0x04
/** Defines the time constant of the Miller decoder. @multiple */
  #define MICORE2_MIFNFC_TAUMILLER(v)              ((v) << 3)
  #define MICORE2_MIFNFC_TAUMILLER_SET(x, v)       do { (x) = (((x) & ~0x18) | ((v) << 3)); } while(0)
  #define MICORE2_MIFNFC_TAUMILLER_GET(x)          (((x) >> 3) & 0x3)
/** Defines the sensitivity of the Miller decoder. @multiple */
  #define MICORE2_MIFNFC_SENSMILLER(v)             ((v) << 5)
  #define MICORE2_MIFNFC_SENSMILLER_SET(x, v)      do { (x) = (((x) & ~0xe0) | ((v) << 5)); } while(0)
  #define MICORE2_MIFNFC_SENSMILLER_GET(x)         (((x) >> 5) & 0x7)

/** Allows manual fine tuning of the internal receiver @multiple */
#define MICORE2_MANUALRCV_ADDR                       0x0000001d
/** Selects the High Pass Corner Frequency (HPCF) of the filter in the internal
   receiver chain @multiple */
  #define MICORE2_MANUALRCV_HPFC(v)                ((MICORE2_MANUALRCV_HPFC_##v) << 0)
  #define MICORE2_MANUALRCV_HPFC_SET(x, v)         do { (x) = (((x) & ~0x3) | ((MICORE2_MANUALRCV_HPFC_##v) << 0)); } while(0)
  #define MICORE2_MANUALRCV_HPFC_GET(x)            (((x) >> 0) & 0x3)
/** For signals with frequency spectrum down to 106 kHz */
    #define MICORE2_MANUALRCV_HPFC_106K              0x00000000
/** For signals with frequency spectrum down to 212 kHz */
    #define MICORE2_MANUALRCV_HPFC_212K              0x00000001
/** For signals with frequency spectrum down to 424 kHz */
    #define MICORE2_MANUALRCV_HPFC_424K              0x00000002
/** For signals with frequency spectrum down to 848 kHz */
    #define MICORE2_MANUALRCV_HPFC_848K              0x00000003
/** If cleared, the HPCF bits are ignored and the HPCF settings are adapted
   automatically to the receiving mode. If set, values of HPCF are valid.
   @multiple */
  #define MICORE2_MANUALRCV_MANUALHPCF             0x04
/** If set, the bandwidth of the internal PLL used for clock recovery is
   extended. @multiple */
  #define MICORE2_MANUALRCV_LARGEBWPLL             0x08
/** When set, the generation of the Parity bit for transmission and the
   Parity-Check for receiving is switched off. The received Parity bit is handled
   like a data bit. @multiple */
  #define MICORE2_MANUALRCV_PARITYDISABLE          0x10
/** When set, the Signal at SIGOUT-pin is delayed, so that in SAM mode the Signal
   at SIGIN must be 128/fc faster compared to the ISO/IEC 14443A, to reach the
   ISO/IEC 14443A restrictions on the RF-Field. @multiple */
  #define MICORE2_MANUALRCV_DELAY                  0x20
/** When set, the internal filter for the Miller-Delay Circuit is set to Fast
   mode. @multiple */
  #define MICORE2_MANUALRCV_FASTFILT               0x40

/** Configure the ISO/IEC 14443 type B @multiple */
#define MICORE2_TYPEB_ADDR                           0x0000001e
/** These bits define the length of the EGT, in bits. @multiple */
  #define MICORE2_TYPEB_TXEGT(v)                   ((v) << 0)
  #define MICORE2_TYPEB_TXEGT_SET(x, v)            do { (x) = (((x) & ~0x3) | ((v) << 0)); } while(0)
  #define MICORE2_TYPEB_TXEGT_GET(x)               (((x) >> 0) & 0x3)
/** When set, the generation of the EOF is suppressed. @multiple */
  #define MICORE2_TYPEB_NOTXEOF                    0x04
/** When set, the generation of the SOF is suppressed. @multiple */
  #define MICORE2_TYPEB_NOTXSOF                    0x08
/** When set and EOFSOFAdjust bit is cleared, the SOF and EOF will have the
   maximum length defined in ISO/IEC 14443B. @multiple */
  #define MICORE2_TYPEB_EOFSOFWIDTH                0x10
/** When set, the EOF is required. A datastream ending without EOF will generate
   a Protocol-Error. If cleared, a datastream with and without EOF is accepted.
   The EOF will be removed and not written into the FIFO. @multiple */
  #define MICORE2_TYPEB_RXEOFREQ                   0x40
/** When set, the SOF is required. A datastream starting without SOF is ignored.
   If this bit is cleared, a datastream with and without SOF is accepted. The SOF
   will be removed and not written into the FIFO. @multiple */
  #define MICORE2_TYPEB_RXSOFREQ                   0x80

/** Selects the speed of the serial UART interface @multiple */
#define MICORE2_SERIALSPEED_ADDR                     0x0000001f
/** Factor BR_T1 to adjust the transfer speed. @multiple */
  #define MICORE2_SERIALSPEED_T1(v)                ((v) << 0)
  #define MICORE2_SERIALSPEED_T1_SET(x, v)         do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define MICORE2_SERIALSPEED_T1_GET(x)            (((x) >> 0) & 0xf)
/** Factor BR_T0 to adjust the transfer speed. @multiple */
  #define MICORE2_SERIALSPEED_T0(v)                ((v) << 5)
  #define MICORE2_SERIALSPEED_T0_SET(x, v)         do { (x) = (((x) & ~0xe0) | ((v) << 5)); } while(0)
  #define MICORE2_SERIALSPEED_T0_GET(x)            (((x) >> 5) & 0x7)

/** Shows the current MSB and LSB values of the CRC calculation @multiple */
#define MICORE2_CRCRESULT_ADDR                       0x00000021

/** Selects the conductance of the antenna driver pins TX1 and TX2 for
   modulation, when the driver is switched off @multiple */
#define MICORE2_GSNOFF_ADDR                          0x00000023
/** Defines the conductance of the output N-driver for the time of modulation.
   This may be used to regulate the modulation index. @multiple */
  #define MICORE2_GSNOFF_MODGSNOFF(v)              ((v) << 0)
  #define MICORE2_GSNOFF_MODGSNOFF_SET(x, v)       do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define MICORE2_GSNOFF_MODGSNOFF_GET(x)          (((x) >> 0) & 0xf)
/** Defines the conductance of the output N-driver during times of no modulation.
   @multiple */
  #define MICORE2_GSNOFF_CWGSNOFF(v)               ((v) << 4)
  #define MICORE2_GSNOFF_CWGSNOFF_SET(x, v)        do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define MICORE2_GSNOFF_CWGSNOFF_GET(x)           (((x) >> 4) & 0xf)

/** Controls the modulation width settings Defines the width of the Miller
   modulation as initiator in Active and Passive Communication mode as multiples
   of the carrier frequency (ModWidth + 1/fc). The maximum value is half the bit
   period. @multiple */
#define MICORE2_MODWIDTH_ADDR                        0x00000024

/** Adjust the TX bit phase at 106 kbit @multiple */
#define MICORE2_TXBITPHASE_ADDR                      0x00000025
/** Represents the number of carrier frequency clock cycles which are added to
   the waiting period before transmitting data in all communication modes.
   TXBitPhase is used to adjust the TX bit synchronization during passive NFCIP-1
   communication mode at 106 kbit and in ISO/IEC 14443A/MIFARE card mode.
   @multiple */
  #define MICORE2_TXBITPHASE_TXBITPHASE(v)         ((v) << 0)
  #define MICORE2_TXBITPHASE_TXBITPHASE_SET(x, v)  do { (x) = (((x) & ~0x7f) | ((v) << 0)); } while(0)
  #define MICORE2_TXBITPHASE_TXBITPHASE_GET(x)     (((x) >> 0) & 0x7f)
/** If set, the demodulator’s clock is derived by the external RF field.
   @multiple */
  #define MICORE2_TXBITPHASE_RCVCLKCHANGE          0x80

/** Configures the receiver gain and RF level detector sensitivity @multiple */
#define MICORE2_RFCFG_ADDR                           0x00000026
/** Defines the sensitivity of the RF level detector. @multiple */
  #define MICORE2_RFCFG_RFLEVEL(v)                 ((MICORE2_RFCFG_RFLEVEL_##v) << 0)
  #define MICORE2_RFCFG_RFLEVEL_SET(x, v)          do { (x) = (((x) & ~0xf) | ((MICORE2_RFCFG_RFLEVEL_##v) << 0)); } while(0)
  #define MICORE2_RFCFG_RFLEVEL_GET(x)             (((x) >> 0) & 0xf)
/** ~0.010Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_010VPP           0x00000000
/** ~0.014Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_014VPP           0x00000001
/** ~0.020Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_020VPP           0x00000002
/** ~0.029Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_029VPP           0x00000003
/** ~0.041Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_041VPP           0x00000004
/** ~0.058Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_058VPP           0x00000005
/** ~0.083Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_083VPP           0x00000006
/** ~0.12Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_12VPP            0x00000007
/** ~0.17Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_17VPP            0x00000008
/** ~0.24Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_24VPP            0x00000009
/** ~0.35Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_35VPP            0x0000000a
/** ~0.49Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_49VPP            0x0000000b
/** ~0.69Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_69VPP            0x0000000c
/** ~0.99Vpp */
    #define MICORE2_RFCFG_RFLEVEL_0_99VPP            0x0000000d
/** ~1.4Vpp */
    #define MICORE2_RFCFG_RFLEVEL_1_4VPP             0x0000000e
/** ~2Vpp */
    #define MICORE2_RFCFG_RFLEVEL_2VPP               0x0000000f
/** This register defines the receivers signal voltage gain factor. @multiple */
  #define MICORE2_RFCFG_RXGAIN(v)                  ((MICORE2_RFCFG_RXGAIN_##v) << 4)
  #define MICORE2_RFCFG_RXGAIN_SET(x, v)           do { (x) = (((x) & ~0x70) | ((MICORE2_RFCFG_RXGAIN_##v) << 4)); } while(0)
  #define MICORE2_RFCFG_RXGAIN_GET(x)              (((x) >> 4) & 0x7)
/** 18 dB */
    #define MICORE2_RFCFG_RXGAIN_18DB0               0x00000000
/** 23 dB */
    #define MICORE2_RFCFG_RXGAIN_23DB0               0x00000001
/** 18 dB */
    #define MICORE2_RFCFG_RXGAIN_18DB                0x00000002
/** 23 dB */
    #define MICORE2_RFCFG_RXGAIN_23DB                0x00000003
/** 33 dB */
    #define MICORE2_RFCFG_RXGAIN_33DB                0x00000004
/** 38 dB */
    #define MICORE2_RFCFG_RXGAIN_38DB                0x00000005
/** 43 dB */
    #define MICORE2_RFCFG_RXGAIN_43DB                0x00000006
/** 48 dB */
    #define MICORE2_RFCFG_RXGAIN_48DB                0x00000007
/** If set, this bit activates the RF level detectors' amplifier. @multiple */
  #define MICORE2_RFCFG_RFLEVELAMP                 0x80

/** Selects the conductance of the antenna driver pins TX1 and TX2 for modulation
   when the drivers are switched on @multiple */
#define MICORE2_GSNON_ADDR                           0x00000027
/** Defines the conductance of the output N-driver for the time of modulation.
   This may be used to regulate the modulation index. @multiple */
  #define MICORE2_GSNON_MODGSNON(v)                ((v) << 0)
  #define MICORE2_GSNON_MODGSNON_SET(x, v)         do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define MICORE2_GSNON_MODGSNON_GET(x)            (((x) >> 0) & 0xf)
/** Defines the conductance of the output N-driver during times of no modulation.
   This may be used to regulate the output power and subsequently current
   consumption and operating distance. @multiple */
  #define MICORE2_GSNON_CWGSNON(v)                 ((v) << 4)
  #define MICORE2_GSNON_CWGSNON_SET(x, v)          do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define MICORE2_GSNON_CWGSNON_GET(x)             (((x) >> 4) & 0xf)

/** Selects the conductance of the antenna driver pins TX1 and TX2 for modulation
   during times of no modulation @multiple */
#define MICORE2_CWGSP_ADDR                           0x00000028
/** Defines the conductance of the output P-driver. This may be used to regulate
   the output power and subsequently current consumption and operating distance.
   @multiple */
  #define MICORE2_CWGSP_CWGSP(v)                   ((v) << 0)
  #define MICORE2_CWGSP_CWGSP_SET(x, v)            do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define MICORE2_CWGSP_CWGSP_GET(x)               (((x) >> 0) & 0x3f)

/** Selects the conductance of the antenna driver pins TX1 and TX2 for modulation
   during modulation @multiple */
#define MICORE2_MODGSP_ADDR                          0x00000029
/** Defines the conductance of the output P-driver for the time of modulation.
   This may be used to regulate the modulation index. @multiple */
  #define MICORE2_MODGSP_MODGSP(v)                 ((v) << 0)
  #define MICORE2_MODGSP_MODGSP_SET(x, v)          do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define MICORE2_MODGSP_MODGSP_GET(x)             (((x) >> 0) & 0x3f)

/** Defines settings for the internal timer @multiple */
#define MICORE2_TMODE_ADDR                           0x0000002a
/** Defines higher 4 bits for TPrescaler. @multiple */
  #define MICORE2_TMODE_TPRESCALERHI(v)            ((v) << 0)
  #define MICORE2_TMODE_TPRESCALERHI_SET(x, v)     do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define MICORE2_TMODE_TPRESCALERHI_GET(x)        (((x) >> 0) & 0xf)
/** If set, the timer automatically restart its count-down from TReloadValue,
   instead of counting down to zero. Set to logic 0 the timer decrements to ZERO
   and the bit TimerIRQ is set to logic 1. @multiple */
  #define MICORE2_TMODE_TAUTORESTART               0x10
/** The internal timer is running in gated mode. @multiple */
  #define MICORE2_TMODE_TGATED(v)                  ((MICORE2_TMODE_TGATED_##v) << 5)
  #define MICORE2_TMODE_TGATED_SET(x, v)           do { (x) = (((x) & ~0x60) | ((MICORE2_TMODE_TGATED_##v) << 5)); } while(0)
  #define MICORE2_TMODE_TGATED_GET(x)              (((x) >> 5) & 0x3)
/** Non gated mode */
    #define MICORE2_TMODE_TGATED_RAW                 0x00000000
/** Gated by SIGIN */
    #define MICORE2_TMODE_TGATED_SIGIN               0x00000001
/** Gated by AUX1 */
    #define MICORE2_TMODE_TGATED_AUX1                0x00000002
/** Gated by A3 */
    #define MICORE2_TMODE_TGATED_A3                  0x00000003
/** If set, the timer starts automatically at the end of the transmission in all
   communication modes at all speeds or when bit InitialRFOn is set to logic 1
   and the RF field is switched on. @multiple */
  #define MICORE2_TMODE_TAUTO                      0x80

/** Defines settings for the internal timer @multiple */
#define MICORE2_TPRESCALER_ADDR                      0x0000002b
/** Defines lower 8 bits for TPrescaler. @multiple */
  #define MICORE2_TPRESCALER_TPRESCALERLO(v)       ((v) << 0)
  #define MICORE2_TPRESCALER_TPRESCALERLO_SET(x, v) do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define MICORE2_TPRESCALER_TPRESCALERLO_GET(x)   (((x) >> 0) & 0xff)

/** Describes the 16-bit timer reload value, loaded in timer at start event.
   @multiple */
#define MICORE2_TRELOAD_ADDR                         0x0000002c

/** 16-bit current timer value @multiple */
#define MICORE2_TCOUNTERVAL_ADDR                     0x0000002e

/** General test signal configuration @multiple */
#define MICORE2_TESTSEL1_ADDR                        0x00000031
/** Select the TestBus bit from the testbus to be propagated to SIGOUT. @multiple
   */
  #define MICORE2_TESTSEL1_TSTBUSBITSEL(v)         ((v) << 0)
  #define MICORE2_TESTSEL1_TSTBUSBITSEL_SET(x, v)  do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define MICORE2_TESTSEL1_TSTBUSBITSEL_GET(x)     (((x) >> 0) & 0x7)
/** If set, the SAM clock is delivered to D1. @multiple */
  #define MICORE2_TESTSEL1_SAMCLKD1                0x08
/** Defines the source for the 13.56 MHz SAM clock @multiple */
  #define MICORE2_TESTSEL1_SAMCLOCKSEL(v)          ((MICORE2_TESTSEL1_SAMCLOCKSEL_##v) << 4)
  #define MICORE2_TESTSEL1_SAMCLOCKSEL_SET(x, v)   do { (x) = (((x) & ~0x30) | ((MICORE2_TESTSEL1_SAMCLOCKSEL_##v) << 4)); } while(0)
  #define MICORE2_TESTSEL1_SAMCLOCKSEL_GET(x)      (((x) >> 4) & 0x3)
/** SAM Clock switched off */
    #define MICORE2_TESTSEL1_SAMCLOCKSEL_GND         0x00000000
/** Clock derived by the internal oscillator */
    #define MICORE2_TESTSEL1_SAMCLOCKSEL_INTERNAL    0x00000001
/** Internal UART clock */
    #define MICORE2_TESTSEL1_SAMCLOCKSEL_UART        0x00000002
/** Clock derived by the RF field */
    #define MICORE2_TESTSEL1_SAMCLOCKSEL_FIELD       0x00000003

/** General test signal configuration and PRBS control @multiple */
#define MICORE2_TESTSEL2_ADDR                        0x00000032
/** Selects the testbus. @multiple */
  #define MICORE2_TESTSEL2_TESTBUSSEL(v)           ((v) << 0)
  #define MICORE2_TESTSEL2_TESTBUSSEL_SET(x, v)    do { (x) = (((x) & ~0x1f) | ((v) << 0)); } while(0)
  #define MICORE2_TESTSEL2_TESTBUSSEL_GET(x)       (((x) >> 0) & 0x1f)
/** Starts and enables the PRBS15 sequence according ITU-TO150. @multiple */
  #define MICORE2_TESTSEL2_PRBS15                  0x20
/** Starts and enables the PRBS9 sequence according ITU-TO150. @multiple */
  #define MICORE2_TESTSEL2_PRBS9                   0x40
/** If set to logic 1, the testbus is mapped to the parallel port in the
   following order: D[4326501]. @multiple */
  #define MICORE2_TESTSEL2_TSTBUSFLIP              0x80

/** Enables pin output driver on 8-bit parallel bus (Note: For serial interfaces
   only) @multiple */
#define MICORE2_TESTPINEN_ADDR                       0x00000033
/** Enables the pin output driver on D[x]. @multiple */
  #define MICORE2_TESTPINEN_TESTPINEN_COUNT        7
  #define MICORE2_TESTPINEN_TESTPINEN(fidx)        (0x01 << ((fidx)))
/** If cleared, the lines MX and DTRQ for the serial UART are disabled. @multiple
   */
  #define MICORE2_TESTPINEN_RS232LINEEN            0x80

/** Defines the values for the 8-bit parallel bus when it is used as I/O bus
   @multiple */
#define MICORE2_TESTPINVALUE_ADDR                    0x00000034
/** Defines the value of the 7-bit parallel port when it is used as I/O.
   @multiple */
  #define MICORE2_TESTPINVALUE_TESTPINVAL_COUNT    7
  #define MICORE2_TESTPINVALUE_TESTPINVAL(fidx)    (0x01 << ((fidx)))
/** If set, this bit enables the I/O functionality for the 7-bit parallel port in
   case one of the serial interfaces is used. The input/output behavior is
   defined by TestPinEn.TestPinEn[x]. The value for the output behavior is
   defined in TestPinVal. @multiple */
  #define MICORE2_TESTPINVALUE_USEIO               0x80

/** Internal testbus status. @multiple */
#define MICORE2_TESTBUS_ADDR                         0x00000035

/** Controls the digital selftest @multiple */
#define MICORE2_AUTOTEST_ADDR                        0x00000036
/** Enables the digital self test. The selftest can be started by the selftest
   command in the command register. @multiple */
  #define MICORE2_AUTOTEST_SELFTEST(v)             ((MICORE2_AUTOTEST_SELFTEST_##v) << 0)
  #define MICORE2_AUTOTEST_SELFTEST_SET(x, v)      do { (x) = (((x) & ~0xf) | ((MICORE2_AUTOTEST_SELFTEST_##v) << 0)); } while(0)
  #define MICORE2_AUTOTEST_SELFTEST_GET(x)         (((x) >> 0) & 0xf)
    #define MICORE2_AUTOTEST_SELFTEST_DISABLED       0x00000000
    #define MICORE2_AUTOTEST_SELFTEST_ENABLED        0x00000009
  #define MICORE2_AUTOTEST_EOFSOFADJUST(v)         ((MICORE2_AUTOTEST_EOFSOFADJUST_##v) << 5)
  #define MICORE2_AUTOTEST_EOFSOFADJUST_SET(x, v)  do { (x) = (((x) & ~0x20) | ((MICORE2_AUTOTEST_EOFSOFADJUST_##v) << 5)); } while(0)
  #define MICORE2_AUTOTEST_EOFSOFADJUST_GET(x)     (((x) >> 5) & 0x1)
/** Minimum length of SOF and EOF according to ISO/IEC14443B */
    #define MICORE2_AUTOTEST_EOFSOFADJUST_MINIMUM    0x00000000
/** Maximum length of SOF and EOF according to ISO/IEC14443B */
    #define MICORE2_AUTOTEST_EOFSOFADJUST_MAXIMUM    0x00000001
/** If set to logic 1, the internal signal processing in the receiver chain is
   performed non-linear. This increases the operating distance in communication
   modes at 106 kbit. @multiple */
  #define MICORE2_AUTOTEST_AMPRCV                  0x40

/** Version byte @multiple */
#define MICORE2_VERSION_ADDR                         0x00000037
  #define MICORE2_VERSION_VERSION(v)               ((MICORE2_VERSION_VERSION_##v) << 0)
  #define MICORE2_VERSION_VERSION_SET(x, v)        do { (x) = (((x) & ~0xf) | ((MICORE2_VERSION_VERSION_##v) << 0)); } while(0)
  #define MICORE2_VERSION_VERSION_GET(x)           (((x) >> 0) & 0xf)
/** v0.0 */
    #define MICORE2_VERSION_VERSION_V0               0x00000000
/** v1.0 */
    #define MICORE2_VERSION_VERSION_V1               0x00000001
/** v2.0 */
    #define MICORE2_VERSION_VERSION_V2               0x00000002
/** Chip type @multiple */
  #define MICORE2_VERSION_CHIPTYPE(v)              ((MICORE2_VERSION_CHIPTYPE_##v) << 4)
  #define MICORE2_VERSION_CHIPTYPE_SET(x, v)       do { (x) = (((x) & ~0xf0) | ((MICORE2_VERSION_CHIPTYPE_##v) << 4)); } while(0)
  #define MICORE2_VERSION_CHIPTYPE_GET(x)          (((x) >> 4) & 0xf)
    #define MICORE2_VERSION_CHIPTYPE_PN512           0x00000008
    #define MICORE2_VERSION_CHIPTYPE_MFRC522         0x00000009
    #define MICORE2_VERSION_CHIPTYPE_PN511           0x0000000a
    #define MICORE2_VERSION_CHIPTYPE_MFRC523         0x0000000b
    #define MICORE2_VERSION_CHIPTYPE_PT501           0x0000000e

/** Controls the pins AUX1 and AUX2 @multiple */
#define MICORE2_ANALOGTEST_ADDR                      0x00000038
/** Controls the AUX pin. @multiple */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_COUNT    2
  #define MICORE2_ANALOGTEST_ANALOGSELAUX(fidx, v) ((MICORE2_ANALOGTEST_ANALOGSELAUX_##v) << ((fidx) * 4 + 0))
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_SET(fidx, x, v) do { (x) = (((x) & ~(0xf << ((fidx) * 4))) | ((MICORE2_ANALOGTEST_ANALOGSELAUX_##v) << ((fidx) * 4 + 0))); } while(0)
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_GET(fidx, x) (((x) >> ((fidx) * 4 + 0)) & 0xf)
/** Tristate */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_TRISTATE 0x00000000
/** Output of TestDAC1 (AUX1), output of TESTDAC2 (AUX2) */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_ADC      0x00000001
/** Testsignal Corr1 */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_CORR1    0x00000002
/** Testsignal Corr2 */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_CORR2    0x00000003
/** Testsignal MinLevel */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_MINLEVEL 0x00000004
/** Testsignal ADC channel I */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_ADCI     0x00000005
/** Testsignal ADC channel Q */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_ADCQ     0x00000006
/** Testsignal ADC channel I combined with Q */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_ADCIQ    0x00000007
/** Testsignal for production test */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_PROD     0x00000008
/** SAM clock (13.56 MHz) */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_SAM      0x00000009
/** HIGH */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_HIGH     0x0000000a
/** LOW */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_LOW      0x0000000b
/** At 106 kbit: HIGH during Startbit, Data bit, Parity and CRC. At 212 and 424 kbit: High during Preamble, Sync, Data and CRC. */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_TXACTIVE 0x0000000c
/** At 106 kbit: High during databit, Parity and CRC. At 212 and 424 kbit: High during data and CRC. */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_RXACTIVE 0x0000000d
/** Subcarrier detected */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_SUBCARRIER 0x0000000e
/** TestBus-Bit as defined by TestSel1.TstBusBitSel. */
  #define MICORE2_ANALOGTEST_ANALOGSELAUX_TESTSEL1 0x0000000f

/** Defines the test value for the TestDAC[x] @multiple */
#define MICORE2_TESTDAC_ADDR(ridx)                   (0x00000039 + (ridx))
#define MICORE2_TESTDAC_COUNT                        2
/** Defines the testvalue for TestDAC[x]. The output of the DAC[x] can be
   switched to AUX[x] by setting AnalogTest.AnalogSelAux[X]. @multiple */
  #define MICORE2_TESTDAC_TESTDAC(v)               ((v) << 0)
  #define MICORE2_TESTDAC_TESTDAC_SET(x, v)        do { (x) = (((x) & ~0x3f) | ((v) << 0)); } while(0)
  #define MICORE2_TESTDAC_TESTDAC_GET(x)           (((x) >> 0) & 0x3f)

/** Current value of ADC I and Q @multiple */
#define MICORE2_TESTADC_ADDR                         0x0000003b
/** Current value of ADC Q channel. @multiple */
  #define MICORE2_TESTADC_Q(v)                     ((v) << 0)
  #define MICORE2_TESTADC_Q_SET(x, v)              do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define MICORE2_TESTADC_Q_GET(x)                 (((x) >> 0) & 0xf)
/** Current value of ADC I channel. @multiple */
  #define MICORE2_TESTADC_I(v)                     ((v) << 4)
  #define MICORE2_TESTADC_I_SET(x, v)              do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define MICORE2_TESTADC_I_GET(x)                 (((x) >> 4) & 0xf)

/** Selects the register address and data direction @multiple */
#define MICORE2_SPICTRL_ADDR                         0x000000ff
/** Register address @multiple */
  #define MICORE2_SPICTRL_ADDRESS(v)               ((v) << 1)
  #define MICORE2_SPICTRL_ADDRESS_SET(x, v)        do { (x) = (((x) & ~0x7e) | ((v) << 1)); } while(0)
  #define MICORE2_SPICTRL_ADDRESS_GET(x)           (((x) >> 1) & 0x3f)
/** Data direction @multiple */
  #define MICORE2_SPICTRL_DIRECTION(v)             ((MICORE2_SPICTRL_DIRECTION_##v) << 7)
  #define MICORE2_SPICTRL_DIRECTION_SET(x, v)      do { (x) = (((x) & ~0x80) | ((MICORE2_SPICTRL_DIRECTION_##v) << 7)); } while(0)
  #define MICORE2_SPICTRL_DIRECTION_GET(x)         (((x) >> 7) & 0x1)
/** Write data to chip */
    #define MICORE2_SPICTRL_DIRECTION_WRITE          0x00000000
/** Read data from chip */
    #define MICORE2_SPICTRL_DIRECTION_READ           0x00000001

#endif

