/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -I arm/itm.bf                                                         \
     -O /home/nipo/projects/mutekh/cpu/arm32m/include/cpu/arm32m/itm.h -o cdefs \
     cdefs_use_field_shift=1
*/

#ifndef _ITM_BFGEN_DEFS_
#define _ITM_BFGEN_DEFS_

/** Tells whether fifo can be written to. If non-zero is read, CPU may write to
   STIM register. @multiple */
#define ITM_STIM_ADDR(ridx)                          (0xe0000000 + (ridx) * 4)
#define ITM_STIM_COUNT                               32

/** Stimulus to send to probe @multiple */
#define ITM_STIM_ADDR(ridx)                          (0xe0000000 + (ridx) * 4)
#define ITM_STIM_COUNT                               32

/** Trace Enable Register @multiple */
#define ITM_TER_ADDR                                 0xe0000e00
  #define ITM_TER_STIMENA_COUNT                    32
  #define ITM_TER_STIMENA(fidx)                    (0x00000001 << ((fidx)))
  #define ITM_TER_STIMENA_SHIFT(fidx)              ((fidx) + 0)

/** Trace Privilege Register @multiple */
#define ITM_TPR_ADDR                                 0xe0000e40
/** Bit mask to enable bytes of STIM register on ports @multiple */
  #define ITM_TPR_PRIVMASK_COUNT                   4
  #define ITM_TPR_PRIVMASK(fidx)                   (0x00000001 << ((fidx)))
  #define ITM_TPR_PRIVMASK_SHIFT(fidx)             ((fidx) + 0)

/** Trace Control Register @multiple */
#define ITM_TCR_ADDR                                 0xe0000e80
/** Enables the ITM @multiple */
  #define ITM_TCR_ITMENA                           0x00000001
  #define ITM_TCR_ITMENA_SHIFT                     0
/** Enables Local timestamp generation @multiple */
  #define ITM_TCR_TSENA                            0x00000002
  #define ITM_TCR_TSENA_SHIFT                      1
/** Enables Synchronization packet transmission for a synchronous TPIU @multiple
   */
  #define ITM_TCR_SYNCENA                          0x00000004
  #define ITM_TCR_SYNCENA_SHIFT                    2
/** Enables forwarding of hardware event packet from the DWT unit to the TPIU
   @multiple */
  #define ITM_TCR_DWTENA                           0x00000008
  #define ITM_TCR_DWTENA_SHIFT                     3
/** Enables asynchronous clocking of the timestamp counter @multiple */
  #define ITM_TCR_SWOENA                           0x00000010
  #define ITM_TCR_SWOENA_SHIFT                     4
/** Local timestamp prescaler, used with the trace packet reference clock
   @multiple */
  #define ITM_TCR_TSPRESCALE_SHIFT                 8
  #define ITM_TCR_TSPRESCALE(v)                    ((ITM_TCR_TSPRESCALE_##v) << 8)
  #define ITM_TCR_TSPRESCALE_SET(x, v)             do { (x) = (((x) & ~0x300) | ((ITM_TCR_TSPRESCALE_##v) << 8)); } while(0)
  #define ITM_TCR_TSPRESCALE_GET(x)                (((x) >> 8) & 0x3)
    #define ITM_TCR_TSPRESCALE_NO_PRESCALING         0x00000000
    #define ITM_TCR_TSPRESCALE_DIVIDE_BY_4           0x00000001
    #define ITM_TCR_TSPRESCALE_DIVIDE_BY_16          0x00000002
    #define ITM_TCR_TSPRESCALE_DIVIDE_BY_64          0x00000003
/** Global timestamp frequency. Defines how often the ITM generates a global
   timestamp, based on the global timestamp clock frequency, or disables
   generation of global timestamps @multiple */
  #define ITM_TCR_GTSFREQ_SHIFT                    10
  #define ITM_TCR_GTSFREQ(v)                       ((ITM_TCR_GTSFREQ_##v) << 10)
  #define ITM_TCR_GTSFREQ_SET(x, v)                do { (x) = (((x) & ~0xc00) | ((ITM_TCR_GTSFREQ_##v) << 10)); } while(0)
  #define ITM_TCR_GTSFREQ_GET(x)                   (((x) >> 10) & 0x3)
/** Disable generation of global timestamps */
    #define ITM_TCR_GTSFREQ_DISABLED                 0x00000000
/** Generate timestamp request whenever the ITM detects a change in global timestamp counter bits [47:7]. This is approximately every 128 cycles */
    #define ITM_TCR_GTSFREQ_EVERY_128                0x00000001
/** Generate timestamp request whenever the ITM detects a change in global timestamp counter bits [47:13]. This is approximately every 8192 cycles */
    #define ITM_TCR_GTSFREQ_EVERY_8192               0x00000002
/** Generate a timestamp after every packet, if the output FIFO is empty */
    #define ITM_TCR_GTSFREQ_ON_EMPTY                 0x00000003
/** Identifier for multi-source trace stream formatting. If multi-source trace is
   in use, the debugger must write a non-zero value to this field @multiple */
  #define ITM_TCR_TRACEBUSID_SHIFT                 16
  #define ITM_TCR_TRACEBUSID(v)                    ((v) << 16)
  #define ITM_TCR_TRACEBUSID_SET(x, v)             do { (x) = (((x) & ~0x7f0000) | ((v) << 16)); } while(0)
  #define ITM_TCR_TRACEBUSID_GET(x)                (((x) >> 16) & 0x7f)
/** Indicates whether the ITM is currently processing events: 0: ITM is not
   processing any events. 1: ITM events present and being drained @multiple */
  #define ITM_TCR_BUSY_SHIFT                       23
  #define ITM_TCR_BUSY(v)                          ((ITM_TCR_BUSY_##v) << 23)
  #define ITM_TCR_BUSY_SET(x, v)                   do { (x) = (((x) & ~0x800000) | ((ITM_TCR_BUSY_##v) << 23)); } while(0)
  #define ITM_TCR_BUSY_GET(x)                      (((x) >> 23) & 0x1)
    #define ITM_TCR_BUSY_ITM_IS_NOT_PROCESSING_ANY_EVENTS 0x00000000
    #define ITM_TCR_BUSY_ITM_EVENTS_PRESENT_AND_BEEING_DRAINED 0x00000001

/** Lock Access Register @multiple */
#define ITM_LAR_ADDR                                 0xe0000fb0
/** Access Code @multiple */
  #define ITM_LAR_ACCESS_SHIFT                     0
  #define ITM_LAR_ACCESS(v)                        ((ITM_LAR_ACCESS_##v) << 0)
  #define ITM_LAR_ACCESS_SET(x, v)                 do { (x) = (((x) & ~0xffffffff) | ((ITM_LAR_ACCESS_##v) << 0)); } while(0)
  #define ITM_LAR_ACCESS_GET(x)                    (((x) >> 0) & 0xffffffff)
    #define ITM_LAR_ACCESS_DISABLE                   0x00000000
    #define ITM_LAR_ACCESS_ENABLE                    0xc5acce55

/** Lock Status Register @multiple */
#define ITM_LSR_ADDR                                 0xe0000fb4
/** Lock mechanism is implemented. This bit always reads 1 @multiple */
  #define ITM_LSR_IMP                              0x00000001
  #define ITM_LSR_IMP_SHIFT                        0
/** Lock Status. This bit is HIGH when the device is locked, and LOW when
   unlocked @multiple */
  #define ITM_LSR_STATUS                           0x00000002
  #define ITM_LSR_STATUS_SHIFT                     1
/** Access Lock Register size. This bit reads 0 to indicate a 32-bit register is
   present @multiple */
  #define ITM_LSR_S8BIT                            0x00000004
  #define ITM_LSR_S8BIT_SHIFT                      2

/** Peripheral Identification Register 4 @multiple */
#define ITM_PID4_ADDR                                0xe0000fd0
/** JEP106 continuation code @multiple */
  #define ITM_PID4_JEP106_SHIFT                    0
  #define ITM_PID4_JEP106(v)                       ((v) << 0)
  #define ITM_PID4_JEP106_SET(x, v)                do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define ITM_PID4_JEP106_GET(x)                   (((x) >> 0) & 0xf)
/** 4KB Count @multiple */
  #define ITM_PID4_C4KB_SHIFT                      4
  #define ITM_PID4_C4KB(v)                         ((v) << 4)
  #define ITM_PID4_C4KB_SET(x, v)                  do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define ITM_PID4_C4KB_GET(x)                     (((x) >> 4) & 0xf)

/** Peripheral Identification Register 5 @multiple */
#define ITM_PID5_ADDR                                0xe0000fd4

/** Peripheral Identification Register 6 @multiple */
#define ITM_PID6_ADDR                                0xe0000fd8

/** Peripheral Identification Register 7 @multiple */
#define ITM_PID7_ADDR                                0xe0000fdc

/** Peripheral Identification Register 0 @multiple */
#define ITM_PID0_ADDR                                0xe0000fe0
/** Part Number [7:0] @multiple */
  #define ITM_PID0_PARTNUMBER_SHIFT                0
  #define ITM_PID0_PARTNUMBER(v)                   ((v) << 0)
  #define ITM_PID0_PARTNUMBER_SET(x, v)            do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define ITM_PID0_PARTNUMBER_GET(x)               (((x) >> 0) & 0xff)

/** Peripheral Identification Register 1 @multiple */
#define ITM_PID1_ADDR                                0xe0000fe4
/** Part Number [11:8] @multiple */
  #define ITM_PID1_PARTNUMBER_SHIFT                0
  #define ITM_PID1_PARTNUMBER(v)                   ((v) << 0)
  #define ITM_PID1_PARTNUMBER_SET(x, v)            do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define ITM_PID1_PARTNUMBER_GET(x)               (((x) >> 0) & 0xf)
/** JEP106 identity code [3:0] @multiple */
  #define ITM_PID1_JEP106_IDENTITY_CODE_SHIFT      4
  #define ITM_PID1_JEP106_IDENTITY_CODE(v)         ((v) << 4)
  #define ITM_PID1_JEP106_IDENTITY_CODE_SET(x, v)  do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define ITM_PID1_JEP106_IDENTITY_CODE_GET(x)     (((x) >> 4) & 0xf)

/** Peripheral Identification Register 2 @multiple */
#define ITM_PID2_ADDR                                0xe0000fe8
/** JEP106 identity code [6:4] @multiple */
  #define ITM_PID2_JEP106_IDENTITY_CODE_SHIFT      0
  #define ITM_PID2_JEP106_IDENTITY_CODE(v)         ((v) << 0)
  #define ITM_PID2_JEP106_IDENTITY_CODE_SET(x, v)  do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define ITM_PID2_JEP106_IDENTITY_CODE_GET(x)     (((x) >> 0) & 0x7)
/** Revision @multiple */
  #define ITM_PID2_REVISION_SHIFT                  4
  #define ITM_PID2_REVISION(v)                     ((v) << 4)
  #define ITM_PID2_REVISION_SET(x, v)              do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define ITM_PID2_REVISION_GET(x)                 (((x) >> 4) & 0xf)

/** Peripheral Identification Register 3 @multiple */
#define ITM_PID3_ADDR                                0xe0000fec
/** Customer Modified @multiple */
  #define ITM_PID3_CUSTOMERMODIFIED_SHIFT          0
  #define ITM_PID3_CUSTOMERMODIFIED(v)             ((v) << 0)
  #define ITM_PID3_CUSTOMERMODIFIED_SET(x, v)      do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define ITM_PID3_CUSTOMERMODIFIED_GET(x)         (((x) >> 0) & 0xf)
/** RevAnd @multiple */
  #define ITM_PID3_REVAND_SHIFT                    4
  #define ITM_PID3_REVAND(v)                       ((v) << 4)
  #define ITM_PID3_REVAND_SET(x, v)                do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define ITM_PID3_REVAND_GET(x)                   (((x) >> 4) & 0xf)

/** Component Identification Register 0 @multiple */
#define ITM_CID0_ADDR                                0xe0000ff0
/** Preamble @multiple */
  #define ITM_CID0_PREAMBLE_SHIFT                  0
  #define ITM_CID0_PREAMBLE(v)                     ((v) << 0)
  #define ITM_CID0_PREAMBLE_SET(x, v)              do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define ITM_CID0_PREAMBLE_GET(x)                 (((x) >> 0) & 0xff)

/** Component Identification Register 1 @multiple */
#define ITM_CID1_ADDR                                0xe0000ff4
/** Preamble @multiple */
  #define ITM_CID1_PREAMBLE_SHIFT                  0
  #define ITM_CID1_PREAMBLE(v)                     ((v) << 0)
  #define ITM_CID1_PREAMBLE_SET(x, v)              do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define ITM_CID1_PREAMBLE_GET(x)                 (((x) >> 0) & 0xf)
/** Component class @multiple */
  #define ITM_CID1_COMPONENTCLASS_SHIFT            4
  #define ITM_CID1_COMPONENTCLASS(v)               ((ITM_CID1_COMPONENTCLASS_##v) << 4)
  #define ITM_CID1_COMPONENTCLASS_SET(x, v)        do { (x) = (((x) & ~0xf0) | ((ITM_CID1_COMPONENTCLASS_##v) << 4)); } while(0)
  #define ITM_CID1_COMPONENTCLASS_GET(x)           (((x) >> 4) & 0xf)
    #define ITM_CID1_COMPONENTCLASS_ROM_TABLE        0x00000001
    #define ITM_CID1_COMPONENTCLASS_CORESIGHT_COMPONENT 0x00000009
    #define ITM_CID1_COMPONENTCLASS_PRIMECELL_OF_SYSTEM_COMPONENT_WITH_NO_STANDARDIZED_REGISTER_LAYOUT_FOR_BACKWARD_COMPATIBILITY 0x0000000f

/** Component Identification Register 2 @multiple */
#define ITM_CID2_ADDR                                0xe0000ff8
/** Preamble @multiple */
  #define ITM_CID2_PREAMBLE_SHIFT                  0
  #define ITM_CID2_PREAMBLE(v)                     ((v) << 0)
  #define ITM_CID2_PREAMBLE_SET(x, v)              do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define ITM_CID2_PREAMBLE_GET(x)                 (((x) >> 0) & 0xff)

/** Component Identification Register 3 @multiple */
#define ITM_CID3_ADDR                                0xe0000ffc
/** Preamble @multiple */
  #define ITM_CID3_PREAMBLE_SHIFT                  0
  #define ITM_CID3_PREAMBLE(v)                     ((v) << 0)
  #define ITM_CID3_PREAMBLE_SET(x, v)              do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define ITM_CID3_PREAMBLE_GET(x)                 (((x) >> 0) & 0xff)

#endif

