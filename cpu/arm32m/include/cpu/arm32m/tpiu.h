/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -I arm/tpiu.bf                                                        \
     -O /home/nipo/projects/mutekh/cpu/arm32m/include/cpu/arm32m/tpiu.h        \
     -o cdefs cdefs_use_field_shift=1
*/

#ifndef _TPIU_BFGEN_DEFS_
#define _TPIU_BFGEN_DEFS_

/** Supported Parallel Port Size Register @multiple */
#define TPIU_SSPSR_ADDR                              0xe0040000
/** SWIDTH[N] represents a trace port width of (N+1). The meaning of each bit is:
   0 = Width (N+1) not supported. 1 = Width (N+1) supported @multiple */
  #define TPIU_SSPSR_SWIDTH_SHIFT                  0
  #define TPIU_SSPSR_SWIDTH(v)                     ((v) << 0)
  #define TPIU_SSPSR_SWIDTH_SET(x, v)              do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define TPIU_SSPSR_SWIDTH_GET(x)                 (((x) >> 0) & 0xffffffff)

/** Current Parallel Port Size Register @multiple */
#define TPIU_CSPSR_ADDR                              0xe0040004
/** Represents a trace port width of (N+1). @multiple */
  #define TPIU_CSPSR_CWIDTH_COUNT                  32
  #define TPIU_CSPSR_CWIDTH(fidx)                  (0x00000001 << ((fidx)))
  #define TPIU_CSPSR_CWIDTH_SHIFT(fidx)            ((fidx) + 0)

/** Asynchronous Clock Prescaler Register @multiple */
#define TPIU_ACPR_ADDR                               0xe0040010
/** Divisor for TRACECLKIN is Prescaler + 1 @multiple */
  #define TPIU_ACPR_PRESCALER_SHIFT                0
  #define TPIU_ACPR_PRESCALER(v)                   ((v) << 0)
  #define TPIU_ACPR_PRESCALER_SET(x, v)            do { (x) = (((x) & ~0x1fff) | ((v) << 0)); } while(0)
  #define TPIU_ACPR_PRESCALER_GET(x)               (((x) >> 0) & 0x1fff)

/** Selected Pin Protocol Register @multiple */
#define TPIU_SPPR_ADDR                               0xe00400f0
/** Specified the protocol for trace output from the TPIU @multiple */
  #define TPIU_SPPR_TXMODE_SHIFT                   0
  #define TPIU_SPPR_TXMODE(v)                      ((TPIU_SPPR_TXMODE_##v) << 0)
  #define TPIU_SPPR_TXMODE_SET(x, v)               do { (x) = (((x) & ~0x3) | ((TPIU_SPPR_TXMODE_##v) << 0)); } while(0)
  #define TPIU_SPPR_TXMODE_GET(x)                  (((x) >> 0) & 0x3)
/** Parallel trace port mode */
    #define TPIU_SPPR_TXMODE_PARALLEL                0x00000000
/** Asynchronous SWO, using Manchester encoding */
    #define TPIU_SPPR_TXMODE_MACHESTER               0x00000001
/** Asynchronous SWO, using NRZ encoding */
    #define TPIU_SPPR_TXMODE_NRZ                     0x00000002
/** The effect of selecting a reserved value, or a mode that the implementation does not support, is UNPREDICTABLE */
    #define TPIU_SPPR_TXMODE_RESERVED                0x00000003

/** Formatter and Flush Status Register @multiple */
#define TPIU_FFSR_ADDR                               0xe0040300
/** F1InProg. This bit always reads zero @multiple */
  #define TPIU_FFSR_F1INPROG                       0x00000001
  #define TPIU_FFSR_F1INPROG_SHIFT                 0
/** FtStopped. This bit always reads zero @multiple */
  #define TPIU_FFSR_FTSTOPPED                      0x00000002
  #define TPIU_FFSR_FTSTOPPED_SHIFT                1
/** TCPresent. This bit always reads zero @multiple */
  #define TPIU_FFSR_TCPRESENT                      0x00000004
  #define TPIU_FFSR_TCPRESENT_SHIFT                2
/** FtNonStop. Formatter cannot be stopped @multiple */
  #define TPIU_FFSR_FTNONSTOP                      0x00000008
  #define TPIU_FFSR_FTNONSTOP_SHIFT                3

/** Formatter and Flush Control Register @multiple */
#define TPIU_FFCR_ADDR                               0xe0040304
/** Enable Formatting @multiple */
  #define TPIU_FFCR_ENFTC                          0x00000001
  #define TPIU_FFCR_ENFTC_SHIFT                    0
/** Enable Continuous Formatting @multiple */
  #define TPIU_FFCR_ENFCONT                        0x00000002
  #define TPIU_FFCR_ENFCONT_SHIFT                  1
/** Generate flush using the FLUSHIN interface @multiple */
  #define TPIU_FFCR_FONFLIN                        0x00000010
  #define TPIU_FFCR_FONFLIN_SHIFT                  4
/** Generate flush on Trigger event @multiple */
  #define TPIU_FFCR_FONTRIG                        0x00000020
  #define TPIU_FFCR_FONTRIG_SHIFT                  5
/** Trigger manual flush @multiple */
  #define TPIU_FFCR_FONMAN                         0x00000040
  #define TPIU_FFCR_FONMAN_SHIFT                   6
/** Indicate a trigger on TRIGIN being asserted @multiple */
  #define TPIU_FFCR_TRIGIN                         0x00000100
  #define TPIU_FFCR_TRIGIN_SHIFT                   8
/** Indicate a trigger on Trigger event @multiple */
  #define TPIU_FFCR_TRIGEVT                        0x00000200
  #define TPIU_FFCR_TRIGEVT_SHIFT                  9
/** Indicate a trigger on Flush completion @multiple */
  #define TPIU_FFCR_TRIGFL                         0x00000400
  #define TPIU_FFCR_TRIGFL_SHIFT                   10
/** Stop the formatter after a flush completes (return of AFREADYS). This forces
   the FIFO to drain off any part-completed packets. @multiple */
  #define TPIU_FFCR_STOPFL                         0x00001000
  #define TPIU_FFCR_STOPFL_SHIFT                   12
/** Stop the formatter after a Trigger Event is observed. @multiple */
  #define TPIU_FFCR_STOPTRIG                       0x00002000
  #define TPIU_FFCR_STOPTRIG_SHIFT                 13

/** Formatter Synchronization Counter Register @multiple */
#define TPIU_FSCR_ADDR                               0xe0040308
/** CycCount[11:0]. 12-bit counter value to indicate the number of complete
   frames between full synchronization packets. Default value is 64 (0x40)
   @multiple */
  #define TPIU_FSCR_CYCCOUNT_SHIFT                 0
  #define TPIU_FSCR_CYCCOUNT(v)                    ((v) << 0)
  #define TPIU_FSCR_CYCCOUNT_SET(x, v)             do { (x) = (((x) & ~0xfff) | ((v) << 0)); } while(0)
  #define TPIU_FSCR_CYCCOUNT_GET(x)                (((x) >> 0) & 0xfff)

/** Trigger Register @multiple */
#define TPIU_TRIGGER_ADDR                            0xe0040ee8
/** TRIGGER input value. When read, this bit returns the TRIGGER input @multiple
   */
  #define TPIU_TRIGGER_TRIGGER                     0x00000001
  #define TPIU_TRIGGER_TRIGGER_SHIFT               0

/** FIFODATA0 Register @multiple */
#define TPIU_FIFODATA0_ADDR                          0xe0040eec
/** ETM trace data. The TPIU discards this data when the registers is read
   @multiple */
  #define TPIU_FIFODATA0_ETMDATA0_SHIFT            0
  #define TPIU_FIFODATA0_ETMDATA0(v)               ((v) << 0)
  #define TPIU_FIFODATA0_ETMDATA0_SET(x, v)        do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define TPIU_FIFODATA0_ETMDATA0_GET(x)           (((x) >> 0) & 0xff)
/** ETM trace data. The TPIU discards this data when the registers is read
   @multiple */
  #define TPIU_FIFODATA0_ETMDATA1_SHIFT            8
  #define TPIU_FIFODATA0_ETMDATA1(v)               ((v) << 8)
  #define TPIU_FIFODATA0_ETMDATA1_SET(x, v)        do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define TPIU_FIFODATA0_ETMDATA1_GET(x)           (((x) >> 8) & 0xff)
/** ETM trace data. The TPIU discards this data when the registers is read
   @multiple */
  #define TPIU_FIFODATA0_ETMDATA2_SHIFT            16
  #define TPIU_FIFODATA0_ETMDATA2(v)               ((v) << 16)
  #define TPIU_FIFODATA0_ETMDATA2_SET(x, v)        do { (x) = (((x) & ~0xff0000) | ((v) << 16)); } while(0)
  #define TPIU_FIFODATA0_ETMDATA2_GET(x)           (((x) >> 16) & 0xff)
/** Number of bytes of ETM trace data since last read of Integration ETM Data
   Register @multiple */
  #define TPIU_FIFODATA0_ETMBYTECOUNT_SHIFT        24
  #define TPIU_FIFODATA0_ETMBYTECOUNT(v)           ((v) << 24)
  #define TPIU_FIFODATA0_ETMBYTECOUNT_SET(x, v)    do { (x) = (((x) & ~0x3000000) | ((v) << 24)); } while(0)
  #define TPIU_FIFODATA0_ETMBYTECOUNT_GET(x)       (((x) >> 24) & 0x3)
/** Returns the value of the ETM ATVALID signal @multiple */
  #define TPIU_FIFODATA0_ETMATVALID                0x04000000
  #define TPIU_FIFODATA0_ETMATVALID_SHIFT          26
/** Number of bytes of ITM trace data since last read of Integration ITM Data
   Register @multiple */
  #define TPIU_FIFODATA0_ITMBYTECOUNT_SHIFT        27
  #define TPIU_FIFODATA0_ITMBYTECOUNT(v)           ((v) << 27)
  #define TPIU_FIFODATA0_ITMBYTECOUNT_SET(x, v)    do { (x) = (((x) & ~0x18000000) | ((v) << 27)); } while(0)
  #define TPIU_FIFODATA0_ITMBYTECOUNT_GET(x)       (((x) >> 27) & 0x3)
/** Returns the value of the ITM ATVALID signal @multiple */
  #define TPIU_FIFODATA0_ITMATVALID                0x20000000
  #define TPIU_FIFODATA0_ITMATVALID_SHIFT          29

/** Integration Test ATB Control 2 Register @multiple */
#define TPIU_ITATBCTR2_ADDR                          0xe0040ef0
/** This bit sets the value of both the ETM and ITM ATREADY @multiple */
  #define TPIU_ITATBCTR2_ATREADY1_ATREADY2         0x00000001
  #define TPIU_ITATBCTR2_ATREADY1_ATREADY2_SHIFT   0

/** Integration Test ATB Control 0 Register @multiple */
#define TPIU_ITATBCTR0_ADDR                          0xe0040ef8
/** A read of this bit returns the value of ATVALIDS1 OR-ed with ATVALIDS2
   @multiple */
  #define TPIU_ITATBCTR0_ATVALID1_ATVALID2         0x00000001
  #define TPIU_ITATBCTR0_ATVALID1_ATVALID2_SHIFT   0

/** FIFODATA1 Register @multiple */
#define TPIU_FIFODATA1_ADDR                          0xe0040efc
/** ITM trace data. The TPIU discards this data when the registers is read
   @multiple */
  #define TPIU_FIFODATA1_ITMDATA0_SHIFT            0
  #define TPIU_FIFODATA1_ITMDATA0(v)               ((v) << 0)
  #define TPIU_FIFODATA1_ITMDATA0_SET(x, v)        do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define TPIU_FIFODATA1_ITMDATA0_GET(x)           (((x) >> 0) & 0xff)
/** ITM trace data. The TPIU discards this data when the registers is read
   @multiple */
  #define TPIU_FIFODATA1_ITMDATA1_SHIFT            8
  #define TPIU_FIFODATA1_ITMDATA1(v)               ((v) << 8)
  #define TPIU_FIFODATA1_ITMDATA1_SET(x, v)        do { (x) = (((x) & ~0xff00) | ((v) << 8)); } while(0)
  #define TPIU_FIFODATA1_ITMDATA1_GET(x)           (((x) >> 8) & 0xff)
/** ITM trace data. The TPIU discards this data when the registers is read
   @multiple */
  #define TPIU_FIFODATA1_ITMDATA2_SHIFT            16
  #define TPIU_FIFODATA1_ITMDATA2(v)               ((v) << 16)
  #define TPIU_FIFODATA1_ITMDATA2_SET(x, v)        do { (x) = (((x) & ~0xff0000) | ((v) << 16)); } while(0)
  #define TPIU_FIFODATA1_ITMDATA2_GET(x)           (((x) >> 16) & 0xff)
/** Number of bytes of ETM trace data since last read of Integration ETM Data
   Register @multiple */
  #define TPIU_FIFODATA1_ETMBYTECOUNT_SHIFT        24
  #define TPIU_FIFODATA1_ETMBYTECOUNT(v)           ((v) << 24)
  #define TPIU_FIFODATA1_ETMBYTECOUNT_SET(x, v)    do { (x) = (((x) & ~0x3000000) | ((v) << 24)); } while(0)
  #define TPIU_FIFODATA1_ETMBYTECOUNT_GET(x)       (((x) >> 24) & 0x3)
/** Returns the value of the ETM ATVALID signal @multiple */
  #define TPIU_FIFODATA1_ETMATVALID                0x04000000
  #define TPIU_FIFODATA1_ETMATVALID_SHIFT          26
/** Number of bytes of ITM trace data since last read of Integration ITM Data
   Register @multiple */
  #define TPIU_FIFODATA1_ITMBYTECOUNT_SHIFT        27
  #define TPIU_FIFODATA1_ITMBYTECOUNT(v)           ((v) << 27)
  #define TPIU_FIFODATA1_ITMBYTECOUNT_SET(x, v)    do { (x) = (((x) & ~0x18000000) | ((v) << 27)); } while(0)
  #define TPIU_FIFODATA1_ITMBYTECOUNT_GET(x)       (((x) >> 27) & 0x3)
/** Returns the value of the ITM ATVALID signal @multiple */
  #define TPIU_FIFODATA1_ITMATVALID                0x20000000
  #define TPIU_FIFODATA1_ITMATVALID_SHIFT          29

/** Integration Mode Control Register @multiple */
#define TPIU_ITCTRL_ADDR                             0xe0040f00
/** Specifies the current mode for the TPIU @multiple */
  #define TPIU_ITCTRL_MODE_SHIFT                   0
  #define TPIU_ITCTRL_MODE(v)                      ((TPIU_ITCTRL_MODE_##v) << 0)
  #define TPIU_ITCTRL_MODE_SET(x, v)               do { (x) = (((x) & ~0x3) | ((TPIU_ITCTRL_MODE_##v) << 0)); } while(0)
  #define TPIU_ITCTRL_MODE_GET(x)                  (((x) >> 0) & 0x3)
    #define TPIU_ITCTRL_MODE_NORMAL_MODE             0x00000000
    #define TPIU_ITCTRL_MODE_INTEGRATION_TEST_MODE   0x00000001
    #define TPIU_ITCTRL_MODE_INTEGRATION_DATA_TEST_MODE 0x00000002
    #define TPIU_ITCTRL_MODE_RESERVED                0x00000003

/** Claim Tag Set Register @multiple */
#define TPIU_CLAIMSET_ADDR                           0xe0040fa0
/** A bit programmable register bank which sets the Claim Tag Value. Write 1 to
   set the bit in the claim tag. A read will return a logic 1 for all implemented
   locations @multiple */
  #define TPIU_CLAIMSET_CLAIMSET_SHIFT             0
  #define TPIU_CLAIMSET_CLAIMSET(v)                ((v) << 0)
  #define TPIU_CLAIMSET_CLAIMSET_SET(x, v)         do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define TPIU_CLAIMSET_CLAIMSET_GET(x)            (((x) >> 0) & 0xf)

/** Claim Tag Clear Register @multiple */
#define TPIU_CLAIMCLR_ADDR                           0xe0040fa4
/** A bit programmable register bank that is zero at reset. Write 1 to clear the
   bit in the claim tag. On reads, returns the current setting of the claim tag
   @multiple */
  #define TPIU_CLAIMCLR_CLAIMCLR_SHIFT             0
  #define TPIU_CLAIMCLR_CLAIMCLR(v)                ((v) << 0)
  #define TPIU_CLAIMCLR_CLAIMCLR_SET(x, v)         do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define TPIU_CLAIMCLR_CLAIMCLR_GET(x)            (((x) >> 0) & 0xf)

/** TPIU_DEVID Register @multiple */
#define TPIU_DEVID_ADDR                              0xe0040fc8
/** Number of trace inputs. Specifies the number of trace inputs: b000000 = 1
   input b000001 = 2 inputs If your implementation includes an ETM, the value of
   this field is b000001 @multiple */
  #define TPIU_DEVID_NUMBEROFTRACEINPUTS_SHIFT     0
  #define TPIU_DEVID_NUMBEROFTRACEINPUTS(v)        ((v) << 0)
  #define TPIU_DEVID_NUMBEROFTRACEINPUTS_SET(x, v) do { (x) = (((x) & ~0x1f) | ((v) << 0)); } while(0)
  #define TPIU_DEVID_NUMBEROFTRACEINPUTS_GET(x)    (((x) >> 0) & 0x1f)
/** Asynchronous TRACECLKIN. Specifies whether TRACECLKIN can be asynchronous to
   CLK @multiple */
  #define TPIU_DEVID_TRACECELKIN_SHIFT             5
  #define TPIU_DEVID_TRACECELKIN(v)                ((TPIU_DEVID_TRACECELKIN_##v) << 5)
  #define TPIU_DEVID_TRACECELKIN_SET(x, v)         do { (x) = (((x) & ~0x20) | ((TPIU_DEVID_TRACECELKIN_##v) << 5)); } while(0)
  #define TPIU_DEVID_TRACECELKIN_GET(x)            (((x) >> 5) & 0x1)
    #define TPIU_DEVID_TRACECELKIN_B0_TRACECLKIN_MUST_BE_SYNCHRONOUS_TO_CLK 0x00000000
    #define TPIU_DEVID_TRACECELKIN_B1_TRACECLKIN_CAN_BE_ASYNCHRONOUS_TO_CLK 0x00000001
/** Minimum buffer size. Specifies the minimum TPIU buffer size: b010 = 4 bytes
   @multiple */
  #define TPIU_DEVID_MINIMUMBUFFERSIZE_SHIFT       6
  #define TPIU_DEVID_MINIMUMBUFFERSIZE(v)          ((v) << 6)
  #define TPIU_DEVID_MINIMUMBUFFERSIZE_SET(x, v)   do { (x) = (((x) & ~0x1c0) | ((v) << 6)); } while(0)
  #define TPIU_DEVID_MINIMUMBUFFERSIZE_GET(x)      (((x) >> 6) & 0x7)
/** Trace and clock modes. This bit Reads-As-Zero (RAZ), indicating that
   tracedata and clock modes are supported @multiple */
  #define TPIU_DEVID_TRACEANDCLOCKMODES_SHIFT      9
  #define TPIU_DEVID_TRACEANDCLOCKMODES(v)         ((TPIU_DEVID_TRACEANDCLOCKMODES_##v) << 9)
  #define TPIU_DEVID_TRACEANDCLOCKMODES_SET(x, v)  do { (x) = (((x) & ~0x200) | ((TPIU_DEVID_TRACEANDCLOCKMODES_##v) << 9)); } while(0)
  #define TPIU_DEVID_TRACEANDCLOCKMODES_GET(x)     (((x) >> 9) & 0x1)
    #define TPIU_DEVID_TRACEANDCLOCKMODES_SUPPORTED  0x00000000
    #define TPIU_DEVID_TRACEANDCLOCKMODES_NOT_SUPPORTED 0x00000001
/** Asynchronous Serial Wire Output (Manchester). This bit Reads-As-One (RAO),
   indicating that the output is supported @multiple */
  #define TPIU_DEVID_MANCHESTER                    0x00000400
  #define TPIU_DEVID_MANCHESTER_SHIFT              10
/** Asynchronous Serial Wire Output (NRZ). This bit Reads-As-One (RAO),
   indicating that the output is supported @multiple */
  #define TPIU_DEVID_NRZ                           0x00000800
  #define TPIU_DEVID_NRZ_SHIFT                     11

/** Peripheral Identification Register 4 @multiple */
#define TPIU_PID4_ADDR                               0xe0040fd0
/** JEP106 continuation code @multiple */
  #define TPIU_PID4_JEP106_SHIFT                   0
  #define TPIU_PID4_JEP106(v)                      ((v) << 0)
  #define TPIU_PID4_JEP106_SET(x, v)               do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define TPIU_PID4_JEP106_GET(x)                  (((x) >> 0) & 0xf)
/** 4KB Count @multiple */
  #define TPIU_PID4_C4KB_SHIFT                     4
  #define TPIU_PID4_C4KB(v)                        ((v) << 4)
  #define TPIU_PID4_C4KB_SET(x, v)                 do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define TPIU_PID4_C4KB_GET(x)                    (((x) >> 4) & 0xf)

/** Peripheral Identification Register 5 @multiple */
#define TPIU_PID5_ADDR                               0xe0040fd4

/** Peripheral Identification Register 6 @multiple */
#define TPIU_PID6_ADDR                               0xe0040fd8

/** Peripheral Identification Register 7 @multiple */
#define TPIU_PID7_ADDR                               0xe0040fdc

/** Peripheral Identification Register 0 @multiple */
#define TPIU_PID0_ADDR                               0xe0040fe0
/** Part Number [7:0] @multiple */
  #define TPIU_PID0_PARTNUMBER_SHIFT               0
  #define TPIU_PID0_PARTNUMBER(v)                  ((v) << 0)
  #define TPIU_PID0_PARTNUMBER_SET(x, v)           do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define TPIU_PID0_PARTNUMBER_GET(x)              (((x) >> 0) & 0xff)

/** Peripheral Identification Register 1 @multiple */
#define TPIU_PID1_ADDR                               0xe0040fe4
/** Part Number [11:8] @multiple */
  #define TPIU_PID1_PARTNUMBER_SHIFT               0
  #define TPIU_PID1_PARTNUMBER(v)                  ((v) << 0)
  #define TPIU_PID1_PARTNUMBER_SET(x, v)           do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define TPIU_PID1_PARTNUMBER_GET(x)              (((x) >> 0) & 0xf)
/** JEP106 identity code [3:0] @multiple */
  #define TPIU_PID1_JEP106_IDENTITY_CODE_SHIFT     4
  #define TPIU_PID1_JEP106_IDENTITY_CODE(v)        ((v) << 4)
  #define TPIU_PID1_JEP106_IDENTITY_CODE_SET(x, v) do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define TPIU_PID1_JEP106_IDENTITY_CODE_GET(x)    (((x) >> 4) & 0xf)

/** Peripheral Identification Register 2 @multiple */
#define TPIU_PID2_ADDR                               0xe0040fe8
/** JEP106 identity code [6:4] @multiple */
  #define TPIU_PID2_JEP106_IDENTITY_CODE_SHIFT     0
  #define TPIU_PID2_JEP106_IDENTITY_CODE(v)        ((v) << 0)
  #define TPIU_PID2_JEP106_IDENTITY_CODE_SET(x, v) do { (x) = (((x) & ~0x7) | ((v) << 0)); } while(0)
  #define TPIU_PID2_JEP106_IDENTITY_CODE_GET(x)    (((x) >> 0) & 0x7)
/** Revision @multiple */
  #define TPIU_PID2_REVISION_SHIFT                 4
  #define TPIU_PID2_REVISION(v)                    ((v) << 4)
  #define TPIU_PID2_REVISION_SET(x, v)             do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define TPIU_PID2_REVISION_GET(x)                (((x) >> 4) & 0xf)

/** Peripheral Identification Register 3 @multiple */
#define TPIU_PID3_ADDR                               0xe0040fec
/** Customer Modified @multiple */
  #define TPIU_PID3_CUSTOMERMODIFIED_SHIFT         0
  #define TPIU_PID3_CUSTOMERMODIFIED(v)            ((v) << 0)
  #define TPIU_PID3_CUSTOMERMODIFIED_SET(x, v)     do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define TPIU_PID3_CUSTOMERMODIFIED_GET(x)        (((x) >> 0) & 0xf)
/** RevAnd @multiple */
  #define TPIU_PID3_REVAND_SHIFT                   4
  #define TPIU_PID3_REVAND(v)                      ((v) << 4)
  #define TPIU_PID3_REVAND_SET(x, v)               do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define TPIU_PID3_REVAND_GET(x)                  (((x) >> 4) & 0xf)

/** Component Identification Register 0 @multiple */
#define TPIU_CID0_ADDR                               0xe0040ff0
/** Preamble @multiple */
  #define TPIU_CID0_PREAMBLE_SHIFT                 0
  #define TPIU_CID0_PREAMBLE(v)                    ((v) << 0)
  #define TPIU_CID0_PREAMBLE_SET(x, v)             do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define TPIU_CID0_PREAMBLE_GET(x)                (((x) >> 0) & 0xff)

/** Component Identification Register 1 @multiple */
#define TPIU_CID1_ADDR                               0xe0040ff4
/** Preamble @multiple */
  #define TPIU_CID1_PREAMBLE_SHIFT                 0
  #define TPIU_CID1_PREAMBLE(v)                    ((v) << 0)
  #define TPIU_CID1_PREAMBLE_SET(x, v)             do { (x) = (((x) & ~0xf) | ((v) << 0)); } while(0)
  #define TPIU_CID1_PREAMBLE_GET(x)                (((x) >> 0) & 0xf)
/** Component class @multiple */
  #define TPIU_CID1_COMPONENTCLASS_SHIFT           4
  #define TPIU_CID1_COMPONENTCLASS(v)              ((TPIU_CID1_COMPONENTCLASS_##v) << 4)
  #define TPIU_CID1_COMPONENTCLASS_SET(x, v)       do { (x) = (((x) & ~0xf0) | ((TPIU_CID1_COMPONENTCLASS_##v) << 4)); } while(0)
  #define TPIU_CID1_COMPONENTCLASS_GET(x)          (((x) >> 4) & 0xf)
    #define TPIU_CID1_COMPONENTCLASS_ROM_TABLE       0x00000001
    #define TPIU_CID1_COMPONENTCLASS_CORESIGHT_COMPONENT 0x00000009
    #define TPIU_CID1_COMPONENTCLASS_PRIMECELL_OF_SYSTEM_COMPONENT_WITH_NO_STANDARDIZED_REGISTER_LAYOUT_FOR_BACKWARD_COMPATIBILITY 0x0000000f

/** Component Identification Register 2 @multiple */
#define TPIU_CID2_ADDR                               0xe0040ff8
/** Preamble @multiple */
  #define TPIU_CID2_PREAMBLE_SHIFT                 0
  #define TPIU_CID2_PREAMBLE(v)                    ((v) << 0)
  #define TPIU_CID2_PREAMBLE_SET(x, v)             do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define TPIU_CID2_PREAMBLE_GET(x)                (((x) >> 0) & 0xff)

/** Component Identification Register 3 @multiple */
#define TPIU_CID3_ADDR                               0xe0040ffc
/** Preamble @multiple */
  #define TPIU_CID3_PREAMBLE_SHIFT                 0
  #define TPIU_CID3_PREAMBLE(v)                    ((v) << 0)
  #define TPIU_CID3_PREAMBLE_SET(x, v)             do { (x) = (((x) & ~0xff) | ((v) << 0)); } while(0)
  #define TPIU_CID3_PREAMBLE_GET(x)                (((x) >> 0) & 0xff)

#endif

