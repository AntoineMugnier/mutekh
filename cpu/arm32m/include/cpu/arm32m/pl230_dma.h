/***************************************
* Auto generated by BFGen, do not edit *
***************************************/

/*
   bfgen -o cdefs -O /home/cerdan/Work/mutekh/drivers/dma/pl230/pl230_dma.h    \
     -I /opt/bfgen/defs/arm/pl230/pl230.bf cdefs_use_reg_mask=1                \
     cdefs_use_setter_value_prefix=0
*/

#ifndef _PL230_DMA_BFGEN_DEFS_
#define _PL230_DMA_BFGEN_DEFS_

#define PL230_DMA_STATUS_ADDR                        0x00000000
#define PL230_DMA_STATUS_MASK                        0x001f00f1
/** When this bit is 1, the DMA is enabled. @multiple */
  #define PL230_DMA_STATUS_EN                      0x00000001
/** State can be one of the following. Higher values (11-15) are undefined.
   @multiple */
  #define PL230_DMA_STATUS_STATE(v)                ((v) << 4)
  #define PL230_DMA_STATUS_STATE_SET(x, v)         do { (x) = (((x) & ~0xf0) | ((v) << 4)); } while(0)
  #define PL230_DMA_STATUS_STATE_GET(x)            (((x) >> 4) & 0xf)
    #define PL230_DMA_STATUS_STATE_IDLE              0x00000000
    #define PL230_DMA_STATUS_STATE_RDCHCTRLDATA      0x00000001
    #define PL230_DMA_STATUS_STATE_RDSRCENDPTR       0x00000002
    #define PL230_DMA_STATUS_STATE_RDDSTENDPTR       0x00000003
    #define PL230_DMA_STATUS_STATE_RDSRCDATA         0x00000004
    #define PL230_DMA_STATUS_STATE_WRDSTDATA         0x00000005
    #define PL230_DMA_STATUS_STATE_WAITREQCLR        0x00000006
    #define PL230_DMA_STATUS_STATE_WRCHCTRLDATA      0x00000007
    #define PL230_DMA_STATUS_STATE_STALLED           0x00000008
    #define PL230_DMA_STATUS_STATE_DONE              0x00000009
    #define PL230_DMA_STATUS_STATE_PERSCATTRANS      0x0000000a
/** Number of available DMA channels minus one. @multiple */
  #define PL230_DMA_STATUS_CHNUM(v)                ((v) << 16)
  #define PL230_DMA_STATUS_CHNUM_SET(x, v)         do { (x) = (((x) & ~0x1f0000) | ((v) << 16)); } while(0)
  #define PL230_DMA_STATUS_CHNUM_GET(x)            (((x) >> 16) & 0x1f)

#define PL230_DMA_CONFIG_ADDR                        0x00000004
#define PL230_DMA_CONFIG_MASK                        0x00000021
/** Set this bit to enable the DMA controller. @multiple */
  #define PL230_DMA_CONFIG_EN                      0x00000001
/** Control whether accesses done by the DMA controller are privileged or not.
   When CHPROT = 1 then HPROT is HIGH and the access is privileged. When CHPROT =
   0 then HPROT is LOW and the access is non-privileged. @multiple */
  #define PL230_DMA_CONFIG_CHPROT                  0x00000020

#define PL230_DMA_CTRLBASE_ADDR                      0x00000008
#define PL230_DMA_CTRLBASE_MASK                      0xffffffff
/** The base pointer for a location in system memory that holds the channel
   control data structure. This register must be written to point to a location
   in system memory with the channel control data structure before the DMA can be
   used. Note that ctrl_base_ptr[8:0] must be 0. @multiple */
  #define PL230_DMA_CTRLBASE_BASE(v)               ((v) << 0)
  #define PL230_DMA_CTRLBASE_BASE_SET(x, v)        do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define PL230_DMA_CTRLBASE_BASE_GET(x)           (((x) >> 0) & 0xffffffff)

#define PL230_DMA_ALTCTRLBASE_ADDR                   0x0000000c
#define PL230_DMA_ALTCTRLBASE_MASK                   0xffffffff
/** The base address of the alternate data structure. This register will read as
   DMA_CTRLBASE + 0x40. @multiple */
  #define PL230_DMA_ALTCTRLBASE_BASE(v)            ((v) << 0)
  #define PL230_DMA_ALTCTRLBASE_BASE_SET(x, v)     do { (x) = (((x) & ~0xffffffff) | ((v) << 0)); } while(0)
  #define PL230_DMA_ALTCTRLBASE_BASE_GET(x)        (((x) >> 0) & 0xffffffff)

#define PL230_DMA_CHWAITSTATUS_ADDR                  0x00000010
#define PL230_DMA_CHWAITSTATUS_MASK                  0xffffffff
/** Status for wait on request for channel n. @multiple */
  #define PL230_DMA_CHWAITSTATUS_CH_COUNT          32
  #define PL230_DMA_CHWAITSTATUS_CH(fidx)          (0x00000001 << ((fidx)))

#define PL230_DMA_CHSWREQ_ADDR                       0x00000014
#define PL230_DMA_CHSWREQ_MASK                       0xffffffff
/** Write 1 to this bit to generate a DMA request for this channel. @multiple */
  #define PL230_DMA_CHSWREQ_CH_COUNT               32
  #define PL230_DMA_CHSWREQ_CH(fidx)               (0x00000001 << ((fidx)))

#define PL230_DMA_CHUSEBURSTS_ADDR                   0x00000018
#define PL230_DMA_CHUSEBURSTS_MASK                   0xffffffff
/** Write to 1 to enable the useburst setting for this channel. Reading returns
   the useburst status. After the penultimate 2^R transfer completes, if the
   number of remaining transfers, N, is less than 2^R then the controller resets
   the chnl_useburst_set bit to 0. This enables you to complete the remaining
   transfers using dma_req[] or dma_sreq[]. In peripheral scatter-gather mode, if
   the next_useburst bit is set in channel_cfg then the controller sets the
   chnl_useburst_set[C] bit to a 1, when it completes the DMA cycle that uses the
   alternate data structure. @multiple */
  #define PL230_DMA_CHUSEBURSTS_CH_COUNT           32
  #define PL230_DMA_CHUSEBURSTS_CH(fidx)           (0x00000001 << ((fidx)))

#define PL230_DMA_CHUSEBURSTC_ADDR                   0x0000001c
#define PL230_DMA_CHUSEBURSTC_MASK                   0xffffffff
/** Write to 1 to disable useburst setting for this channel. @multiple */
  #define PL230_DMA_CHUSEBURSTC_CH_COUNT           32
  #define PL230_DMA_CHUSEBURSTC_CH(fidx)           (0x00000001 << ((fidx)))

#define PL230_DMA_CHREQMASKS_ADDR                    0x00000020
#define PL230_DMA_CHREQMASKS_MASK                    0xffffffff
/** Write to 1 to disable peripheral requests for this channel. @multiple */
  #define PL230_DMA_CHREQMASKS_CH_COUNT            32
  #define PL230_DMA_CHREQMASKS_CH(fidx)            (0x00000001 << ((fidx)))

#define PL230_DMA_CHREQMASKC_ADDR                    0x00000024
#define PL230_DMA_CHREQMASKC_MASK                    0xffffffff
/** Write to 1 to enable peripheral requests for this channel. @multiple */
  #define PL230_DMA_CHREQMASKC_CH_COUNT            32
  #define PL230_DMA_CHREQMASKC_CH(fidx)            (0x00000001 << ((fidx)))

#define PL230_DMA_CHENS_ADDR                         0x00000028
#define PL230_DMA_CHENS_MASK                         0xffffffff
/** Write to 1 to enable this channel. Reading returns the enable status of the
   channel. @multiple */
  #define PL230_DMA_CHENS_CH_COUNT                 32
  #define PL230_DMA_CHENS_CH(fidx)                 (0x00000001 << ((fidx)))

#define PL230_DMA_CHENC_ADDR                         0x0000002c
#define PL230_DMA_CHENC_MASK                         0xffffffff
/** Write to 1 to disable this channel. Note that the controller disables a
   channel, by setting the appropriate bit, when either it completes the DMA
   cycle, or it reads a channel_cfg memory location which has cycle_ctrl = b000,
   or an ERROR occurs on the AHB-Lite bus. A read from this field returns the
   value of CH0ENS from the DMA_CHENS register. @multiple */
  #define PL230_DMA_CHENC_CH_COUNT                 32
  #define PL230_DMA_CHENC_CH(fidx, v)              ((v) << ((fidx) * 32 + 0))
  #define PL230_DMA_CHENC_CH_SET(fidx, x, v)       do { (x) = (((x) & ~(0xffffffff << ((fidx) * 32))) | ((v) << ((fidx) * 32 + 0))); } while(0)
  #define PL230_DMA_CHENC_CH_GET(fidx, x)          (((x) >> ((fidx) * 32 + 0)) & 0xffffffff)

#define PL230_DMA_CHALTS_ADDR                        0x00000030
#define PL230_DMA_CHALTS_MASK                        0xffffffff
/** Write to 1 to select the alternate structure for this channel. @multiple */
  #define PL230_DMA_CHALTS_CH_COUNT                32
  #define PL230_DMA_CHALTS_CH(fidx)                (0x00000001 << ((fidx)))

#define PL230_DMA_CHALTC_ADDR                        0x00000034
#define PL230_DMA_CHALTC_MASK                        0xffffffff
/** Write to 1 to select the Primary structure for this channel. @multiple */
  #define PL230_DMA_CHALTC_CH_COUNT                32
  #define PL230_DMA_CHALTC_CH(fidx)                (0x00000001 << ((fidx)))

#define PL230_DMA_CHPRIS_ADDR                        0x00000038
#define PL230_DMA_CHPRIS_MASK                        0xffffffff
/** Write to 1 to obtain high priority for this channel. Reading returns the
   channel priority status. @multiple */
  #define PL230_DMA_CHPRIS_CH_COUNT                32
  #define PL230_DMA_CHPRIS_CH(fidx)                (0x00000001 << ((fidx)))

#define PL230_DMA_CHPRIC_ADDR                        0x0000003c
#define PL230_DMA_CHPRIC_MASK                        0xffffffff
/** Write to 1 to clear high priority for this channel. @multiple */
  #define PL230_DMA_CHPRIC_CH_COUNT                32
  #define PL230_DMA_CHPRIC_CH(fidx)                (0x00000001 << ((fidx)))

#define PL230_DMA_ERRORC_ADDR                        0x0000004c
#define PL230_DMA_ERRORC_MASK                        0x00000001
/** This bit is set high if an AHB bus error has occurred. Writing a 1 to this
   bit will clear the bit. If the error is deasserted at the same time as an
   error occurs on the bus, the error condition takes precedence and ERRORC
   remains asserted. @multiple */
  #define PL230_DMA_ERRORC_ERRORC                  0x00000001

#define PL230_DMA_ICONF_ADDR                         0x00000e00
#define PL230_DMA_ICONF_MASK                         0x00000001
/** Enable the integration test logic. @multiple */
  #define PL230_DMA_ICONF_EN                       0x00000001

#define PL230_DMA_STALL_STATUS_ADDR                  0x00000e08
#define PL230_DMA_STALL_STATUS_MASK                  0x00000001
/** Returns the status of dma_stall. @multiple */
  #define PL230_DMA_STALL_STATUS_V                 0x00000001

#define PL230_DMA_REQ_STATUS_ADDR                    0x00000e10
#define PL230_DMA_REQ_STATUS_MASK                    0xffffffff
/** When this bit is 1, it indicates that the peripheral connected as the input
   to this DMA channel is requesting the controller to service the DMA channel.
   The controller services the request by performing the DMA cycle using 2^R DMA
   transfers. @multiple */
  #define PL230_DMA_REQ_STATUS_CH_COUNT            32
  #define PL230_DMA_REQ_STATUS_CH(fidx)            (0x00000001 << ((fidx)))

#define PL230_DMA_REQ_SINGLE_STATUS_ADDR             0x00000e18
#define PL230_DMA_REQ_SINGLE_STATUS_MASK             0xffffffff
/** When this bit is 1, it indicates that the peripheral connected as the input
   to this DMA channel is requesting the controller to service the DMA channel.
   The controller services the request by performing the DMA cycle using single
   DMA transfers. @multiple */
  #define PL230_DMA_REQ_SINGLE_STATUS_CH_COUNT     32
  #define PL230_DMA_REQ_SINGLE_STATUS_CH(fidx)     (0x00000001 << ((fidx)))

#define PL230_DMA_DONE_SET_ADDR                      0x00000e20
#define PL230_DMA_DONE_SET_MASK                      0xffffffff
/** The read/write dma_done_set Register enables you to assert the dma_done[]
   signals. Reading the register returns the status of dma_done[]. Writing 0 has
   no effect. @multiple */
  #define PL230_DMA_DONE_SET_CH_COUNT              32
  #define PL230_DMA_DONE_SET_CH(fidx)              (0x00000001 << ((fidx)))

#define PL230_DMA_DONE_CLEAR_ADDR                    0x00000e24
#define PL230_DMA_DONE_CLEAR_MASK                    0xffffffff
/** The write-only dma_done_clr Register enables you to deassert the dma_done[]
   signals. Writing 0 has no effect. @multiple */
  #define PL230_DMA_DONE_CLEAR_CH_COUNT            32
  #define PL230_DMA_DONE_CLEAR_CH(fidx)            (0x00000001 << ((fidx)))

#define PL230_DMA_ACTIVE_SET_ADDR                    0x00000e28
#define PL230_DMA_ACTIVE_SET_MASK                    0xffffffff
/** The read/write dma_active_set Register enables you to assert the dma_active[]
   signals. Reading the register returns the status of dma_active[]. Writing 0
   has no effect. @multiple */
  #define PL230_DMA_ACTIVE_SET_CH_COUNT            32
  #define PL230_DMA_ACTIVE_SET_CH(fidx)            (0x00000001 << ((fidx)))

#define PL230_DMA_ACTIVE_CLEAR_ADDR                  0x00000e2c
#define PL230_DMA_ACTIVE_CLEAR_MASK                  0xffffffff
/** The write-only dma_active_clr Register enables you to deassert the
   dma_active[] signals. Writing 0 has no effect. @multiple */
  #define PL230_DMA_ACTIVE_CLEAR_CH_COUNT          32
  #define PL230_DMA_ACTIVE_CLEAR_CH(fidx)          (0x00000001 << ((fidx)))

#define PL230_DMA_ERROR_SET_ADDR                     0x00000e48
#define PL230_DMA_ERROR_SET_MASK                     0xffffffff
/** Enables you to assert the dma_err signal. Writing 0 has no effect. @multiple
   */
  #define PL230_DMA_ERROR_SET_V_COUNT              32
  #define PL230_DMA_ERROR_SET_V(fidx)              (0x00000001 << ((fidx)))

#endif

