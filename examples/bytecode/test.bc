
.name test

// load custom instruction definitions
.custom print

// bytecode entry point
test_bytecode_entry:

    // buffer provided by the C code
    .entry %0
    // use this buffer as an execution stack
    add8   %0, 31 * 4

    // invoke fact(5)
    cst8   %fact:arg, 5
    call8  %fact:link, fact
    printi %fact:result       // our custom instruction

    // invoke fact(7)
    cst8   %1, 7
    call8  %10, fact
    printi %1

    // terminate bytecode execution
    end

// recursive factorial function
.func fact
    // declare link register and stack pointer registers
    .input %10 link, %0 sp

    // declare input argument register
    .input %1 arg

    // declare result register
    .output %1 result

    // declare clobbered registers
    .clobber %2 tmp

    // declare modified but properly restored registers
    .preserve %10, %0

    // push return addess on stack
    std	%link, %sp

    // terminate if arg == 1
    cst8 %tmp, 1
    eq	 %arg, %tmp
      jmp8	fact_end

    // save arg which is also the result register
    std	%arg, %sp

    // recursive call fact(arg-1)
    add8  %arg, -1
    call8 %link, fact

    // restore arg
    ldi	%tmp, %sp
    // multiply result of fact(arg-1) with arg
    mul32 %result, %tmp

fact_end:

    // restore return addess from stack
    ldi	%link, %sp

    // return
    ret	%link

.endfunc
